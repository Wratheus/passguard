/// Generated file. Do not edit.
///
/// Original: assets/i18n
/// To regenerate, run: `dart run slang`
///
/// Locales: 2
/// Strings: 1564 (782 per locale)
///
/// Built on 2024-03-26 at 20:36 UTC

// coverage:ignore-file
// ignore_for_file: type=lint

import 'package:flutter/widgets.dart';
import 'package:slang/builder/model/node.dart';
import 'package:slang_flutter/slang_flutter.dart';
export 'package:slang_flutter/slang_flutter.dart';

const AppLocale _baseLocale = AppLocale.en;

/// Supported locales, see extension methods below.
///
/// Usage:
/// - LocaleSettings.setLocale(AppLocale.en) // set locale
/// - Locale locale = AppLocale.en.flutterLocale // get flutter locale from enum
/// - if (LocaleSettings.currentLocale == AppLocale.en) // locale check
enum AppLocale with BaseAppLocale<AppLocale, Translations> {
	en(languageCode: 'en', build: Translations.build),
	ru(languageCode: 'ru', build: _StringsRu.build);

	const AppLocale({required this.languageCode, this.scriptCode, this.countryCode, required this.build}); // ignore: unused_element

	@override final String languageCode;
	@override final String? scriptCode;
	@override final String? countryCode;
	@override final TranslationBuilder<AppLocale, Translations> build;

	/// Gets current instance managed by [LocaleSettings].
	Translations get translations => LocaleSettings.instance.translationMap[this]!;
}

/// Method A: Simple
///
/// No rebuild after locale change.
/// Translation happens during initialization of the widget (call of t).
/// Configurable via 'translate_var'.
///
/// Usage:
/// String a = t.someKey.anotherKey;
/// String b = t['someKey.anotherKey']; // Only for edge cases!
Translations get t => LocaleSettings.instance.currentTranslations;

/// Method B: Advanced
///
/// All widgets using this method will trigger a rebuild when locale changes.
/// Use this if you have e.g. a settings page where the user can select the locale during runtime.
///
/// Step 1:
/// wrap your App with
/// TranslationProvider(
/// 	child: MyApp()
/// );
///
/// Step 2:
/// final t = Translations.of(context); // Get t variable.
/// String a = t.someKey.anotherKey; // Use t variable.
/// String b = t['someKey.anotherKey']; // Only for edge cases!
class TranslationProvider extends BaseTranslationProvider<AppLocale, Translations> {
	TranslationProvider({required super.child}) : super(settings: LocaleSettings.instance);

	static InheritedLocaleData<AppLocale, Translations> of(BuildContext context) => InheritedLocaleData.of<AppLocale, Translations>(context);
}

/// Method B shorthand via [BuildContext] extension method.
/// Configurable via 'translate_var'.
///
/// Usage (e.g. in a widget's build method):
/// context.t.someKey.anotherKey
extension BuildContextTranslationsExtension on BuildContext {
	Translations get t => TranslationProvider.of(this).translations;
}

/// Manages all translation instances and the current locale
class LocaleSettings extends BaseFlutterLocaleSettings<AppLocale, Translations> {
	LocaleSettings._() : super(utils: AppLocaleUtils.instance);

	static final instance = LocaleSettings._();

	// static aliases (checkout base methods for documentation)
	static AppLocale get currentLocale => instance.currentLocale;
	static Stream<AppLocale> getLocaleStream() => instance.getLocaleStream();
	static AppLocale setLocale(AppLocale locale, {bool? listenToDeviceLocale = false}) => instance.setLocale(locale, listenToDeviceLocale: listenToDeviceLocale);
	static AppLocale setLocaleRaw(String rawLocale, {bool? listenToDeviceLocale = false}) => instance.setLocaleRaw(rawLocale, listenToDeviceLocale: listenToDeviceLocale);
	static AppLocale useDeviceLocale() => instance.useDeviceLocale();
	@Deprecated('Use [AppLocaleUtils.supportedLocales]') static List<Locale> get supportedLocales => instance.supportedLocales;
	@Deprecated('Use [AppLocaleUtils.supportedLocalesRaw]') static List<String> get supportedLocalesRaw => instance.supportedLocalesRaw;
	static void setPluralResolver({String? language, AppLocale? locale, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver}) => instance.setPluralResolver(
		language: language,
		locale: locale,
		cardinalResolver: cardinalResolver,
		ordinalResolver: ordinalResolver,
	);
}

/// Provides utility functions without any side effects.
class AppLocaleUtils extends BaseAppLocaleUtils<AppLocale, Translations> {
	AppLocaleUtils._() : super(baseLocale: _baseLocale, locales: AppLocale.values);

	static final instance = AppLocaleUtils._();

	// static aliases (checkout base methods for documentation)
	static AppLocale parse(String rawLocale) => instance.parse(rawLocale);
	static AppLocale parseLocaleParts({required String languageCode, String? scriptCode, String? countryCode}) => instance.parseLocaleParts(languageCode: languageCode, scriptCode: scriptCode, countryCode: countryCode);
	static AppLocale findDeviceLocale() => instance.findDeviceLocale();
	static List<Locale> get supportedLocales => instance.supportedLocales;
	static List<String> get supportedLocalesRaw => instance.supportedLocalesRaw;
}

// translations

// Path: <root>
class Translations implements BaseTranslations<AppLocale, Translations> {
	/// Returns the current translations of the given [context].
	///
	/// Usage:
	/// final t = Translations.of(context);
	static Translations of(BuildContext context) => InheritedLocaleData.of<AppLocale, Translations>(context).translations;

	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	Translations.build({Map<String, Node>? overrides, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver})
		: assert(overrides == null, 'Set "translation_overrides: true" in order to enable this feature.'),
		  $meta = TranslationMetadata(
		    locale: AppLocale.en,
		    overrides: overrides ?? {},
		    cardinalResolver: cardinalResolver,
		    ordinalResolver: ordinalResolver,
		  ) {
		$meta.setFlatMapFunction(_flatMapFunction);
	}

	/// Metadata for the translations of <en>.
	@override final TranslationMetadata<AppLocale, Translations> $meta;

	/// Access flat map
	dynamic operator[](String key) => $meta.getTranslation(key);

	late final Translations _root = this; // ignore: unused_field

	// Translations
	String get warehouse => 'Warehouse';
	String get notSelected => 'Not selected';
	String get notifyScanQrWarehouse => 'Scan the QR code of the warehouse or work area. You will open the modules available for the warehouse';
	String get userID => 'User.ID';
	String get notificationCompletionWork => 'Be sure to complete the work, all requests are executed on your behalf!';
	String get finishJob => 'Finish the job';
	String get requestCannotExecuted => 'The request cannot be executed';
	String get settings => 'Settings';
	String get noModulesAvailable => 'No modules available';
	String get noModulesAvailableDescript => 'There are no modules available for work in this warehouse, change the warehouse or contact technical support!';
	String get selectWarehouse => 'Select a warehouse';
	String get selectWarehouseDescript => 'A consolidated warehouse is displayed on your account. Scan the available warehouse where you will work!';
	String get exitUserTitle => 'Completion of work';
	String get exitUserMessage => 'Do you really want to shut down the terminal?';
	String get invalidCodeType => 'Invalid code type';
	String get invalidCodeFormat => 'Invalid code format';
	String get invalidAuthCodeType => 'Invalid code type, scan your personal qr code';
	String get invalidOrderPackageCodeType => 'Invalid code with the package order ID';
	String get invalidWarehouseWorkareaCodeType => 'Invalid code type, scan the code of the warehouse or work area';
	String get failedDecryptQrCode => 'Failed to decrypt qr code';
	String get doesNotCodeTask => 'The code does not match the task';
	String get probablyCode => 'The code is probably corrupted. Data could not be read!';
	String get selectWarehouseMessage => 'Confirm that you really want to switch to the currently selected warehouse';
	String get selectWorkAreaMessage => 'Confirm that you really want to switch to the selected zone';
	String get language => 'English';
	String get calculation => 'Calculation';
	String get clearingDb => 'Clearing the database';
	String get updatingProductDb => 'Updating the product database';
	String get thereErrors => 'There are errors';
	String get errors => 'Errors';
	String get done => 'Done';
	String get onPageNotifyTitle => 'There are problems';
	String get onPageNotifyMessage => 'Some steps could not be completed, please contact the developer for clarification!';
	String get checkingTerminal => 'Checking the terminal';
	String get notificationVerifyTerminal => 'Do not turn off the device while checking and updating';
	String get continueL => 'Continue';
	String get noDataAvailable => 'No data available';
	String get consolidatedResult => 'Consolidated result for all active documents in the current module. Click to update the result and documents';
	String get activeDocuments => 'Active documents';
	String get completedDocuments => 'Completed documents';
	String get unableOpenDocument => 'Unable to open the document';
	String get updateListDocumentTitle => 'Updating data';
	String get updateListDocumentMessage => 'Update the list of documents?';
	String get statusUploadCompletedDocuments => 'Uploading completed\ndocuments';
	String get statusUploadingActiveDocuments => 'Uploading active\ndocuments';
	String get listCompletedDocuments => 'List of completed documents';
	String get listActiveDocuments => 'List of active documents';
	String get listPackageContents => 'List of package contents';
	String get thereNoDocuments => 'No documents available';
	String get contentsEmpty => 'The contents are empty';
	String get documents => 'Documents';
	String get barcodeAndArticle => 'Barcode/article';
	String get title => 'Title';
	String get history => 'History';
	String get outputHistory => 'Output of history, current process, sequential scan. Click to see details or perform an action!';
	String get storyEmpty => 'The story is empty';
	String get listEmpty => 'The list is empty';
	String get endList => 'End of the list';
	String get sortList => 'Sort the list or remove the selected filters';
	String get added => 'Added';
	String get unScanned => 'Un - scanned';
	String get scanned => 'Scanned';
	String get all => 'All';
	String get selectActionSelectedPosition => 'Select an action on the selected position!';
	String get resetToZero => 'Reset to Zero';
	String get mistake => 'Mistake';
	String get resetPositionWarning => 'The position is reset, but the position in the interface could not be updated. Reload the document!';
	String get list => 'List';
	String get emptyList => 'Empty list';
	String get motionCreationFormValidationCreateMoving => 'Be sure to check the form data before creating a move!';
	String get createMove => 'Create a move';
	String get fromDocumentCreateMove => 'From this document, the goods are taken to create their movements to another warehouse';
	String get uploadingDataMove => 'Uploading data\nto move';
	String get goodsBeingMoved => 'Goods being moved';
	String get simplifiedRelocation => 'Simplified relocation';
	String get transferAutoAccepted => 'This transfer will be automatically accepted at the receiving warehouse!';
	String get standardMovement => 'Standard movement';
	String get transferNeedAccepted => 'This transfer will need to be accepted at the receiving warehouse!';
	String get warehouseRecipient => 'Warehouse recipient';
	String get departureWarehouseAuto => 'the treasure of the shipment is set automatically.\nSelect the receipt warehouse!';
	String get choose => 'Choose';
	String get specify => 'Specify';
	String get attach => 'Attach';
	String get notAttach => 'Not attached';
	String get scanProducts => 'Scan products';
	String get selectProducts => 'Select products';
	String get notDataCreateMove => 'Could not get the data required for the move!';
	String get notSortItemsErrorMove => 'Couldn\'t sort through the items. Creating a move is impossible!';
	String get clearingCurrentProcess => 'Clearing the current process';
	String get confirmClearCurrentFormMove => 'Confirm that you want to clear the current move form!';
	String get formTransferCleared => 'The transfer form has been cleared';
	String get failedClearMove => 'Failed to clear the move';
	String get selectionGoodsMove => 'Selection of goods to move';
	String get returnCreationMove => 'Return to Creation Move';
	String get backContinueCreatingMove => 'Click to go back and continue creating the move';
	String get receiptWarehouse => 'Receipt Warehouse';
	String get listProductCreateTransfer => 'A list of products to create a transfer to another warehouse!';
	String get noReceivingWarehouseSelected => 'The recipient warehouse is not selected';
	String get noGoodsCreateMove => 'There are no goods to create a move!';
	String get errorFormingListProducts => 'Error in forming the list of products';
	String get creatingMove => 'Creating a move';
	String get updateDb => 'Update the database';
	String get checkingDb => 'Checking the Database';
	String get gettingDb => 'Getting data';
	String get noDataUploadedDb => 'No data uploaded';
	String get getErrorAllProducts => 'Could not get the data of all products';
	String get dataUpdateDb => 'Data updated';
	String get updatedDb => 'The data is updated, the database contains all available products';
	String get noDataRecordedDb => 'No data recorded';
	String get writtenErrorDb => 'Data could not be written to the local database.';
	String get database => 'Database';
	String get removal => 'Removal';
	String get clearDbConfirm => 'Do you really want to clean up the entire local database?';
	String get localDbCleaned => 'The local database has been cleaned and restored';
	String get failedClearDb => 'Failed to clear the database';
	String get restoreDb => 'Restore the database';
	String get checkingUpdate => 'Checking for updates';
	String get languageLabel => 'Language';
	String get failedLoadTradingFloorData => 'Failed to load trading floor data';
	String get failedLoadLogisticsTabData => 'Failed to load logistics section data';
	String get uncertainGoods => 'Uncertain goods';
	String get confirmOrPostTradingHall => 'Confirm or post the products in the trading floor that are presented in this list';
	String get calcTradingHall => 'Calculation of the percentage of the trading floor filling based on scanned data based on the current day\'s balances!';
	String get scanHall => 'Scan the hall';
	String get dataNotUpdated => 'Data not updated';
	String get errorUpdatingDataTradingHall => 'An error occurred while updating the data, the data is not up to date. Try updating manually!';
	String get scanAllEachProductsTradingHall => 'Scan all the products in the showcase, one unit of each size range, to check the sales floor';
	String get uploadingActiveDocuments => 'Uploading active\ndocuments';
	String get uploadingDataTabsLogistics => 'Loading partition\n data';
	String get uploadingLogisticsListAvailability => 'Loading the list of orders\n with goods for confirmation';
	String get uploadingLogisticsListWithdraw => 'Loading a list of orders\n with goods for withdrawal from the reserve';
	String get uploadingLogisticsListPack => 'Loading the list of orders\n for packaging';
	String get uploadingLogisticsListSend => 'Loading the list of orders\n with packages for shipment';
	String get uploadingOrderData => 'Loading order\n data';
	String get tradingHall => 'Trading hall';
	String get invalidUserLogin => 'Invalid user login';
	String get userLogin => 'User login';
	String get invalidPassword => 'Invalid password';
	String get password => 'Password';
	String get scanPersonalCodeAuth => 'Scan your personal code\n to access the terminal!';
	String get invalidData => 'Invalid data';
	String get authErrorTerminal => 'Authorization error in the terminal';
	String get dataLoadedToCreateMove => 'Data is being loaded to create a move';
	String get couldNotGetDocuments => 'Could not get these documents!';
	String get uploadingControlData => 'Uploading control\ndata';
	String get byCurrentWarehouse => 'by current warehouse';
	String get noControl => 'There is no control';
	String get moveItemsAccepted => 'Move the items that were accepted but not moved to another warehouse!';
	String get control => 'Control';
	String get checkingForUpdates => 'Checking for updates';
	String get problemUpdating => 'If you have problems updating, write to technical support';
	String get updateDownloadFromServer => 'The update is being downloaded from the server, after which you will be offered to install it';
	String get installUpdateOnlyAndroid => 'Installing the update is currently only possible for Android';
	String get anErrorOccurredDownloadingInstall => 'An error occurred while downloading and installing';
	String get updateCenterApp => 'Update Center\napplications';
	String get reboot => 'Reboot';
	String get clearProcess => 'Clear the process';
	String get setAreaTitle => 'You can\'t change the zone';
	String get setAreaMessage => 'After the start of scanning, when the document is not empty, you cannot change the scanning area. You can change it after sending or clearing the document!';
	String get scanSectionSuccessInstalled => 'The scan section has been successfully installed';
	String get failedSetScanArea => 'Failed to set the scan area';
	String get productDbIsEmpty => 'The product database\nis empty';
	String get stateEmptyProcess => 'Working with the process\nis impossible';
	String get stateBlocked => 'Working with the process\nis not allowed';
	String get stateExistScanned => 'Scan data\nis available';
	String get stateExtraScanned => 'Unnecessary scans\nin the process';
	String get stateStart => 'Fulfill the condition\nbefore starting work';
	String get followSuggestedConditions => 'Follow the suggested conditions to get started';
	String get zone => 'Zone';
	String get package => 'Package';
	String get setZone => 'Set the zone';
	String get setPackage => 'Attach the packaging';
	String get clickChangeArea => 'Click to change the work area!';
	String get clickChangePackage => 'Click to attach another package!';
	String get scanError => 'Scan error';
	String get awaitLastScan => 'The previous scan has not been processed yet, before the start of the current one.';
	String get invalidUnreadableCode => 'Invalid/unreadable code. Try again or enter manually!';
	String get notBarcodeInDb => 'Couldn\'t find this barcode in the database';
	String get simplifiedManualInput => 'Simplified manual input';
	String get productIsNotList => 'The product is not in the list';
	String get positionIsNotScanList => 'This position is not in the scan list, you can add it. Confirm!';
	String get positionMissingCurrentProcess => 'This position is missing in the current process';
	String get positionAlreadyBeenScanned => 'This position has already been scanned';
	String get conditionsNotScan => 'The conditions are not met before starting the scan';
	String get emptyProcess => 'Empty process';
	String get youHaveNotScanned => 'You have not scanned anything, an empty process cannot be sent!';
	String get cancelingScan => 'Canceling a scan';
	String get confirmCancelAction => 'Confirm that you want to cancel this action';
	String get actionCanceled => 'Action canceled';
	String get couldNotCancelAction => 'Could not cancel the action';
	String get cancelingLastScan => 'Canceling the last scan';
	String get confirmCancelLastScan => 'Confirm that you want to cancel the last scan';
	String get lastActionCanceled => 'Last action canceled';
	String get couldUndoLastAction => 'Could not undo the last action';
	String get zeroingPosition => 'Zeroing the position';
	String get confirmResetPosition => 'Confirm that you want to reset this position';
	String get positionResetToZero => 'The position is reset to zero';
	String get failedResetPosition => 'Failed to reset the position';
	String get accessInNotProvided => 'Access is not provided';
	String get blockingDataIsUnknown => 'Blocking data is unknown';
	String get terminals => 'Terminals';
	String get blockedDescript_one => 'It was not possible to check the blocking of this process. Try again later or contact support!';
	String get blockedDescript_two => 'It was not possible to block this process for you. Try again later or contact support!';
	String get blockedDescript_three => 'This process is blocked by another user. Close the process or find a terminal and unlock it!';
	String get updateDbScan => 'Update the database';
	String get updateDbScanDescript_1 => 'Update the product database at the terminal, go to ';
	String get updateDbScanDescript_2 => 'settings - database - update. ';
	String get updateDbScanDescript_3 => 'After that, the scanning process will become available!';
	String get emptyProcessDescript_1 => 'This scan requires ';
	String get emptyProcessDescript_2 => 'data';
	String get emptyProcessDescript_3 => ' which failed to load. Try again or contact technical support!';
	String get confirmAndStart => 'Confirm and start';
	String get beforeStartActionsCorrect => 'Before you start, make sure that your actions are correct. You are fully responsible for your actions.';
	String get selectAction => 'Select an action';
	String get startConfirm => 'Start confirm';
	String get listCurrentProcess => 'List of the current process';
	String get outputContentsCurrentScanningProcess => 'Output of the contents of the current scanning process. Click on a position to select an action!';
	String get scanHistory => 'Scan History';
	String get cancelAction => 'Cancel the action';
	String get cancelingLastActionHistory => 'Canceling the last action on the history. Click to roll back or the \'esc\' button on the terminal!';
	String get mainAction => 'Main action. Press the (ent) button';
	String get loadingDataProcess => 'Loading the data\nof the process';
	String get failedConvertItemsCreateMove => 'Failed to convert items to create a move!';
	String get acceptMove => 'Accept the move';
	String get acceptOrder => 'Accept the order';
	String get clickAcceptScannedItems => 'Confirm to accept the scanned items';
	String get confirmAction => 'Confirm the action!';
	String get confirmAcceptCurrentScannedItems => 'Do you really want to accept the current scanned items?';
	String get sendStatement => 'Send to the statement';
	String get assembleToOrder => 'Assemble to order';
	String get clickAssembleToShipmentOnMove => 'Confirm to send the data to the transfer order';
	String get clickAssembleToShipmentOnOrder => 'Confirm to send the data to the customer\'s order';
	String get clickSendInventoryData => 'Confirm to send to the inventory statement';
	String get confirmSendCurrentScannedItemsInventory => 'Do you really want to send the current scanned items to the inventory list?';
	String get saveReport => 'Save to Report';
	String get clickSendScanDataReport => 'Confirm to send the scan data to the report';
	String get confirmYourIntention => 'Confirm your intention';
	String get confirmSendCurrentScannedItemsTradingHall => 'Do you really want to send the current scanned items to the sales floor report';
	String get manual => 'manually';
	String get scanning => 'scanned';
	String get unknown => 'unknown';
	String get reauthorizationRequired => 'Reauthorization required';
	String get terminalNotUsed => 'The terminal has not been used for more than 30 minutes. \nauthorization will be required!';
	String get groupAcceptanceTitle => 'Acceptance of goods';
	String get groupAcceptanceDescript => 'Choose the appropriate type of acceptance';
	String get groupWarehouseMovementsTitle => 'Warehouse movements';
	String get groupWarehouseMovementsDescript => 'Create or accept a move between warehouses';
	String get groupShipmentTitle => 'Collecting orders';
	String get groupShipmentTitleDescript => 'Working with orders of available types';
	String get moduleInventoryName => 'Inventory';
	String get moduleInventoryCellName => 'Inventory of cells';
	String get moduleAcceptanceOnAdmissionOCName => 'By order of the supplier';
	String get moduleShipmentOnMoveName => 'to move';
	String get moduleShipmentOnOrderName => 'supplier';
	String get moduleAcceptanceOnAdmissionOCFullName => 'Acceptance on admission By order of the supplier';
	String get moduleAcceptanceOnAdmissionWOCName => 'By invoice';
	String get moduleAcceptanceOnAdmissionWOCFullName => 'Acceptance on admission By invoice';
	String get moduleCreateMove => 'Create a move';
	String get moduleTradingHall => 'Trading hall';
	String get moduleAcceptanceOnMoveName => 'Accept the move';
	String get moduleControlMovingName => 'Movement control';
	String get moduleControlPlacementName => 'Placement control';
	String get moduleAcceptanceOnMoveFullName => 'acceptance on admission By move';
	String get moduleControl => 'Control';
	String get serverResponseParameterMissing => 'Server response parameters are missing';
	String get invalidResponseFromServer => 'Invalid response from the server!';
	String get requestHasNotBeenSent => 'The request has not been sent. Request error!';
	String get notification => 'Notification';
	String get updateCellNotify => 'The cell data will be updated after performing the last actions!';
	String get requestError => 'Request error';
	String get sessionIsNotActive => 'The session is not active';
	String get sessionRejected => 'The session was rejected by the server reauthorization will be required!';
	String get iSee => 'I see';
	String get confirm => 'Confirm';
	String get cancel => 'Cancel';
	String get updateAvailable => 'An app update is available';
	String get absentDescriptUpdate => 'There is no description of the update';
	String get updateNewDescript => 'What\'s new in this version?';
	String get goToUpdate => 'Go to Update';
	String get later => 'Later';
	String get barcodeAbbreviated => 'Bc.';
	String get articleAbbreviated => 'Art.';
	String get inputType => 'Input type';
	String get closeClickEmptySpace => 'To close, click on any empty space';
	String get simplifiedMode_1 => 'Simplified mode';
	String get simplifiedMode_2 => ', it is enough to enter the last 5 digits of the barcode';
	String get manualInput => 'Manual input';
	String get close => 'Close';
	String get releaseButtonTopToClose => 'Release ▲ to close';
	String get enterPinCodePhysicalButtons => 'Enter the pin code using the physical buttons of the terminal';
	String get clear => 'Clear';
	String get specifyArea => 'Specify the scan area where you are going to scan';
	String get zoneIsNotSpecify => 'The zone is not specified';
	String get scanningArea => 'Scanning area';
	String get failedProductData => 'Failed to get product information.';
	String get scanProductShowTheScreen => 'Scan the product shown on the screen';
	String get scannedWrongCode => 'You scanned the wrong code';
	String get scanCurrentProductInfo => 'Scan the shown dimensions for confirmation. Switch between products using the arrows, down arrow - zoom in on the photo!';
	String get releaseTheButtonClose => 'Release the button to collapse';
	String get couldNotFindItemInCurrentProcess => 'Could not find this product in the current process';
	String get maxItemScanned => 'The maximum number of items scanned';
	String get startScanning => 'Start scanning';
	String get continueScanning => 'Continue scanning';
	String get infoItemLastProduct => 'Here you will see information about the last scanned product!';
	String get infoPlacementScanned => 'Scan the product and you will be shown the location options for placement!';
	String get moduleCell => 'Cell';
	String get modulePackage => 'Package';
	String get orderNumber => 'Order and packaging number';
	String get packagingID => 'Packaging ID';
	String get modulePlacement => 'Placement';
	String get moduleSettings => 'Settings';
	String get forConfirmation => 'For confirmation';
	String get onPackaging => 'On the packaging';
	String get withdrawalFromTheReserve => 'Withdrawal from the reserve';
	String get toSend => 'To send';
	String get moduleCreateImplementation => 'Create an implementation';
	String get createImplementation => 'Create an implementation';
	String get attachedProducts => 'Attached products';
	String get requisites => 'Requisites';
	String get motionCreationFormValidationCreateImplementation => 'Before creating an implementation, make sure that everything is selected correctly. You are personally responsible for the incorrect implementation!';
	String get errorDataAuth => 'Error in generating data received during authorization';
	String get inProgressUserSettingDevice => 'Customizing\n the device';
	String get inProgressUserSettingDeviceDescript => 'Please do not disconnect the device, in order to avoid the crash of the application!';
	String get checkClearDbError => 'The database could not be converted. Try again in the settings or contact technical support!';
	String get checkUpdateBaseError => 'An error occurred while updating the nomenclature database. Try again in the settings or contact technical support!';
	String get unableRequestAnUpdateFromServer => 'Unable to request an update from the server';
	String get requestTimeOut => 'The waiting time has been exceeded. There is no internet connection or problems on the server side!';
	String get more => 'More';
	String get errorDetails => 'Error Details';
	String get isNoDetailedError => 'There is no detailed description of the error';
	String get waitingTimeExceed => 'The waiting time has been exceeded. Download canceled!';
	String get updateAndInstall => 'Update and install';
	String get updateAndSave => 'Update and save';
	String get uploadWait => 'Uploading';
	String get checkingForAppUpdates => 'Checking for app updates';
	String get checkingForAppUpdatesDescript => 'We are looking for the latest available updates that suit you according to the parameters';
	String get checkingForBaseProductUpdates => 'Checking the database';
	String get checkingForBaseProductUpdatesDescript => 'Uploading information on the current product database on the device';
	String get noUpdateAvailable => 'No updates available';
	String get requirementsSelectType => 'Requirements of the selected type';
	String get requirementsSelectTypeDescript => 'For the selected type of movement, additional data is required.';
	String get codeIsNotePackage => 'The code is not from the packaging';
	String get codeIsNoteCell => 'The code is not from the cell';
	String get codeIsNoteWarehouse => 'The code is not from the warehouse';
	String get codeIsNoteWorkArea => 'The code is not from the work area';
	String get scanPackage => 'Scan the package';
	String get scanCell => 'Scan the cell';
	String get selectPackageMovingTypeFromCell => 'Select the cell from which you want to move the item';
	String get selectPackageMovingTypeFromPackage => 'Select the packaging from which you want to move the goods';
	String get selectPackageMovingTypePackage => 'Select the package you are going to move';
	String get cellLocatedAnotherWarehouse => 'The cell is located in another warehouse';
	String get autoSetPackageMovingError => 'Automatic presentation of packaging canceled';
	String get autoSetCellMovingError => 'Auto-presentation of the cell has been canceled';
	String get packageIsNotConditionMoving => 'Packaging is not suitable for creating a move';
	String get packageContentEmptyMoving => 'The contents of the package are empty or could not be obtained!';
	String get packageItemsEmpty => 'The contents of the package are empty or could not be retrieved';
	String get invalidCellData => 'Invalid cell data in the code. Maybe the code is outdated!';
	String get invalidPackageData => 'Incorrect packaging data in the code. Maybe the code is outdated!';
	String get invalidWorkAreaData => 'Invalid work zone data in the code. Maybe the code is outdated!';
	String get invalidWarehouseData => 'Incorrect warehouse data in the code. Maybe the code is outdated!';
	String get selectTypeMovementTitle => 'Choosing the type of movement';
	String get selectTypeMovementDescript => 'Select the type of movement from the available ones. When changing, the rest of the form fields are cleared!';
	String get type => 'Type';
	String get typeMovementNotSelected => 'The type of movement is not selected';
	String get noCellSelected => 'The cell from which you plan to move is not selected';
	String get noFromPackageSelected => 'The package from which you plan to move is not selected';
	String get noMovePackageSelected => 'The package you plan to move has not been selected';
	String get movingSelectCell => 'Select a cell or change the type of movement';
	String get movingSelectPackage => 'Choose a package or change the type of movement';
	String get cellDescriptInModule => 'Press the physical button (F1) on the terminal to immediately open the available actions on the cell, if any.';
	String get content => 'Content';
	String get problems => 'Problems';
	String get reserve => 'Reserve';
	String get invalidReserve => 'Invalid reserve';
	String get incorrectContentCell => 'Incorrect content';
	String get incorrectProductsCell => 'Incorrect products';
	String get lastAction => 'Last action';
	String get packageMovingWaitTitle => 'Waiting for acceptance';
	String get packageArchive => 'Packaging in the archive';
	String get openAnotherPackage => 'Open another package';
	String get confirmChangePackage => 'Confirm that you want to open another package';
	String get openAnotherOrder => 'Open another order';
	String get confirmChangeOrder => 'Confirm that you want to open another order';
	String get openAnotherCell => 'Open another cell';
	String get confirmChangeCell => 'Confirm that you want to open another cell';
	String get reloadPackageError => 'Could not get up-to-date packaging data. Try to scan again!';
	String get reloadCellError => 'Could not get up-to-date cell data. Try to scan again!';
	String get reloadLogisticsOrderError => 'Could not get up-to-date task data on the order. Try restarting!';
	String get confirmDisbandPackage => 'Do you really want to disband the packaging?';
	String get confirmZeroingCell => 'Do you really want to reset the contents of the cell?';
	String get dataIrrelevant => 'The data is out of date';
	String get whatDoesMean => 'What does it mean?';
	String get packageIrrelevantDescript => 'When updating the data, it was not possible to get new packaging data. Try to scan the package again!';
	String get cellIrrelevantDescript => 'When updating the data, it was not possible to get new cell data. Try to scan the cell again!';
	String get logisticsOrderIrrelevantDescript => 'When updating the data, it was not possible to get new data about the task on the order. Try again!';
	String get incorrectItemsCellDescript => 'The contents of the cell contain goods with a negative balance!';
	String get incorrectProductsCellDescript => 'Some products are in a cell, without SHK codes. You need to contact the administrators to fix it! Show problematic products?';
	String get packageLocation => 'Packaging location';
	String get packageLocationDescript => 'Indicates where the package is located in the system';
	String get cellLocation => 'Location of the cell';
	String get cellLocationDescript => 'Indicates where the cell is located in the system';
	String get packageScanNotify => 'Scan the packaging ID shown on the QR code';
	String get transitStorageOrderScanNotify => 'Scan the barcode of the order in transit storage';
	String get cellScanNotify => 'Scan the cell ID shown on the QR code';
	String get last30actionPackage => 'History of recent user actions on packaging. The last 30 of all actions are displayed!';
	String get last30actionCell => 'History of recent user actions on cell. The last 30 of all actions are displayed!';
	String get failedLogList => 'Failed to get a list of products from the action';
	String get updateDataQuest => 'Update the data?';
	String get changeDataPackage => 'Perhaps the packaging data has changed, do you want to update the data?';
	String get changeDataCell => 'Perhaps the cell data has changed, do you want to update the data?';
	String get cellWhichPlacePackage => 'The cell in which to place the package!';
	String get cellMoveProductTo => 'The cell to move the product to';
	String get whichTakeOutGoods => 'In which to take out the goods';
	String get whichAttachCurrentProcess => 'Which to attach to the current process';
	String get addToPackage => 'Add to the package';
	String get addToPackageDescript => 'Confirm to add the product to the package';
	String get correctionCell => 'Adjust the cell';
	String get correctionCellDescript => 'Confirm to correct the cell';
	String get moveToAnotherCell => 'Move to a cell';
	String get moveToAnotherCellDescript => 'Confirm to select the cell to move to';
	String get takeToPackageFromCell => 'Put it in the package';
	String get takeToPackageFromCellDescript => 'Confirm to put in the package';
	String get putCell => 'Add to the cell';
	String get putCellDescript => 'Confirm to add the product to the cell';
	String get confirmPack => 'Confirm the packaging';
	String get confirmPackDescript => 'Confirm that you have packed all the goods';
	String get tradingHallSaveToReport => 'Save to Report';
	String get tradingHallSaveToReportDescript => 'Confirm to save to today\'s showcase report';
	String get takeCell => 'Remove from the cell';
	String get takeCellDescript => 'Confirm to take the item out of the box';
	String get removeFromPackage => 'Remove from packaging';
	String get removeFromPackageDescript => 'Confirm to take the goods out of the package';
	String get noGoodsInPackage => 'There are no goods in the package';
	String get couldNotGetPlacementItems => 'Could not get information for the location of the goods';
	String get placeProducts => 'Place products';
	String get placeProductsDescript => 'Confirm to place the products in the cells';
	String get selectKeyboardNotify => 'You can select an item by clicking the corresponding number on the device';
	String get formatDate1 => 'dd MMM in HH:mm';
	String get formatDate2 => 'Time in HH:mm';
	String get acceptPackageConfirm => 'By accepting the package with all the contents, you take responsibility that you have checked the physical contents with the system!';
	String get acceptPackageBtn => 'Accept the packaging';
	String get openLinkedDocument => 'Open a linked document';
	String get acceptPackageHelp => 'You can immediately accept the package with all its contents. If the contents do not converge, perform the acceptance manually';
	String get failedToSelectScanMode => 'Failed to select the scan mode';
	String get failedGetPackage => 'Failed to get packaging information';
	String get packageIsNotProcessMovingCurrentWarehouse => 'The package is not in the process of being moved to the current warehouse';
	String get confirmCancellation => 'Confirm cancellation';
	String get confirmCancellationDescript => 'Do you really want to undo the last action in the current process? It will be impossible to cancel the actions!';
	String get barcode => 'Barcode';
	String get article => 'Article';
	String get size => 'Size';
	String get cell => 'Cell';
	String get matrix => 'Matrix';
	String get yes => 'Yes';
	String get no => 'No';
	String get successRollback => 'The scan was successfully canceled';
	String get errorRollback => 'Scan failed to cancel';
	String get couldGetInfoLastScan => 'Could not get information on the last scan';
	String get zeroingProduct => 'Zeroing the product';
	String get zeroingProductDescript => 'Do you want to clear all the scanning processes of this product?';
	String get positionSuccessReset => 'The position was successfully reset';
	String get positionErrorReset => 'The position could not be reset';
	String get pinch => 'Pinch';
	String get viewPhotoCurrentProduct => 'open a photo of the current product';
	String get cleanProcessConfirm => 'Cleaning up the process';
	String get cleanProcessConfirmDescript => 'Do you really want to clear the scan in the whole process? All current data will be permanently deleted!';
	String get couldExtractBarcodeFromMatrix => 'Couldn\'t extract barcode from matrix';
	String get couldFindBarcodeInDb => 'Couldn\'t find this barcode in the database';
	String get scanOfferedProduct => 'Scan the offered product';
	String get cellAutoClosed => 'The cell is automatically closed, all products are scanned';
	String get closeOpenCell => 'Close the open cell';
	String get requiredScanCodeCell => 'It is required to scan the QR code of the cell';
	String get cellIsNotAvailable => 'This cell is not available';
	String get cellWasOpen => 'The cell was open';
	String get cellWasClosed => 'The cell was closed';
	String get scanOfferedProductOrCurrentCellToClose => 'Scan the offered product or the current cell to close it!';
	String get collectAllRequiredItemsFromCell => 'Collect all the required items from this cell or scan the cell to close it!';
	String get scanSuggestedCell => 'Scan the suggested cell, follow the suggested route';
	String get cellOpenForCollection => 'Open for collection';
	String get addressCollectionDoneDescript => 'In the process of collecting, there are no positions left that you need to collect. The process is fully assembled or an error has occurred!';
	String get missingTheCell => 'Missing in the cell';
	String get requiredScanBarcodeProduct => 'It is required to scan the barcode of the product';
	String get positionSelectedPlaceCell => 'The position is selected, place it in the cell';
	String get placementDoneDescript => 'In this process, there are no products left for placement. All products have been placed or an error has occurred!';
	String get accommodationOptions => 'Accommodation options';
	String get placementNoRecommend => 'There are no recommendations';
	String get placementRecommendedCells => 'These cells contain this product. You can place the product in any of these cells, or in any other';
	String get placementNotRecommendedCells => 'For this product, there is no recommendation on placement. You can place the goods in any cell in the warehouse!';
	String get collectionDoneDescript => 'There are no positions left in the document that you need to scan. The document is fully scanned or an error has occurred!';
	String get skip => 'Skip';
	String get defaultDoneDescript => 'There are no positions left in the process that you need to scan. The process is fully scanned or an error has occurred!';
	String get confirmAbsentCollection => 'Confirm that you have not physically found the remainder in the cell. The cell will be corrected, the reserve will be reassigned!';
	String get absentNotConfirmedRequest => 'The result of the request could not be verified. Unavailable units have been removed from the collection, you can continue. After the collection is completed, you will see a notification.';
	String get processUnconfirmedProducts => 'There are unconfirmed products';
	String get processUnconfirmedProductsDescript => 'In the current process, there are positions that were excluded in the course of work. After restarting the process, positions may appear in the process!';
	String get existScannedContinue => 'You take responsibility by leaving the previous scan, in the current process';
	String get existScannedClearDb => 'This process will be completely cleared of all scanning processes in it';
	String get blockIsExistScannedProcess => 'There are scanned positions';
	String get blockIsExistScannedProcessDescript => 'There are scanned products in the current process. Continue working or clear the scanning process';
	String get itemAlreadyBeenScanned => 'This article/size has already been scanned';
	String get skipCollectingNotify => 'Remaining units . the goods were temporarily excluded from the current collection. Go on!';
	String get skipCollectingConfirm => 'The product will be temporarily removed from the collection route. The missed item will appear again after sending or reloading';
	String get search => 'Search';
	String get backToSearch => 'Back to Search';
	String get searchTitle => 'Search';
	String get searchResult => 'Search results';
	String get searchResultTaskDocumentDescript => 'Click on the found document to go to it or return to the search';
	String get searchTaskDocumentDescript => 'Enter the document number. If it is found, it will be displayed in the search results!';
	String get searchParameters => 'Search Parameters';
	String get searchParametersDescript => 'These parameters affect the search result';
	String get year => 'Year';
	String get enterFullDocumentNumberToSearch => 'Enter the full document number to search for';
	String get searchByCurrent => 'Search by current';
	String get searchByOther => 'Search by other';
	String get autoSubmissionOfParametersCanceled => 'Auto-submission of parameters canceled';
	String get selectedTypeIsNotAvailable => 'The selected type is not available';
	String get changeMovingType => 'When you change the type of movement, all other parameters will be cleared!';
	String get articleSizePrice => 'Article - size / price';
	String get noDocumentToCalculateResult => 'There are no documents to calculate the result';
	String get acceptPackageBeforeNotify => 'Make sure as much as possible that the contents of the package in the system converge with the physical!';
	String get from => 'From';
	String get status => 'Status';
	String get relatedDocument => 'Related document';
	String get orderStatus => 'Order status';
	String get operation => 'Operation';
	String get cancelled => 'Cancelled';
	String get active => 'Active';
	String get acceptance => 'Acceptance';
	String get moving => 'Moving';
	String get placement => 'Placement';
	String get collectionRoute => 'Collection route';
	String get actionsProcess => 'Actions on the process';
	String get confirmSelectCellAddressCollection => 'The current open cell will be closed before opening the selected one!';
	String get thereIsNoRoute => 'There is no route';
	String get currentLastCell => 'Current last cell';
	String get currentCell => 'Current cell';
	String get currentProposedCellCurrentCollection => 'Current or proposed cell, in the current collection';
	String get followingRoute => 'Following the route';
	String get followingRouteDescript => 'Click on the cell to change the route relative to the selected cell';
	String get dateTime => 'Date and time';
	String get notCorrectScanExtra => 'There are no scans that need to be canceled';
	String get correctScanExtraDescript => 'Cancel each scan separately by clicking on the item and confirming the action. The cancellation of the action must be accompanied by the return of the physical goods to the place!';
	String get extraScans => 'Extra scans';
	String get stateExtraScanTitle => 'Solve the problem';
	String get stateExtraScanCorrectionOptions1 => 'There are saved scanned products that are missing in the current process. To continue working, you need to delete unnecessary scans or clear the entire process!';
	String get stateExtraScanCorrectionOptions2 => 'There are many saved scanned items that are missing in the current process. To continue, you need to clear the process of all scans!';
	String get clearResume => 'Clear and continue';
	String get clearExtra => 'Clear the excess';
	String get unableToCheckUpdate => 'Unable to check the update';
	String get unableToCheckUpdateDescript => 'You have a consolidated warehouse. First select a warehouse or work area to check for updates!';
	String get baseNomenclature => 'The base of the nomenclature';
	String get baseNomenclatureEmpty => 'The nomenclature base is empty';
	String get baseNomenclatureEmptyDescript => 'Download required, for further work';
	String get selectLangDescript => 'Select your preferred language for working with the terminal. You can change it at any time!';
	String get unlock => 'Unlock';
	String get processUnlockDescript => 'Click to unlock the current process.';
	String get confirmProcessUnlock => 'When unblocked, the current scan will be cleared and exited!';
	String get aboutTheApp => 'About the app';
	String get disbanded => 'Disbanded';
	String get shipped => 'Shipped';
	String get combineCell => 'In cell';
	String get expectation => 'Expectation';
	String get applicationVersion => 'Application Version';
	String get apiVersion => 'API Version';
	String get theme => 'Theme';
	String get fontSize => 'Font Size';
	String get light => 'Light';
	String get dark => 'Dark';
	String get standard => 'Standard';
	String get large => 'Large';
	String get veryLarge => 'Very large';
	String get personalizationApplication => 'Personalization of the application';
	String get personalizationApplicationDescript => 'Adjust the parameters as you like!';
	String get userSettings => 'User Settings';
	String get userSettingsDescript => 'Change your account settings';
	String get unlockAllDocuments => 'Unlock all documents';
	String get unlockAllDocumentsDescript => 'Unlock all documents blocked from this terminal!';
	String get errorSavePersonalizingSetting => 'Your user settings could not be saved!';
	String get confirmUnlockAll => 'When unlocking all documents, the scanning database will be cleared!';
	String get repeatBackgroundTaskError => 'Repeat request execution. There will be an attempt to re-execute the request.';
	String get timeIsNotDefined => 'The time is not defined';
	String get startTyping => 'Start typing';
	String get listOfDocuments => 'List of documents';
	String get acceptancePackageIdScan => 'Scan the packing ID of the move. Or go to the list of documents!';
	String get availability => 'Availability';
	String get transitStorage => 'Transit storage';
	String get logistics => 'Logistics';
	String get send => 'Send';
	String get createMoveBasedThisDocument => 'Creating a move based on this document!';
	String get identificationOfMovement => 'Identification of movement';
	String get identificationOfMovementDescript => 'Scan the free packaging ID and secure it after creating the move!';
	String get failedToClearTheMoveProcess => 'Failed to clear the move process';
	String get selectKeyboardHelp => 'Press the button on the terminal corresponding to the serial number of the item!';
	String get selectTypeMove => 'Select the type of movement';
	String get warning => 'Warning';
	String get movingFormWarningPreparedOrSaveData => 'Some prepared or saved data is not suitable for creating a move';
	String get unknownStatus => 'Unknown status';
	String get logisticHistoryEmpty => 'The history of the movement is empty';
	String get logisticUndefinedStatus => 'Status unknown';
	String get sender => 'Sender';
	String get recipient => 'Recipient';
	String get packageProcessMoving => 'In the process of moving';
	String get shipFromWarehouse => 'Ship from warehouse';
	String get recentMovementMovementsPackageExternal => 'Recent movement movements';
	String get client => 'Client';
	String get packageLeaveWarehouse => 'The packaging left the warehouse and was closed';
	String get confirmPackageLeaveWarehouse => 'Confirm the shipment of the package from the current warehouse';
	String get externalMovingStatusUnknown => 'Unknown status';
	String get externalMovingStatusWait => 'Waiting for transportation';
	String get externalMovingStatusWay => 'Sent, on the way';
	String get externalMovingStatusArrived => 'Arrived at the receiving warehouse';
	String get externalMovingNoMovementsLocations => 'There are no movements movements';
	String get location => 'Location';
	String get leftLocation => 'Left location';
	String get availableActionsInCell => 'Available actions on a cell';
	String get availableActionsInPackage => 'Available actions on packaging';
	String get selectSearchOption => 'Select a search option';
	String get selectFilter => 'Select a filter';
	String get selectActionProcess => 'Select an action on the process';
	String get absent => 'Absent';
	String get changeAvatar => 'Change avatar';
	String get changeWarehouse => 'Change warehouse';
	String get cellBelongsAnotherWarehouse => 'The cell belongs to another warehouse';
	String get identiconInfo => 'One of the main functions of the avatar is to work as an identifier of your account';
	String get save => 'Save';
	String get selectAnother => 'Choose another one';
	String get avatar => 'Avatar';
	String get updateAvatarDescript => 'The current avatar will be set for your profile';
	String get ship => 'Ship';
	String get disband => 'Disband';
	String get moveToACell => 'Move to a cell';
	String get transitStorageOrderDisbandInfo => 'The order was canceled in the system. It is required to disband from storage to the return cell!';
	String get transitStorageOrderShipInfo => 'The order is active. Shipment of the order from transit storage is required';
	String get transitStorageConfirmShip => 'Confirm the intention to ship the order from transit storage';
	String get transitStorageConfirmDisband => 'Confirm the intention of disbanding the order from transit storage to packaging';
	String get orderIsExistsOperation => 'The operation on this order in transit storage has been completed. There are no further actions!';
	String get orderActionExpectedInTransitStorage => 'An action is expected to be performed on this package in transit storage!';
	String get combineInCellDescript => 'To which you want to move the package';
	String get hintOrderNumber => 'Order number';
	String get failedLoadOrderData => 'Failed to load order data';
	String get notAssigned => 'Not assigned';
	String get reasonRejection => 'Reason for rejection';
	String get logisticsConfirmCellTo => 'All confirmed items will be moved to this cell';
	String get rejectForAbsence => 'Reject for absence';
	String get nextPageError => 'The following page could not be loaded. Try again!';
	String get nextPageDone => 'All data has been uploaded';
	String get repeat => 'Repeat';
	String get logisticsOrderNotAssignedCell => 'Not assigned to a cell';
	String get products => 'Products';
	String get packages => 'Packages';
	String get taskDescription => 'Task description';
	String get logisticsAvailabilityTaskDescript => 'It is required to collect and confirm the transfer of things to the cell with the order, or reject the goods with the selected reason!';
	String get logisticsWithdrawTaskDescript => 'It is required to collect and confirm the transfer of items from the order box to the return box';
	String get logisticsPackTaskDescript => 'Scanning of the contents of each package is required to confirm readiness for shipment';
	String get logisticsSendTaskDescript => 'It is required to scan the package to confirm the shipment of the package by order';
	String get logisticsTabsDescript => 'Be careful when completing tasks. Your actions are not subject to cancellation!';
	String get tabs => 'Tabs';
	String get logisticsTabsAvailableTask => 'Available tasks';
	String get taskList => 'Task list';
	String get rejectWithReason => 'Reject with reason';
	String get skipProduct => 'Skip the product';
	String get findAnotherCell => 'Find another cell';
	String get reasonReject_1 => 'Missing button';
	String get reasonReject_2 => 'Lightning defect';
	String get reasonReject_3 => 'The presence of clues';
	String get reasonReject_4 => 'The presence of spots';
	String get reasonReject_5 => 'Seam defect';
	String get reasonReject_6 => 'The presence of pellets';
	String get reasonReject_7 => 'Strap defect';
	String get reasonReject_8 => 'Presence of scratches or creases';
	String get reasonReject_9 => 'Mounting defect';
	String get reasonReject_10 => 'The presence of an alarm hole';
	String get reasonReject_11 => 'The presence of marriage';
	String get reasonReject_12 => 'Not for sale in an online Store';
	String get reasonReject_13 => 'The product is missing';
	String get rejectSelectTitle => 'Select the reason for rejection';
	String get confirmRejection => 'Confirm rejection';
	String get rejectItemIsNotPossible => 'Position deviation is not possible';
	String get rejectItemIsNotPossibleMessage => 'The product, upon confirmation of availability, was not confirmed through the TSD';
	String get confirmItemIsNotPossible => 'Position confirmation is not possible';
	String get confirmItemIsNotPossibleMessage => 'The product, upon confirmation of availability, was not confirmed through the TSD';
	String get confirmPackageIsNotPossible => 'Package confirmation is not possible';
	String get confirmPackageIsNotPossibleMessage => 'Some or all of the goods in the package, upon confirmation of availability, were not confirmed through the TSD';
	String get notAvailableProductAccessList => 'There is no list of available products';
	String get scanThePackageSendDescript => 'Scan to confirm the sending of this package';
	String get scanThePackagePackDescript => 'Scan to confirm the packaging of this package';
	String get cellSearch => 'Cell Search';
	String get cellSearchDescript => 'Wait until the product location search is completed';
	String get logisticsConfirmLocationCell => 'This cell presumably contains the current product';
	String get logisticsConfirmNotLocationCell => 'Could not find the location of the goods in the cells in the warehouse';
	String get notFound => 'Not found';
	String get startSearch => 'Start the search';
	String get searchFrom3Char => 'Search from 3 characters';
	String get nothingWasFound => 'Nothing was found';
	String get invalidOrderPackageCodeScanned => 'Invalid order package code scanned';
	String get requiredFullScanned => 'It is required to scan all the contents in the process';
	String get logisticsOrderNotAccessConfirmWithoutCell => 'The content and confirmation are not available in this task!';
	String get logisticsConfirmItemNeedStepWait => 'Wait';
	String get logisticsConfirmItemNeedStepWaitAction => 'Waiting for action';
	String get logisticsConfirmItemNeedActionScanCell => 'Scan the cell';
	String get logisticsConfirmItemNeedActionScanItem => 'Scan the product';
	String get scanCellSpecifiedLocation => 'Scan the cell specified in the location';
	String get noScanningRequiredFollowSteps => 'No scanning is required. Follow the suggested steps';
	String get qtyUnits => '{{qty}} ед.';
	String get confirmHaveReturnedCell => 'You confirm that you have returned {{article}} / {{size}} to the cell {{cell}}';
	String get confirmHaveReturned => 'You confirm that you have physically removed {{article}} / {{size}} from the current process';
	String get confirmHaveReturnedError => 'Failed to cancel scanning of {{article}} / {{size}} in the current process';
	String get confirmHaveReturnedSuccess => 'Scanning {{article}} / {{size}} was canceled in the current process';
	String get hiUser => '{{emoji}} Hello, {{userName}}';
	String get terminalID => 'Terminal.ID: {{tid}}';
	String get versionTsd => 'Version TSD: {{name}} (api v. {{api}})';
	String get ofData => ' {{a}} of. {{b}} u.';
	String get sizeNotRepresentedOnTheScreen => 'Size \'{{size}}\' not represented on the screen';
	String get updateVersion => '{{emoji}} Version {{v}}';
	String get upload => 'Uploading {{value}} / {{total}} mb.';
	String get currentAppLastAvailable => 'The current version of the {{v}} app is the latest available version for you!';
	String get savePercent => 'Save {{percent}}%';
	String get lastUpdateDb => 'Last update: {{date}}';
	String get quantity => '{{emoji}} Quantity - {{qty}}';
	String get addingGoodsToCell => 'Adding products to a cell {{cellName}}';
	String get removalGoodsFromCell => 'Removal of goods from the cell {{cellName}}';
	String get adjustmentCell => 'Cell Adjustment {{cellName}}';
	String get movingItemsFromCell => 'Moving items from a cell {{cellName}}';
	String get moveGoodsTheCell => 'Move {{qty}} unit of goods to the cell {{cellTo}}';
	String get removalGoodsFromCellInPackage => 'Removal of goods from the cell {{cellName}} in the package';
	String get takeToCellInPackage => 'Take out {{qty}} units of goods from the cell {{cellFrom}} From to the package {{packageId}}';
	String get selectWarehouseTitle => 'Switch to {{name}}';
	String get selectWorkAreaTitle => 'Switch to the work area {{workareaName}} {{warehouseName}}';
	String get packageId => 'Package #{{id}}';
	String get orderWithGrid => 'Order #{{orderId}}';
	String get scanThePackage => 'Scan the package #{{packageId}}';
	String get confirmRejectionMessage => 'Confirm that you want to reject {{article}} / {{size}} because of - {{reason}}';
	String get inCell => 'Place the package in a cell {{cellName}}';
	String get dateCreate => 'Date of creation {{date}}';
	String get qtyPieces => '{{qty}} pc.';
	String get departureWarehouse => 'Where from {{warehouse}}';
	String get placePackageInCell => 'Place the package in a cell {{cell}}';
	String get addingGoodsToPackaging => 'Adding goods to the packaging {{packageId}}';
	String get removalGoodsFromPackaging => 'Removal of goods from packaging {{packageId}}';
	String get placementGoodsFromPackaging => 'Placement of goods from packaging {{packageId}}';
	String get scanCellName => 'Scan the cell {{cellName}}';
	String get scannedInvalidCell => 'It was required to scan the cell {{cellName}}';
	String get requiredMatrix => '{{article}} - {{size}}, need to scan the matrix';
	String get alreadyMatrix => '{{article}} - {{size}} have you already scanned this matrix';
	String get barcodeFailedScan => '{{barcode}}, failed to save scan!';
	String get barcodeScanned => '{{barcode}}, scanned!';
	String get failedSaveScan => '{{barcode}}, failed to save scan!';
	String get itemPlaceInCell => '{{article}} - {{size}}, place in {{cell}}\'';
	String get itemPlaceInCellFailed => '{{article}} - {{size}}, failed to post';
	String get productPlacement => 'Product placement';
	String get productChecking => 'Product checking';
	String get repeatLogin => 'Account confirmation completed\nPlease log in again';
	String get lichiId => 'Lichi ID';
	String get onRegistered => 'The account has been linked successfully\nPlease request login details from technical support';
	String get toRegistration => 'Register';
	String get alreadyRegistered => 'Account is already exists';
	String get inStock => 'In stock';
	String get notInStock => 'Not in stock';
	String get price => 'Price';
	String get color => 'Color';
	String get codeIsNotProduct => 'The code is not from the product';
	String get invalidProductCodeType => 'Invalid code type, scan the product code';
	String get isMissing => 'Is missing';
	String get sale => 'Sale';
	String get leftCells => 'Left - {{qty}} cls.';
	String get inventoryCell => 'Inventory of cell {{cellName}}';
	String get inventoryCellScanNotify => 'Scan the cell identifier depicted in the QR code for inventory purposes.';
	String get inventoryCellScanNotifyDubai => 'Scan the cell identifier depicted in the QR code for inventory purposes at Dubai warehouses.';
	String get inventoryCellCorrection => 'Calculate a cell';
	String get inventoryCellConfirm => 'Confirm the void';
	String get inventoryCellZeroing => 'Reset the cell';
	String get executor => 'Executor';
	String get undefined => 'Undefined';
	String get confirmation => 'Confirmation';
	String get counting => 'Counting';
	String get result => 'Result';
	String get zeroing => 'Zeroing';
	String get inventoryNotCarriedOut => 'The inventory has not been carried out';
	String get inventoryCarriedOut => 'Inventory completed';
	String get inventoryCarriedOutWithError => 'The inventory has been completed. There are discrepancies';
	String get productCheckingScanNotify => 'Scan the barcode of the product to check the product';
	String get incorrectPincode => 'Invalid PIN code\nthe PIN code must contain only numbers';
}

// Path: <root>
class _StringsRu implements Translations {
	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	_StringsRu.build({Map<String, Node>? overrides, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver})
		: assert(overrides == null, 'Set "translation_overrides: true" in order to enable this feature.'),
		  $meta = TranslationMetadata(
		    locale: AppLocale.ru,
		    overrides: overrides ?? {},
		    cardinalResolver: cardinalResolver,
		    ordinalResolver: ordinalResolver,
		  ) {
		$meta.setFlatMapFunction(_flatMapFunction);
	}

	/// Metadata for the translations of <ru>.
	@override final TranslationMetadata<AppLocale, Translations> $meta;

	/// Access flat map
	@override dynamic operator[](String key) => $meta.getTranslation(key);

	@override late final _StringsRu _root = this; // ignore: unused_field

	// Translations
	@override String get warehouse => 'Склад';
	@override String get notSelected => 'Не выбран';
	@override String get notifyScanQrWarehouse => 'Отсканируйте QR-код склада или рабочей зоны. Вы откроете модули, доступные для склада';
	@override String get userID => 'Пользователь.ID';
	@override String get notificationCompletionWork => 'Обязательно завершите работу, все запросы выполняются от вашего имени!';
	@override String get finishJob => 'Завершить работу';
	@override String get requestCannotExecuted => 'Запрос не может быть выполнен';
	@override String get settings => 'Настройки';
	@override String get noModulesAvailable => 'Нет доступных модулей';
	@override String get noModulesAvailableDescript => 'На этом складе нет доступных модулей для работы, смените склад или обратитесь в службу технической поддержки!';
	@override String get selectWarehouse => 'Выберите склад';
	@override String get selectWarehouseDescript => 'В вашем аккаунте отображается консолидированный склад. Просканируйте доступный склад, где вы будете работать!';
	@override String get exitUserTitle => 'Завершение работы';
	@override String get exitUserMessage => 'Вы действительно хотите завершить работу с терминалом?';
	@override String get invalidCodeType => 'Недопустимый тип кода';
	@override String get invalidCodeFormat => 'Неверный формат кода';
	@override String get invalidAuthCodeType => 'Неверный тип кода, отсканируйте свой личный qr-код';
	@override String get invalidOrderPackageCodeType => 'Неверный код с идентификатором заказа с пакетом';
	@override String get invalidWarehouseWorkareaCodeType => 'Неверный тип кода, отсканируйте код склада или зоны работы';
	@override String get failedDecryptQrCode => 'Не удалось расшифровать qr-code';
	@override String get doesNotCodeTask => 'Код несоответствует задаче';
	@override String get probablyCode => 'Вероятно код поврежден. Не удалось считать данные!';
	@override String get selectWarehouseMessage => 'Подтвердите, что вы действительно хотите переключиться на выбранный в данный момент склад';
	@override String get selectWorkAreaMessage => 'Подтвердите, что вы действительно хотите переключиться на выбранную зону';
	@override String get language => 'Русский';
	@override String get calculation => 'Расчет';
	@override String get clearingDb => 'Очистка базы данных';
	@override String get updatingProductDb => 'Обновление базы данных продуктов';
	@override String get thereErrors => 'Есть ошибки';
	@override String get errors => 'Ошибки';
	@override String get done => 'Готово';
	@override String get onPageNotifyTitle => 'Есть проблемы';
	@override String get onPageNotifyMessage => 'Некоторые шаги не удалось выполнить, пожалуйста, свяжитесь с разработчиком для получения разъяснений!';
	@override String get checkingTerminal => 'Проверка терминала';
	@override String get notificationVerifyTerminal => 'Не выключайте устройство во время проверки и обновления';
	@override String get continueL => 'Продолжить';
	@override String get noDataAvailable => 'Нет доступных данных';
	@override String get consolidatedResult => 'Консолидированный результат по всем активным документам в текущем модуле. Нажмите, чтобы обновить результат и документы';
	@override String get activeDocuments => 'Активные документы';
	@override String get completedDocuments => 'Завершенные документы';
	@override String get unableOpenDocument => 'Не удается открыть документ';
	@override String get updateListDocumentTitle => 'Обновление данных';
	@override String get updateListDocumentMessage => 'Обновить список документов?';
	@override String get statusUploadCompletedDocuments => 'Загрузка завершенных\nдокументов';
	@override String get statusUploadingActiveDocuments => 'Загрузка активных\nдокументов';
	@override String get listCompletedDocuments => 'Список выполненных документов';
	@override String get listActiveDocuments => 'Список активных документов';
	@override String get listPackageContents => 'Список содержимого упаковки';
	@override String get thereNoDocuments => 'Нет доступных документов';
	@override String get contentsEmpty => 'Содержимое пустое';
	@override String get documents => 'Документы';
	@override String get barcodeAndArticle => 'Штрихкод/артикул';
	@override String get title => 'Название';
	@override String get history => 'История';
	@override String get outputHistory => 'Вывод истории, текущего процесса, последовательного сканирования. Нажмите, чтобы просмотреть подробную информацию или выполнить действие!';
	@override String get storyEmpty => 'Эта история пуста';
	@override String get listEmpty => 'Список пуст';
	@override String get endList => 'Конец списка';
	@override String get sortList => 'Отсортируйте список или удалите выбранные фильтры';
	@override String get added => 'Добавленые';
	@override String get unScanned => 'Не отсканированные';
	@override String get scanned => 'Отсканированные';
	@override String get all => 'Все';
	@override String get selectActionSelectedPosition => 'Выберите действие в выбранной позиции!';
	@override String get resetToZero => 'Обнулить';
	@override String get mistake => 'Ошибка';
	@override String get resetPositionWarning => 'Позиция сброшена, но позиция в интерфейсе не может быть обновлена. Перезагрузите документ!';
	@override String get list => 'Список';
	@override String get emptyList => 'Пустой список';
	@override String get motionCreationFormValidationCreateMoving => 'Обязательно проверьте данные формы, перед созданием перемещения!';
	@override String get createMove => 'Создать перемещение';
	@override String get fromDocumentCreateMove => 'Из этого документа берутся товары для создания их перемещения на другой склад';
	@override String get uploadingDataMove => 'Загрузка данных\nдля перемещения';
	@override String get goodsBeingMoved => 'Перемещаемые товары';
	@override String get simplifiedRelocation => 'Упрощенное перемещение';
	@override String get transferAutoAccepted => 'Это перемещение будет автоматически принято на складе поступления!';
	@override String get standardMovement => 'Стандартное перемещение';
	@override String get transferNeedAccepted => 'Это перемещение необходимо будет принять на складе-получателе!';
	@override String get warehouseRecipient => 'Склад получатель';
	@override String get departureWarehouseAuto => 'Склад отправления устанавливается автоматически. \nВыберите склад поступления!';
	@override String get choose => 'Выбрать';
	@override String get specify => 'Укажите';
	@override String get attach => 'Прикрепите';
	@override String get notAttach => 'Не прикреплена';
	@override String get scanProducts => 'Сканировать товары';
	@override String get selectProducts => 'Выбрать товары';
	@override String get notDataCreateMove => 'Не удалось получить данные, необходимые для перемещения!';
	@override String get notSortItemsErrorMove => 'Не удалось отсортировать товары. Создание перемещения невозможно!';
	@override String get clearingCurrentProcess => 'Очистка текущего процесса';
	@override String get confirmClearCurrentFormMove => 'Подтвердите, что вы хотите очистить текущую форму перемещения!';
	@override String get formTransferCleared => 'Форма перемещения была очищена';
	@override String get failedClearMove => 'Не удалось очистить перемещение';
	@override String get selectionGoodsMove => 'Выбор товаров для перемещения';
	@override String get returnCreationMove => 'Вернуться к созданию перемещения';
	@override String get backContinueCreatingMove => 'Нажмите, чтобы вернуться и продолжить создание перемещения';
	@override String get receiptWarehouse => 'Склад поступления';
	@override String get listProductCreateTransfer => 'Список товаров для создания перемещения на другой склад!';
	@override String get noReceivingWarehouseSelected => 'Не выбран склад получатель';
	@override String get noGoodsCreateMove => 'Отсутствуют товары для создания перемещения';
	@override String get errorFormingListProducts => 'Ошибка в формировании списка товаров';
	@override String get creatingMove => 'Создание перемещения';
	@override String get updateDb => 'Обновить базу данных';
	@override String get checkingDb => 'Проверка базы данных';
	@override String get gettingDb => 'Получение данных';
	@override String get noDataUploadedDb => 'Данные не загружены';
	@override String get getErrorAllProducts => 'Не удалось получить данные по всем продуктам';
	@override String get dataUpdateDb => 'Данные обновлены';
	@override String get updatedDb => 'Данные обновлены, база данных содержит все доступные продукты';
	@override String get noDataRecordedDb => 'Данные не записаны';
	@override String get writtenErrorDb => 'Данные не удалось записать в локальную базу данных.';
	@override String get database => 'База данных';
	@override String get removal => 'Удаление';
	@override String get clearDbConfirm => 'Вы действительно хотите очистить всю локальную базу данных?';
	@override String get localDbCleaned => 'Локальная база данных была очищена и восстановлена';
	@override String get failedClearDb => 'Не удалось очистить базу данных';
	@override String get restoreDb => 'Восстановить базу';
	@override String get checkingUpdate => 'Проверка обновления';
	@override String get languageLabel => 'Язык';
	@override String get failedLoadTradingFloorData => 'Не удалось загрузить данные торгового зала';
	@override String get failedLoadLogisticsTabData => 'Не удалось загрузить данные разделов логистики';
	@override String get uncertainGoods => 'Неопределенные товары';
	@override String get confirmOrPostTradingHall => 'Подтвердите или разместите в торговой зале товары, которые представлены в этом списке';
	@override String get calcTradingHall => 'Расчет процента заполнения торгового зала на основе данных сканирования по остаткам на текущий день!';
	@override String get scanHall => 'Сканировать зал';
	@override String get dataNotUpdated => 'Данные не обновлены';
	@override String get errorUpdatingDataTradingHall => 'Произошла ошибка при обновлении данных, данные не актуальны. Попробуйте обновить вручную!';
	@override String get scanAllEachProductsTradingHall => 'Отсканируйте все товары на витрине, по одной единице каждого размерного ряда, чтобы проверить торговый зал.';
	@override String get uploadingActiveDocuments => 'Загрузка активных\nдокументов';
	@override String get uploadingDataTabsLogistics => 'Загрузка данных\n разделов';
	@override String get uploadingLogisticsListAvailability => 'Загрузка списка заказов\n с товарами на подтверждение';
	@override String get uploadingLogisticsListWithdraw => 'Загрузка списка заказов\n с товарами на снятие с резерва';
	@override String get uploadingLogisticsListPack => 'Загрузка списка заказов\n на упаковку';
	@override String get uploadingLogisticsListSend => 'Загрузка списка заказов\n с упаковками на отправку';
	@override String get uploadingOrderData => 'Загрузка данных\n заказа';
	@override String get tradingHall => 'Торговый зал';
	@override String get invalidUserLogin => 'Неверный логин пользователя';
	@override String get userLogin => 'Логин пользователя';
	@override String get invalidPassword => 'Неверный пароль';
	@override String get password => 'Пароль';
	@override String get scanPersonalCodeAuth => 'Отсканируйте свой персональный код\n для доступа к терминалу!';
	@override String get invalidData => 'Неверные данные';
	@override String get authErrorTerminal => 'Ошибка авторизации в терминале';
	@override String get dataLoadedToCreateMove => 'Данные загружаются для создания перемещения';
	@override String get couldNotGetDocuments => 'Не удалось получить эти документы!';
	@override String get uploadingControlData => 'Загрузка контрольных\nданных';
	@override String get byCurrentWarehouse => 'по текущему складу';
	@override String get noControl => 'Нет никакого контроля';
	@override String get moveItemsAccepted => 'Переместите товары, которые были приняты, но не перемещены на другой склад!';
	@override String get control => 'Контроль';
	@override String get checkingForUpdates => 'Проверка наличия обновлений';
	@override String get problemUpdating => 'Если у вас возникли проблемы с обновлением, напишите в службу технической поддержки';
	@override String get updateDownloadFromServer => 'Обновление загружается с сервера, после чего вам будет предложено его установить';
	@override String get installUpdateOnlyAndroid => 'Установка обновления в настоящее время возможна только для Android';
	@override String get anErrorOccurredDownloadingInstall => 'При загрузке и установке произошла ошибка';
	@override String get updateCenterApp => 'Центр обновления\nприложения';
	@override String get reboot => 'Перезагрузить';
	@override String get clearProcess => 'Очистить процесс';
	@override String get setAreaTitle => 'Вы не можете изменить зону';
	@override String get setAreaMessage => 'После начала сканирования, когда документ не пуст, вы не можете изменить область сканирования. Вы можете изменить его после отправки или очистки документа!';
	@override String get scanSectionSuccessInstalled => 'Раздел сканирования был успешно установлен';
	@override String get failedSetScanArea => 'Не удалось установить область сканирования';
	@override String get productDbIsEmpty => 'База данных товаров\nпуста';
	@override String get stateEmptyProcess => 'Работать с этим процессом\nневозможна';
	@override String get stateBlocked => 'Работа с процессом\nне допускается';
	@override String get stateExistScanned => 'Имеются данные\nсканирования';
	@override String get stateExtraScanned => 'Лишние сканирования\nв процессе';
	@override String get stateStart => 'Выполните условие\nперед началом работы';
	@override String get followSuggestedConditions => 'Следуйте предложенным условиям, чтобы начать';
	@override String get zone => 'Зона';
	@override String get package => 'Упаковка';
	@override String get setZone => 'Установите зону';
	@override String get setPackage => 'Прикрепите упаковку';
	@override String get clickChangeArea => 'Нажмите, чтобы изменить рабочую область!';
	@override String get clickChangePackage => 'Нажмите, чтобы прикрепить другую упаковку!';
	@override String get scanError => 'Ошибка сканирования';
	@override String get awaitLastScan => 'Предыдущее сканирование еще не было обработано до начала текущего.';
	@override String get invalidUnreadableCode => 'Недопустимый/нечитаемый код. Попробуйте еще раз или введите вручную!';
	@override String get notBarcodeInDb => 'Не удалось найти этот штрих-код в базе данных';
	@override String get simplifiedManualInput => 'Упрощенный ручной ввод';
	@override String get productIsNotList => 'Товара нет в списке';
	@override String get positionIsNotScanList => 'Этой позиции нет в списке сканирования, вы можете добавить ее. Подтвердите!';
	@override String get positionMissingCurrentProcess => 'Эта позиция отсутствует в текущем процессе';
	@override String get positionAlreadyBeenScanned => 'Эта позиция уже была отсканирована';
	@override String get conditionsNotScan => 'Условия не выполнены перед началом сканирования';
	@override String get emptyProcess => 'Пустой процесс';
	@override String get youHaveNotScanned => 'Вы ничего не отсканировали, пустой процесс не может быть отправлен!';
	@override String get cancelingScan => 'Отмена сканирования';
	@override String get confirmCancelAction => 'Подтвердите, что вы хотите отменить это действие';
	@override String get actionCanceled => 'Действие отменено';
	@override String get couldNotCancelAction => 'Не удалось отменить действие';
	@override String get cancelingLastScan => 'Отмена последнего сканирования';
	@override String get confirmCancelLastScan => 'Подтвердите, что вы хотите отменить последнее сканирование';
	@override String get lastActionCanceled => 'Последнее действие отменено';
	@override String get couldUndoLastAction => 'Не удалось отменить последнее действие';
	@override String get zeroingPosition => 'Обнуление позиции';
	@override String get confirmResetPosition => 'Подтвердите, что вы хотите сбросить эту позицию';
	@override String get positionResetToZero => 'Обнуление позиции';
	@override String get failedResetPosition => 'Не удалось обнулить позицию';
	@override String get accessInNotProvided => 'Доступ не предоставляется';
	@override String get blockingDataIsUnknown => 'Блокирующие данные неизвестны';
	@override String get terminals => 'Терминалы';
	@override String get blockedDescript_one => 'Проверить блокировку этого процесса не удалось. Повторите попытку позже или обратитесь в службу поддержки!';
	@override String get blockedDescript_two => 'Заблокировать этот процесс для вас не представлялось возможным. Повторите попытку позже или обратитесь в службу поддержки!';
	@override String get blockedDescript_three => 'Этот процесс заблокирован другим пользователем. Закройте процесс или найдите терминал и разблокируйте!';
	@override String get updateDbScan => 'Обновите базу данных';
	@override String get updateDbScanDescript_1 => 'Обновите базу данных продуктов на терминале, перейдите к ';
	@override String get updateDbScanDescript_2 => 'настройки - база данных - обновить. ';
	@override String get updateDbScanDescript_3 => 'После этого процесс сканирования станет доступен!';
	@override String get emptyProcessDescript_1 => 'Для этого сканирования требуются ';
	@override String get emptyProcessDescript_2 => 'данные';
	@override String get emptyProcessDescript_3 => ' который не удалось загрузить. Попробуйте еще раз или обратитесь в службу технической поддержки!';
	@override String get confirmAndStart => 'Подтвердите и запустите';
	@override String get beforeStartActionsCorrect => 'Прежде чем начать, убедитесь, что ваши действия правильны. Вы несете полную ответственность за свои действия.';
	@override String get selectAction => 'Выберите действие';
	@override String get startConfirm => 'Начать подтверждение';
	@override String get listCurrentProcess => 'Список текущего процесса';
	@override String get outputContentsCurrentScanningProcess => 'Вывод содержимого текущего процесса сканирования. Нажмите на позицию, чтобы выбрать действие!';
	@override String get scanHistory => 'История сканирования';
	@override String get cancelAction => 'Отменить действие';
	@override String get cancelingLastActionHistory => 'Отмена последнего действия в истории. Нажмите для отката или кнопку \'esc\' на терминале!';
	@override String get mainAction => 'Основное действие. Нажмите кнопку (ent)';
	@override String get loadingDataProcess => 'Загрузка данных\nпроцесса';
	@override String get failedConvertItemsCreateMove => 'Не удалось преобразовать элементы для создания перемещения!';
	@override String get acceptMove => 'Принять перемещение';
	@override String get acceptOrder => 'Принять заказ';
	@override String get clickAcceptScannedItems => 'Подтвердите, чтобы принять отсканированные элементы';
	@override String get confirmAction => 'Подтвердите действие!';
	@override String get confirmAcceptCurrentScannedItems => 'Вы действительно хотите принять текущие отсканированные элементы?';
	@override String get sendStatement => 'Отправить в ведомость';
	@override String get assembleToOrder => 'Собрать в заказ';
	@override String get clickAssembleToShipmentOnMove => 'Подтвердите, чтобы отправить данные в заказ на перемещение';
	@override String get clickAssembleToShipmentOnOrder => 'Подтвердите, чтобы отправить данные в заказ клиента';
	@override String get clickSendInventoryData => 'Подтвердите, чтобы отправить в ведомость инвентаризации';
	@override String get confirmSendCurrentScannedItemsInventory => 'Вы действительно хотите отправить текущие отсканированные товары в ведомость инвентаризации?';
	@override String get saveReport => 'Сохранить в отчет';
	@override String get clickSendScanDataReport => 'Подтвердите, чтобы отправить данные сканирования в отчет';
	@override String get confirmYourIntention => 'Подтвердите свое намерение';
	@override String get confirmSendCurrentScannedItemsTradingHall => 'Вы действительно хотите отправить текущие отсканированные товары в отчет торгового зала';
	@override String get manual => 'вручную';
	@override String get scanning => 'отсканировано';
	@override String get unknown => 'неизвестный';
	@override String get reauthorizationRequired => 'Требуется повторная авторизация';
	@override String get terminalNotUsed => 'Терминал не использовался более 30 минут. \nпотребуется повторная авторизация!';
	@override String get groupAcceptanceTitle => 'Приемка товара';
	@override String get groupAcceptanceDescript => 'Выберите подходящий тип приемки';
	@override String get groupWarehouseMovementsTitle => 'Перемещения на складе';
	@override String get groupWarehouseMovementsDescript => 'Создать или принять перемещение между складами';
	@override String get groupShipmentTitle => 'Сбор заказов';
	@override String get groupShipmentTitleDescript => 'Работа с заказами доступных типов';
	@override String get moduleInventoryName => 'Инвентаризация';
	@override String get moduleInventoryCellName => 'Инвентаризация ячеек';
	@override String get moduleAcceptanceOnAdmissionOCName => 'По заказу поставщика';
	@override String get moduleShipmentOnMoveName => 'На перемещение';
	@override String get moduleShipmentOnOrderName => 'Поставщиков';
	@override String get moduleAcceptanceOnAdmissionOCFullName => 'Приемка поступления по заказу поставщика';
	@override String get moduleAcceptanceOnAdmissionWOCName => 'По накладной';
	@override String get moduleAcceptanceOnAdmissionWOCFullName => 'Приемка поступления по накладной';
	@override String get moduleCreateMove => 'Создать перемещение';
	@override String get moduleTradingHall => 'Торговый зал';
	@override String get moduleAcceptanceOnMoveName => 'Принять перемещение';
	@override String get moduleControlMovingName => 'Контроль перемещения';
	@override String get moduleControlPlacementName => 'Контроль размещения';
	@override String get moduleAcceptanceOnMoveFullName => 'Приемка перемещения на склад';
	@override String get moduleControl => 'Контроль';
	@override String get serverResponseParameterMissing => 'Параметры ответа сервера отсутствуют';
	@override String get invalidResponseFromServer => 'Неверный ответ от сервера!';
	@override String get requestHasNotBeenSent => 'Запрос не был отправлен. Ошибка запроса!';
	@override String get notification => 'Уведомление';
	@override String get updateCellNotify => 'Данные ячейки будут обновлены, после выполнения последних действий!';
	@override String get requestError => 'Ошибка запроса';
	@override String get sessionIsNotActive => 'Сеанс не активен';
	@override String get sessionRejected => 'Сеанс был отклонен сервером потребуется повторная авторизация!';
	@override String get iSee => 'Понятно';
	@override String get confirm => 'Подтвердить';
	@override String get cancel => 'Закрыть';
	@override String get updateAvailable => 'Доступно обновление приложения';
	@override String get absentDescriptUpdate => 'Описание обновления отсутствует';
	@override String get updateNewDescript => 'Что нового в этой версии?';
	@override String get goToUpdate => 'Перейти к обновлению';
	@override String get later => 'Позже';
	@override String get barcodeAbbreviated => 'Шк.';
	@override String get articleAbbreviated => 'Арт.';
	@override String get inputType => 'Тип ввода';
	@override String get closeClickEmptySpace => 'Чтобы закрыть, нажмите на пустое место';
	@override String get simplifiedMode_1 => 'Упрощенный режим';
	@override String get simplifiedMode_2 => ', достаточно ввести последние 5 цифр штрих-кода';
	@override String get manualInput => 'Ручной ввод';
	@override String get close => 'Закрыть';
	@override String get releaseButtonTopToClose => 'Отпустите ▲ чтобы закрыть';
	@override String get enterPinCodePhysicalButtons => 'Введите pin-код с помощью физических кнопок терминала';
	@override String get clear => 'Очистить';
	@override String get specifyArea => 'Укажите область сканирования, в которой вы собираетесь выполнять сканирование';
	@override String get zoneIsNotSpecify => 'Зона не указана';
	@override String get scanningArea => 'Область сканирования';
	@override String get failedProductData => 'Не удалось получить информацию о товаре.';
	@override String get scanProductShowTheScreen => 'Отсканируйте товар, отображаемый на экране';
	@override String get scannedWrongCode => 'Вы отсканировали неправильный код';
	@override String get scanCurrentProductInfo => 'Отсканируйте показанные размеры для подтверждения. Переключайтесь между товарами с помощью стрелок, стрелка вниз - увеличьте фотографию!';
	@override String get releaseTheButtonClose => 'Отпустите кнопку, чтобы свернуть';
	@override String get couldNotFindItemInCurrentProcess => 'Не удалось найти данный товар в текущем процессе';
	@override String get maxItemScanned => 'Максимальное кол-во товара отсканировано';
	@override String get startScanning => 'Начните сканирование';
	@override String get continueScanning => 'Продолжить сканирование';
	@override String get infoItemLastProduct => 'Здесь вы увидите информацию о последнем отсканированном продукте!';
	@override String get infoPlacementScanned => 'Отсканируйте товар, и вам будет показаны варианты расположения для размещения!';
	@override String get moduleCell => 'Ячейка';
	@override String get modulePackage => 'Упаковка';
	@override String get orderNumber => 'Номер заказа и упаковки';
	@override String get packagingID => 'Упаковочный ИД';
	@override String get modulePlacement => 'Размещение';
	@override String get moduleSettings => 'Настройки';
	@override String get forConfirmation => 'На подтверждение';
	@override String get onPackaging => 'На упаковку';
	@override String get withdrawalFromTheReserve => 'Снятие с резерва';
	@override String get toSend => 'На отправку';
	@override String get moduleCreateImplementation => 'Создать реализацию';
	@override String get createImplementation => 'Создать реализацию';
	@override String get attachedProducts => 'Прикрепленные товары';
	@override String get requisites => 'Реквизиты';
	@override String get motionCreationFormValidationCreateImplementation => 'Перед созданием реализации, убедитесь, что все выбрано правильно. Вы несете личную ответственность за неправильную реализацию!';
	@override String get errorDataAuth => 'Ошибка формирования данных полученных при авторизации';
	@override String get inProgressUserSettingDevice => 'Пользовательская настройка\nустройства';
	@override String get inProgressUserSettingDeviceDescript => 'Пожалуйста не отключайте устройство, во избежании краха приложения!';
	@override String get checkClearDbError => 'Не удалось преобразовать базу данных. Попробуйте повторить в настройках или обратитесь в техподдержку!';
	@override String get checkUpdateBaseError => 'При обновлении базы номенклатуры произошла ошибка. Попробуйте повторить в настройках или обратитесь в техподдержку!';
	@override String get unableRequestAnUpdateFromServer => 'Не удается запросить обновление с сервера';
	@override String get requestTimeOut => 'Превышено время ожидания. Отсутствует интернет соединение или проблемы на стороне сервере!';
	@override String get more => 'Подробнее';
	@override String get errorDetails => 'Подробности ошибки';
	@override String get isNoDetailedError => 'Отсутствует подробное описание ошибки';
	@override String get waitingTimeExceed => 'Превышено время ожидания. Загрузка отменена!';
	@override String get updateAndInstall => 'Обновить и установить';
	@override String get updateAndSave => 'Обновить и сохранить';
	@override String get uploadWait => 'Загружаем';
	@override String get checkingForAppUpdates => 'Проверка обновления приложения';
	@override String get checkingForAppUpdatesDescript => 'Ищем последние доступные обновления, подходящее вам по параметрам';
	@override String get checkingForBaseProductUpdates => 'Проверка базы данных';
	@override String get checkingForBaseProductUpdatesDescript => 'Загружаем информацию по текущей базе товаров на устройстве';
	@override String get noUpdateAvailable => 'Нет доступных обновлении';
	@override String get requirementsSelectType => 'Требования выбранного типа';
	@override String get requirementsSelectTypeDescript => 'Для выбранного типа перемещения, требуются доп. данные';
	@override String get codeIsNotePackage => 'Код не от упаковки';
	@override String get codeIsNoteCell => 'Код не от ячейки';
	@override String get codeIsNoteWarehouse => 'Код не от склада';
	@override String get codeIsNoteWorkArea => 'Код не от зоны работ';
	@override String get scanPackage => 'Отсканируйте упаковку';
	@override String get scanCell => 'Отсканируйте ячейку';
	@override String get selectPackageMovingTypeFromCell => 'Выберите ячейку, из которой хотите переместить товар';
	@override String get selectPackageMovingTypeFromPackage => 'Выберите упаковку из которой хотите переместить товары';
	@override String get selectPackageMovingTypePackage => 'Выберите упаковку которую собираетесь переместить';
	@override String get cellLocatedAnotherWarehouse => 'Ячейка находится на другом складе';
	@override String get autoSetPackageMovingError => 'Автоподставление упаковки отменено';
	@override String get autoSetCellMovingError => 'Автоподставление ячейки отменено';
	@override String get packageIsNotConditionMoving => 'Упаковка не подходит для создания перемещения';
	@override String get packageContentEmptyMoving => 'Содержимое упаковки пустое или его не удалось получить!';
	@override String get packageItemsEmpty => 'Содержимое упаковки пустое или его не удалось получить';
	@override String get invalidCellData => 'Неверные данные ячейки в коде. Возможно код устарел!';
	@override String get invalidPackageData => 'Неверные данные упаковки в коде. Возможно код устарел!';
	@override String get invalidWorkAreaData => 'Неверные данные зоны работ в коде. Возможно код устарел!';
	@override String get invalidWarehouseData => 'Неверные данные склада в коде. Возможно код устарел!';
	@override String get selectTypeMovementTitle => 'Выбор типа перемещения';
	@override String get selectTypeMovementDescript => 'Выберите тип перемещения из доступных. При изменении, остальные поля формы очищаются!';
	@override String get type => 'Тип';
	@override String get typeMovementNotSelected => 'Не выбран тип перемещения';
	@override String get noCellSelected => 'Не выбрана ячейка из которой планируется перемещение';
	@override String get noFromPackageSelected => 'Не выбрана упаковка из которой планируется перемещение';
	@override String get noMovePackageSelected => 'Не выбрана упаковка, которую планируете переместить';
	@override String get movingSelectCell => 'Выберите ячейку или смените тип перемещения';
	@override String get movingSelectPackage => 'Выберите упаковку или смените тип перемещения';
	@override String get cellDescriptInModule => 'Нажмите физическую кнопку (F1) на терминале, чтобы сразу открыть доступные действия над ячейкой, если они есть.';
	@override String get content => 'Содержимое';
	@override String get problems => 'Проблемы';
	@override String get reserve => 'Резерв';
	@override String get invalidReserve => 'Проблемы с резервом';
	@override String get incorrectContentCell => 'Некорректное содержимое';
	@override String get incorrectProductsCell => 'Некорректные товары';
	@override String get lastAction => 'Последнее действие';
	@override String get packageMovingWaitTitle => 'Ожидание приемки';
	@override String get packageArchive => 'Упаковка в архиве';
	@override String get openAnotherPackage => 'Открыть другую упаковку';
	@override String get confirmChangePackage => 'Подтвердите что вы хотите открыть другую упаковку';
	@override String get openAnotherOrder => 'Открыть другой заказ';
	@override String get confirmChangeOrder => 'Подтвердите что вы хотите открыть другой заказ';
	@override String get openAnotherCell => 'Открыть другую ячейку';
	@override String get confirmChangeCell => 'Подтвердите что вы хотите открыть другую ячейку';
	@override String get reloadPackageError => 'Не удалось получить актуальные данные упаковки. Попробуйте отсканировать повторно!';
	@override String get reloadCellError => 'Не удалось получить актуальные данные ячейки. Попробуйте отсканировать повторно!';
	@override String get reloadLogisticsOrderError => 'Не удалось получить актуальные данные задачи по заказу. Попробуйте перезагрузить!';
	@override String get confirmDisbandPackage => 'Вы действительно хотите расформировать упаковку?';
	@override String get confirmZeroingCell => 'Вы действительно хотите обнулить содержимое ячейки?';
	@override String get dataIrrelevant => 'Данные неактуальные';
	@override String get whatDoesMean => 'Что это значит?';
	@override String get packageIrrelevantDescript => 'При обновлении данных, не удалось получить новые данные об упаковке. Попробуйте отсканировать упаковку заного!';
	@override String get cellIrrelevantDescript => 'При обновлении данных, не удалось получить новые данные о ячейке. Попробуйте отсканировать ячейку заного!';
	@override String get logisticsOrderIrrelevantDescript => 'При обновлении данных, не удалось получить новые данные о задаче по заказу. Попробуйте повторить!';
	@override String get incorrectItemsCellDescript => 'Содержимое ячейки содержит товары с отрицательным остатком!';
	@override String get incorrectProductsCellDescript => 'Некоторые товары в ячейке, без шк кодов. Требуется обратиться к администраторам, для исправления! Показать проблемные товары?';
	@override String get packageLocation => 'Местоположение упаковки';
	@override String get packageLocationDescript => 'Указывает где находится упаковка в системе';
	@override String get cellLocation => 'Местоположение ячейки';
	@override String get cellLocationDescript => 'Указывает где находится ячейка в системе';
	@override String get packageScanNotify => 'Отсканируйте упаковочный идентификатор изображенный на QR - коде';
	@override String get transitStorageOrderScanNotify => 'Отсканируйте штрих-код заказа в транзитном хранении';
	@override String get cellScanNotify => 'Отсканируйте идентификатор ячейки изображенный на QR - коде';
	@override String get last30actionPackage => 'История последних действий пользователей над упаковкой. Выводятся последние 30 всех действий!';
	@override String get last30actionCell => 'История последних действий пользователей над ячейкой. Выводятся последние 30 всех действий!';
	@override String get failedLogList => 'Неудалось получить список товаров из действия';
	@override String get updateDataQuest => 'Обновить данные?';
	@override String get changeDataPackage => 'Возможно данные упаковки изменились, хотите обновить данные?';
	@override String get changeDataCell => 'Возможно данные ячейки изменились, хотите обновить данные?';
	@override String get cellWhichPlacePackage => 'Ячейку, в которую расположить упаковку!';
	@override String get cellMoveProductTo => 'Ячейку, в которую переместить товар';
	@override String get whichTakeOutGoods => 'В которую вынести товар';
	@override String get whichAttachCurrentProcess => 'Которую прикрепить к текущему процессу';
	@override String get addToPackage => 'Внести в упаковку';
	@override String get addToPackageDescript => 'Подтвердите, чтобы внести товар в упаковку';
	@override String get correctionCell => 'Откорректировать ячейку';
	@override String get correctionCellDescript => 'Подтвердите, чтобы откорректировать ячейку';
	@override String get moveToAnotherCell => 'Переместить в ячейку';
	@override String get moveToAnotherCellDescript => 'Подтвердите, чтобы выбрать ячейку, куда перемещать';
	@override String get takeToPackageFromCell => 'Вынести в упаковку';
	@override String get takeToPackageFromCellDescript => 'Подтвердите, чтобы вынести в упаковку';
	@override String get putCell => 'Внести в ячейку';
	@override String get putCellDescript => 'Подтвердите, чтобы внести товар в ячейку';
	@override String get confirmPack => 'Подтвердить упаковку';
	@override String get confirmPackDescript => 'Подтвердите, что собрали все товары в упаковку';
	@override String get tradingHallSaveToReport => 'Сохранить в отчет';
	@override String get tradingHallSaveToReportDescript => 'Подтвердите, чтобы сохранить в сегодняшний отчет по витрине';
	@override String get takeCell => 'Вынести из ячейки';
	@override String get takeCellDescript => 'Подтвердите, чтобы вынести товар из ячейки';
	@override String get removeFromPackage => 'Вынести из упаковки';
	@override String get removeFromPackageDescript => 'Подтвердите, чтобы вынести товары из упаковки';
	@override String get noGoodsInPackage => 'В упаковке отсутствуют товары';
	@override String get couldNotGetPlacementItems => 'Не удалось получить информацию для расположения товаров';
	@override String get placeProducts => 'Разместить товары';
	@override String get placeProductsDescript => 'Подтвердите, чтобы разместить товары по ячейкам';
	@override String get selectKeyboardNotify => 'Выбрать пункт можно, нажав соответствующую цирфру на устройстве';
	@override String get formatDate1 => 'dd MMM в HH:mm';
	@override String get formatDate2 => 'Время в HH:mm';
	@override String get acceptPackageConfirm => 'Принимая упаковку со всем содержимым, вы берете ответственность что проверили физическое содержимое с системным!';
	@override String get acceptPackageBtn => 'Принять упаковку';
	@override String get openLinkedDocument => 'Открыть связанный документ';
	@override String get acceptPackageHelp => 'Вы можете сразу принять упаковку со всем ее содержимым. Если содержимое не сходится, осуществите приемку вручную';
	@override String get failedToSelectScanMode => 'Не удалось подобрать режим сканирования';
	@override String get failedGetPackage => 'Не удалось получить информацию об упаковке';
	@override String get packageIsNotProcessMovingCurrentWarehouse => 'Упаковка не находится в процессе перемещения на текущий склад';
	@override String get confirmCancellation => 'Подтвердите отмену';
	@override String get confirmCancellationDescript => 'Вы действительно хотите отменить последнее действие в текущем процессе? Отменить действия, будет невозможно!';
	@override String get barcode => 'Штрихкод';
	@override String get article => 'Артикул';
	@override String get size => 'Размер';
	@override String get cell => 'Ячейка';
	@override String get matrix => 'Матрица';
	@override String get yes => 'Да';
	@override String get no => 'Нет';
	@override String get successRollback => 'Сканирование было успешно отменено';
	@override String get errorRollback => 'Сканирование не удалось отменить';
	@override String get couldGetInfoLastScan => 'Не удалось получить информацию по последнему сканированию';
	@override String get zeroingProduct => 'Обнуление товара';
	@override String get zeroingProductDescript => 'Вы хотите очистить все процессы сканирования этого товара?';
	@override String get positionSuccessReset => 'Позиция была успешно обнулена';
	@override String get positionErrorReset => 'Позицию не удалось обнулить';
	@override String get pinch => 'Зажмите';
	@override String get viewPhotoCurrentProduct => 'открыть фото текущего товара';
	@override String get cleanProcessConfirm => 'Очистка процесса';
	@override String get cleanProcessConfirmDescript => 'Вы действительно хотите очистить сканирование во всем процессе? Все текущие данные будут удалены безвозвратно!';
	@override String get couldExtractBarcodeFromMatrix => 'Не удалось извлечь штрихкод из матрицы';
	@override String get couldFindBarcodeInDb => 'Не удалось найти данный штрихкод в базе';
	@override String get scanOfferedProduct => 'Отсканируйте предложенный товар';
	@override String get cellAutoClosed => 'Ячейка автоматически закрыта, все товары отсканированы';
	@override String get closeOpenCell => 'Закройте открытую ячейку';
	@override String get requiredScanCodeCell => 'Требуется отсканировать qr-код ячейки';
	@override String get cellIsNotAvailable => 'Данная ячейка не доступна';
	@override String get cellWasOpen => 'Ячейка была открыта';
	@override String get cellWasClosed => 'Ячейка была закрыта';
	@override String get scanOfferedProductOrCurrentCellToClose => 'Отсканируйте предложенный товар или текущую ячейку, чтобы закрыть ее!';
	@override String get collectAllRequiredItemsFromCell => 'Соберите все требуемые товары из этой ячейки или отсканируйте ячейку, чтобы ее закрыть!';
	@override String get scanSuggestedCell => 'Отсканируйте предложенную ячейку, следуйте по предложенному маршруту';
	@override String get cellOpenForCollection => 'Открыта для сбора';
	@override String get addressCollectionDoneDescript => 'В процессе сбора не осталось позиции, которые вам нужно собрать. Процесс полностью собран или произошла ошибка!';
	@override String get missingTheCell => 'Отсутствует в ячейке';
	@override String get requiredScanBarcodeProduct => 'Требуется отсканировать шк-код товара';
	@override String get positionSelectedPlaceCell => 'Позиция выбрана, разместите в ячейку';
	@override String get placementDoneDescript => 'В данном процессе не осталось товаров для размещения. Все товары были размещены или произошла ошибка!';
	@override String get accommodationOptions => 'Варианты размещения';
	@override String get placementNoRecommend => 'Отсутствуют рекомендации';
	@override String get placementRecommendedCells => 'В этих ячейках располагается данный товар. Вы можете расположить товар в любую из этих ячеек, или в любую другую';
	@override String get placementNotRecommendedCells => 'По данному товару, нету рекомендации по размещению. Вы можете расположить товар в любую ячейку на складе!';
	@override String get collectionDoneDescript => 'В документе не осталось позиции, которые вам нужно отсканировать. Документ полностью отсканирован или произошла ошибка!';
	@override String get skip => 'Пропустить';
	@override String get defaultDoneDescript => 'В процессе не осталось позиции, которые вам нужно отсканировать. Процесс полностью отсканирован или произошла ошибка!';
	@override String get confirmAbsentCollection => 'Подтвердите, что вы не нашли физически остаток в ячейке. Ячейка будет откорретирована, резерв переназначен!';
	@override String get absentNotConfirmedRequest => 'Не удалось проверить результат запроса. Недоступные ед. были убраны со сбора, можете продолжать. После завершения сбора, вы увидите уведомление.';
	@override String get processUnconfirmedProducts => 'Есть неподтвержденные товары';
	@override String get processUnconfirmedProductsDescript => 'В текущем процессе существуют позиции, которые были исключены в процессе работы. После перезагрузки процесса, позиции могут появится в процессе!';
	@override String get existScannedContinue => 'Вы берете на себя ответственность, оставляя предыдущее сканирование, в текущем процессе';
	@override String get existScannedClearDb => 'Данный процесс будет полностью очищен от всех процессов сканирования в нем';
	@override String get blockIsExistScannedProcess => 'Есть отсканированные позиции';
	@override String get blockIsExistScannedProcessDescript => 'В текущем процессе есть отсканированные товары. Продолжите работу или очистите процесс сканирования';
	@override String get itemAlreadyBeenScanned => 'Данный артикул/размер уже был отсканирован';
	@override String get skipCollectingNotify => 'Оставшиеся ед. товара были временно исключены с текущего сбора. Продолжайте!';
	@override String get skipCollectingConfirm => 'Товар будет временно снят с маршрута сбора. Пропущенный товар появится вновь, после отправки или перезагрузки';
	@override String get search => 'Искать';
	@override String get backToSearch => 'Вернуться к поиску';
	@override String get searchTitle => 'Поиск';
	@override String get searchResult => 'Результаты поиска';
	@override String get searchResultTaskDocumentDescript => 'Нажмите на найденный документ, чтобы перейти в него или вернитесь к поиску';
	@override String get searchTaskDocumentDescript => 'Введите номер документа. Если он будет найден, он отобразится в результатах поиска!';
	@override String get searchParameters => 'Параметры поиска';
	@override String get searchParametersDescript => 'Данные параметры, влияют на результат поиска';
	@override String get year => 'Год';
	@override String get enterFullDocumentNumberToSearch => 'Введите полный номер документа, для поиска';
	@override String get searchByCurrent => 'Поиск по текущим';
	@override String get searchByOther => 'Поиск по другим';
	@override String get autoSubmissionOfParametersCanceled => 'Автоподставление параметров отменено';
	@override String get selectedTypeIsNotAvailable => 'Выбранный тип недоступен';
	@override String get changeMovingType => 'При изменении типа перемещения, все остальные параметры будут очищены!';
	@override String get articleSizePrice => 'Артикул - размер / цена';
	@override String get noDocumentToCalculateResult => 'Отсутствуют документы, для просчета результата';
	@override String get acceptPackageBeforeNotify => 'Максимально убедитесь, что содержимое упаковки в системе сходится с физическим!';
	@override String get from => 'Откуда';
	@override String get status => 'Статус';
	@override String get relatedDocument => 'Связанный документ';
	@override String get orderStatus => 'Статус заказа';
	@override String get operation => 'Операция';
	@override String get cancelled => 'Отменен';
	@override String get active => 'Активен';
	@override String get acceptance => 'Приемка';
	@override String get moving => 'Перемещение';
	@override String get placement => 'Размещение';
	@override String get collectionRoute => 'Маршрут сбора';
	@override String get actionsProcess => 'Действия над процессом';
	@override String get confirmSelectCellAddressCollection => 'Текущая открытая ячейка будет закрыта, перед открытием выбранной!';
	@override String get thereIsNoRoute => 'Маршрут отсутствует';
	@override String get currentLastCell => 'Текущая последняя ячейка';
	@override String get currentCell => 'Текущая ячейка';
	@override String get currentProposedCellCurrentCollection => 'Текущая или предложенная ячейка, в текущем сборе';
	@override String get followingRoute => 'Следующие по маршруту';
	@override String get followingRouteDescript => 'Нажмите на ячейку, чтобы изменить маршрут относительно выбранной ячейки';
	@override String get dateTime => 'Дата и время';
	@override String get notCorrectScanExtra => 'Отсутствуют сканирования которые требуется отменить';
	@override String get correctScanExtraDescript => 'Отмените каждое сканирование отдельно, нажав на элемент и подтвердив действие. Отмена действия должна сопровождаться, возвратом физического товара на место!';
	@override String get extraScans => 'Лишние сканирования';
	@override String get stateExtraScanTitle => 'Разрешите проблему';
	@override String get stateExtraScanCorrectionOptions1 => 'Есть сохраненные отсканированные товары, которые отсутствуют в текущем процессе. Для продолжения работы, требуется удалить лишние сканирования или очистить процесс целиком!';
	@override String get stateExtraScanCorrectionOptions2 => 'Содержаться много сохраненных отсканированных товаров, которые отсутствуют в текущем процессе. Для продолжения, требуется очистить процесс от всех сканировании!';
	@override String get clearResume => 'Очистить и продолжить';
	@override String get clearExtra => 'Очистить лишние';
	@override String get unableToCheckUpdate => 'Невозможно проверить обновление';
	@override String get unableToCheckUpdateDescript => 'У вас консолидированный склад. Сначала выберите склад или зону работ, для проверки обновлений!';
	@override String get baseNomenclature => 'База номенклатуры';
	@override String get baseNomenclatureEmpty => 'База номенклатуры пустая';
	@override String get baseNomenclatureEmptyDescript => 'Требуется загрузка, для дальнейшей работы';
	@override String get selectLangDescript => 'Выберите предпочитаемый язык для работы с терминалом. Изменить можно в любое время!';
	@override String get unlock => 'Разблокировать';
	@override String get processUnlockDescript => 'Нажмите, чтобы снять блокировку с текущего процесса.';
	@override String get confirmProcessUnlock => 'При разблокировке, текущее сканирование будет очищено и произведен выход!';
	@override String get aboutTheApp => 'О приложении';
	@override String get disbanded => 'Расформирован';
	@override String get shipped => 'Отгружен';
	@override String get combineCell => 'В ячейку';
	@override String get expectation => 'Ожидание';
	@override String get applicationVersion => 'Версия приложения';
	@override String get apiVersion => 'Версия api';
	@override String get theme => 'Тема';
	@override String get fontSize => 'Размер шрифта';
	@override String get light => 'Светлая';
	@override String get dark => 'Тёмная';
	@override String get standard => 'Стандартный';
	@override String get large => 'Крупный';
	@override String get veryLarge => 'Очень крупный';
	@override String get personalizationApplication => 'Персонализация приложения';
	@override String get personalizationApplicationDescript => 'Настройте параметры, как вам удобно!';
	@override String get userSettings => 'Пользовательские настройки';
	@override String get userSettingsDescript => 'Измените параметры вашего аккаунта';
	@override String get unlockAllDocuments => 'Разблокировать все документы';
	@override String get unlockAllDocumentsDescript => 'Разблокировка всех документов заблокированных с этого терминала!';
	@override String get errorSavePersonalizingSetting => 'Не удалось сохранить ваши пользовательские настройки!';
	@override String get confirmUnlockAll => 'При разблокировки всех документов, будет очищена база сканирования!';
	@override String get repeatBackgroundTaskError => 'Повтор выполнения запроса. Будет попытка повторного выполнения запроса.';
	@override String get timeIsNotDefined => 'Время не определено';
	@override String get startTyping => 'Начните ввод';
	@override String get listOfDocuments => 'Список документов';
	@override String get acceptancePackageIdScan => 'Отсканируйте упаковочный идентификатор перемещения. Или перейдите в список документов!';
	@override String get availability => 'Наличие';
	@override String get transitStorage => 'Транзитное хранение';
	@override String get logistics => 'Логистика';
	@override String get send => 'Отправить';
	@override String get createMoveBasedThisDocument => 'Создание перемещения на основании данного документа!';
	@override String get identificationOfMovement => 'Идентификация перемещения';
	@override String get identificationOfMovementDescript => 'Отсканируйте свободный упаковочный идентификатор и закрепите его после создания перемещения!';
	@override String get failedToClearTheMoveProcess => 'Не удалось очистить процесс перемещения';
	@override String get selectKeyboardHelp => 'Нажмите кнопку на терминале, соответствующей порядковому номеру пункта!';
	@override String get selectTypeMove => 'Выберите тип перемещения';
	@override String get warning => 'Предупреждение';
	@override String get movingFormWarningPreparedOrSaveData => 'Некоторые подготовленные или сохраненные данные не подходят для создания перемещения';
	@override String get unknownStatus => 'Неизвестный статус';
	@override String get logisticHistoryEmpty => 'История движения пустая';
	@override String get logisticUndefinedStatus => 'Статус неизвестен';
	@override String get sender => 'Отправитель';
	@override String get recipient => 'Получатель';
	@override String get packageProcessMoving => 'В процессе перемещения';
	@override String get shipFromWarehouse => 'Отгрузить со склада';
	@override String get recentMovementMovementsPackageExternal => 'Последние движения перемещения';
	@override String get client => 'Клиент';
	@override String get packageLeaveWarehouse => 'Упаковка покинула склад и была закрыта';
	@override String get confirmPackageLeaveWarehouse => 'Подтвердите отправку упаковки с текущего склада';
	@override String get externalMovingStatusUnknown => 'Неизвестный статус';
	@override String get externalMovingStatusWait => 'Ожидание транспортировки';
	@override String get externalMovingStatusWay => 'Отправлено, в пути';
	@override String get externalMovingStatusArrived => 'Прибыло на склад получения';
	@override String get externalMovingNoMovementsLocations => 'Движения перемещения отсутствуют';
	@override String get location => 'Местоположение';
	@override String get leftLocation => 'Покинуло местоположение';
	@override String get availableActionsInCell => 'Доступные действия над ячейкой';
	@override String get availableActionsInPackage => 'Доступные действия над упаковкой';
	@override String get selectSearchOption => 'Выберите вариант поиска';
	@override String get selectFilter => 'Выберите фильтр';
	@override String get selectActionProcess => 'Выберите действие над процессом';
	@override String get absent => 'Отсутствует';
	@override String get changeAvatar => 'Изменить аватар';
	@override String get changeWarehouse => 'Изменить склад';
	@override String get cellBelongsAnotherWarehouse => 'Ячейка принадлежит другому складу';
	@override String get identiconInfo => 'Одной из основных функций аватара является работа в качестве идентикона вашего аккаунта';
	@override String get save => 'Сохранить';
	@override String get selectAnother => 'Выбрать другой';
	@override String get avatar => 'Аватар';
	@override String get updateAvatarDescript => 'Текущий аватар будет установлен для вашего профиля';
	@override String get ship => 'Отгрузить';
	@override String get disband => 'Расформировать';
	@override String get moveToACell => 'Переместить в ячейку';
	@override String get transitStorageOrderDisbandInfo => 'Заказ был отменен в системе. Требуется провести расформирование с хранения в ячейку возврата!';
	@override String get transitStorageOrderShipInfo => 'Заказ активен. Требуется отгрузка заказа с транзитного хранения';
	@override String get transitStorageConfirmShip => 'Подтвердите намерение отгрузки заказа с транзитного хранения';
	@override String get transitStorageConfirmDisband => 'Подтвердите намерение расформирование заказа с транзитного хранения в упаковку';
	@override String get orderIsExistsOperation => 'Операция над данным заказом в транзитном хранении, была выполнена. Дальнейшие действия отсутствуют!';
	@override String get orderActionExpectedInTransitStorage => 'Ожидается выполнение действие над данной упаковкой в транзитном хранений!';
	@override String get combineInCellDescript => 'В которую требуется переместить упаковку';
	@override String get hintOrderNumber => 'Номер заказа';
	@override String get failedLoadOrderData => 'Не удалось загрузить данные заказа';
	@override String get notAssigned => 'Не присвоена';
	@override String get reasonRejection => 'Причина отклонения';
	@override String get logisticsConfirmCellTo => 'Все подтвержденные товары будут перемещены в эту ячейку';
	@override String get rejectForAbsence => 'Отклонить за отсутствие';
	@override String get nextPageError => 'Не удалось загрузить следующую страницу. Попробуйте повторить!';
	@override String get nextPageDone => 'Все данные были загружены';
	@override String get repeat => 'Повторить';
	@override String get logisticsOrderNotAssignedCell => 'Не закреплен за ячейкой';
	@override String get products => 'Товары';
	@override String get packages => 'Пакеты';
	@override String get taskDescription => 'Описание задачи';
	@override String get logisticsAvailabilityTaskDescript => 'Требуется собрать и подтвердить перемещение вещей в ячейку с заказом, или отклонить товар с выбранной причиной!';
	@override String get logisticsWithdrawTaskDescript => 'Требуется собрать и подтвердить перемещение вещей из ячейки с заказом в ячейку возврата';
	@override String get logisticsPackTaskDescript => 'Требуется сканирование содержимого каждой упаковки для подтверждения готовности на отправку';
	@override String get logisticsSendTaskDescript => 'Требуется отсканировать упаковку для подтверждения отправки пакета по заказу';
	@override String get logisticsTabsDescript => 'Будьте внимательны, выполняя задачи. Ваши действия не подлежат отмене!';
	@override String get tabs => 'Вкладки';
	@override String get logisticsTabsAvailableTask => 'Доступные задачи';
	@override String get taskList => 'Список задач';
	@override String get rejectWithReason => 'Отклонить с причиной';
	@override String get skipProduct => 'Пропустить товар';
	@override String get findAnotherCell => 'Найти другую ячейку';
	@override String get reasonReject_1 => 'Отсутствует пуговица';
	@override String get reasonReject_2 => 'Дефект молнии';
	@override String get reasonReject_3 => 'Наличие зацепок';
	@override String get reasonReject_4 => 'Наличие пятен';
	@override String get reasonReject_5 => 'Дефект шва';
	@override String get reasonReject_6 => 'Наличие катышек';
	@override String get reasonReject_7 => 'Дефект бретельки';
	@override String get reasonReject_8 => 'Наличие царапин или заломов';
	@override String get reasonReject_9 => 'Дефект крепления';
	@override String get reasonReject_10 => 'Наличие отверстия от аларма';
	@override String get reasonReject_11 => 'Наличие брака';
	@override String get reasonReject_12 => 'Не для продажи в Интернет Магазине';
	@override String get reasonReject_13 => 'Товар отсутствует';
	@override String get rejectSelectTitle => 'Выберите причину отклонения';
	@override String get confirmRejection => 'Подтвердите отклонение';
	@override String get rejectItemIsNotPossible => 'Отклонение позиции невозможно';
	@override String get rejectItemIsNotPossibleMessage => 'Товар при подтверждений наличия, был подтвержден не через ТСД';
	@override String get confirmItemIsNotPossible => 'Подтверждение позиции невозможно';
	@override String get confirmItemIsNotPossibleMessage => 'Товар при подтверждений наличия, был подтвержден не через ТСД';
	@override String get confirmPackageIsNotPossible => 'Подтверждение пакета невозможно';
	@override String get confirmPackageIsNotPossibleMessage => 'Некоторый или весь товар в пакете, при подтверждении наличия был подтвержден не через ТСД';
	@override String get notAvailableProductAccessList => 'Отсутствует список доступных товаров';
	@override String get scanThePackageSendDescript => 'Отсканируйте, чтобы подтвердить отправку этого пакета';
	@override String get scanThePackagePackDescript => 'Отсканируйте, чтобы подтвердить упаковку этого пакета';
	@override String get cellSearch => 'Поиск по ячейкам';
	@override String get cellSearchDescript => 'Дождитесь завершения поиска местоположения товара';
	@override String get logisticsConfirmLocationCell => 'В этой ячейке предположительно находится текущий товар';
	@override String get logisticsConfirmNotLocationCell => 'Не удалось найти местоположение товара в ячейках, на складе';
	@override String get notFound => 'Не найдено';
	@override String get startSearch => 'Начинайте поиск';
	@override String get searchFrom3Char => 'Поиск от 3-ех символов';
	@override String get nothingWasFound => 'Ничего не нашлось';
	@override String get invalidOrderPackageCodeScanned => 'Отсканирован неверный код пакета заказа';
	@override String get requiredFullScanned => 'Требуется отсканировать все содержимое в процессе';
	@override String get logisticsOrderNotAccessConfirmWithoutCell => 'Содержимое и подтверждение не доступно в этой задаче!';
	@override String get logisticsConfirmItemNeedStepWait => 'Подождите';
	@override String get logisticsConfirmItemNeedStepWaitAction => 'Ожидание действия';
	@override String get logisticsConfirmItemNeedActionScanCell => 'Отсканируйте ячейку';
	@override String get logisticsConfirmItemNeedActionScanItem => 'Отсканируйте товар';
	@override String get scanCellSpecifiedLocation => 'Отсканируйте ячейку указанную в местоположении';
	@override String get noScanningRequiredFollowSteps => 'Сканирование не требуется. Выполните предложенные действия';
	@override String get qtyUnits => '{{qty}} ед.';
	@override String get confirmHaveReturnedCell => 'Вы подтверждаете что вернули {{article}} / {{size}} в ячейку {{cell}}';
	@override String get confirmHaveReturned => 'Вы подтверждаете что физически убрали {{article}} / {{size}} из текущего процесса';
	@override String get confirmHaveReturnedError => 'Не удалось отменить сканирование {{article}} / {{size}} в текущем процессе';
	@override String get confirmHaveReturnedSuccess => 'Сканирование {{article}} / {{size}} было отменено в текущем процессе';
	@override String get hiUser => '{{emoji}} Привет, {{userName}}';
	@override String get terminalID => 'Терминал.ID: {{tid}}';
	@override String get versionTsd => 'Версия TSD: {{name}} (api v. {{api}})';
	@override String get ofData => ' {{a}} из {{b}} ед.';
	@override String get sizeNotRepresentedOnTheScreen => 'Размер \'{{size}}\' не отображается на экране';
	@override String get updateVersion => '{{emoji}} Версия {{v}}';
	@override String get upload => 'Загружаем {{value}} / {{total}} мб.';
	@override String get currentAppLastAvailable => 'Текущая версия приложения {{v}} является последней доступной версией для вас!';
	@override String get savePercent => 'Сохраняем {{percent}}%';
	@override String get lastUpdateDb => 'Последнее обновление: {{date}}';
	@override String get quantity => '{{emoji}} Количество - {{qty}}';
	@override String get addingGoodsToCell => 'Внесение товаров в ячейку {{cellName}}';
	@override String get removalGoodsFromCell => 'Вынесение товаров из ячейки {{cellName}}';
	@override String get adjustmentCell => 'Корректировка ячейки {{cellName}}';
	@override String get movingItemsFromCell => 'Перемещение товаров из ячейки {{cellName}}';
	@override String get moveGoodsTheCell => 'Переместить {{qty}} ед. товара в ячейку {{cellTo}}';
	@override String get removalGoodsFromCellInPackage => 'Вынесение товаров из ячейки {{cellName}} в упаковку';
	@override String get takeToCellInPackage => 'Вынести {{qty}} ед. товара из ячейки {{cellFrom}} в упаковку {{packageId}}';
	@override String get selectWarehouseTitle => 'Переключиться на {{name}}';
	@override String get selectWorkAreaTitle => 'Переключиться в зону работы {{workareaName}} {{warehouseName}}';
	@override String get packageId => 'Упаковка #{{id}}';
	@override String get orderWithGrid => 'Заказ #{{orderId}}';
	@override String get scanThePackage => 'Отсканируйте пакет #{{packageId}}';
	@override String get confirmRejectionMessage => 'Подтвердите что хотите отклонить {{article}} / {{size}} по причине - {{reason}}';
	@override String get inCell => 'В ячейке {{cellName}}';
	@override String get dateCreate => 'Дата создания {{date}}';
	@override String get qtyPieces => '{{qty}} шт.';
	@override String get departureWarehouse => 'Откуда {{warehouse}}';
	@override String get placePackageInCell => 'Разместить упаковку в ячейку {{cell}}';
	@override String get addingGoodsToPackaging => 'Внесение товаров в упаковку {{packageId}}';
	@override String get removalGoodsFromPackaging => 'Вынесение товаров из упаковки {{packageId}}';
	@override String get placementGoodsFromPackaging => 'Размещение товаров из упаковки {{packageId}}';
	@override String get scanCellName => 'Отсканируйте ячейку {{cellName}}';
	@override String get scannedInvalidCell => 'Требовалось отсканировать ячейку {{cellName}}';
	@override String get requiredMatrix => '{{article}} - {{size}}, нужно отсканировать матрицу';
	@override String get alreadyMatrix => '{{article}} - {{size}} вы уже отсканировали эту матрицу';
	@override String get barcodeFailedScan => '{{barcode}}, не удалось сохранить сканирование!';
	@override String get barcodeScanned => '{{barcode}}, отсканирован!';
	@override String get failedSaveScan => '{{barcode}}, не удалось сохранить сканирование!';
	@override String get itemPlaceInCell => '{{article}} - {{size}}, помещен в {{cell}}\'';
	@override String get itemPlaceInCellFailed => '{{article}} - {{size}}, не удалось разместить';
	@override String get leftCells => 'Осталось - {{qty}} яч.';
	@override String get productPlacement => 'Размещение товара';
	@override String get productChecking => 'Проверка товара';
	@override String get repeatLogin => 'Подтверждение аккаунта завершено\nПожалуйста повторите вход';
	@override String get inStock => 'В наличии';
	@override String get notInStock => 'Нет в наличии';
	@override String get price => 'Цена';
	@override String get color => 'Цвет';
	@override String get codeIsNotProduct => 'Код не от товара';
	@override String get invalidProductCodeType => 'Неверный тип кода, отсканируйте код товара';
	@override String get isMissing => 'Отсутствует';
	@override String get sale => 'Sale';
	@override String get lichiId => 'Lichi ID';
	@override String get onRegistered => 'Аккаунт успешно привязан\nПожалуйста запросите данные для входа у техподдержки';
	@override String get toRegistration => 'Зарегистрироваться';
	@override String get alreadyRegistered => 'Данный аккаунт уже существует';
	@override String get inventoryCell => 'Инвентаризация ячейки {{cellName}}';
	@override String get inventoryCellScanNotify => 'Отсканируйте идентификатор ячейки изображенный на QR - коде, для целей инвентаризации';
	@override String get inventoryCellScanNotifyDubai => 'Отсканируйте идентификатор ячейки изображенный на QR - коде, для целей инвентаризации на складах Дубай';
	@override String get inventoryCellCorrection => 'Посчитать ячейку';
	@override String get inventoryCellConfirm => 'Подтвердить пустоту';
	@override String get inventoryCellZeroing => 'Обнулить ячейку';
	@override String get executor => 'Исполнитель';
	@override String get undefined => 'Неопределено';
	@override String get confirmation => 'Подтверждение';
	@override String get counting => 'Подсчет';
	@override String get result => 'Результат';
	@override String get zeroing => 'Обнуление';
	@override String get inventoryNotCarriedOut => 'Инвентаризация не проведена';
	@override String get inventoryCarriedOut => 'Инвентаризация проведена';
	@override String get inventoryCarriedOutWithError => 'Инвентаризация проведена. Имеются расхождения';
	@override String get productCheckingScanNotify => 'Отсканируйте штрихкод товара, для проверки товара';
	@override String get incorrectPincode => 'Неверный пинкод\nпинкод должен содержать только цифры';
}

/// Flat map(s) containing all translations.
/// Only for edge cases! For simple maps, use the map function of this library.

extension on Translations {
	dynamic _flatMapFunction(String path) {
		switch (path) {
			case 'warehouse': return 'Warehouse';
			case 'notSelected': return 'Not selected';
			case 'notifyScanQrWarehouse': return 'Scan the QR code of the warehouse or work area. You will open the modules available for the warehouse';
			case 'userID': return 'User.ID';
			case 'notificationCompletionWork': return 'Be sure to complete the work, all requests are executed on your behalf!';
			case 'finishJob': return 'Finish the job';
			case 'requestCannotExecuted': return 'The request cannot be executed';
			case 'settings': return 'Settings';
			case 'noModulesAvailable': return 'No modules available';
			case 'noModulesAvailableDescript': return 'There are no modules available for work in this warehouse, change the warehouse or contact technical support!';
			case 'selectWarehouse': return 'Select a warehouse';
			case 'selectWarehouseDescript': return 'A consolidated warehouse is displayed on your account. Scan the available warehouse where you will work!';
			case 'exitUserTitle': return 'Completion of work';
			case 'exitUserMessage': return 'Do you really want to shut down the terminal?';
			case 'invalidCodeType': return 'Invalid code type';
			case 'invalidCodeFormat': return 'Invalid code format';
			case 'invalidAuthCodeType': return 'Invalid code type, scan your personal qr code';
			case 'invalidOrderPackageCodeType': return 'Invalid code with the package order ID';
			case 'invalidWarehouseWorkareaCodeType': return 'Invalid code type, scan the code of the warehouse or work area';
			case 'failedDecryptQrCode': return 'Failed to decrypt qr code';
			case 'doesNotCodeTask': return 'The code does not match the task';
			case 'probablyCode': return 'The code is probably corrupted. Data could not be read!';
			case 'selectWarehouseMessage': return 'Confirm that you really want to switch to the currently selected warehouse';
			case 'selectWorkAreaMessage': return 'Confirm that you really want to switch to the selected zone';
			case 'language': return 'English';
			case 'calculation': return 'Calculation';
			case 'clearingDb': return 'Clearing the database';
			case 'updatingProductDb': return 'Updating the product database';
			case 'thereErrors': return 'There are errors';
			case 'errors': return 'Errors';
			case 'done': return 'Done';
			case 'onPageNotifyTitle': return 'There are problems';
			case 'onPageNotifyMessage': return 'Some steps could not be completed, please contact the developer for clarification!';
			case 'checkingTerminal': return 'Checking the terminal';
			case 'notificationVerifyTerminal': return 'Do not turn off the device while checking and updating';
			case 'continueL': return 'Continue';
			case 'noDataAvailable': return 'No data available';
			case 'consolidatedResult': return 'Consolidated result for all active documents in the current module. Click to update the result and documents';
			case 'activeDocuments': return 'Active documents';
			case 'completedDocuments': return 'Completed documents';
			case 'unableOpenDocument': return 'Unable to open the document';
			case 'updateListDocumentTitle': return 'Updating data';
			case 'updateListDocumentMessage': return 'Update the list of documents?';
			case 'statusUploadCompletedDocuments': return 'Uploading completed\ndocuments';
			case 'statusUploadingActiveDocuments': return 'Uploading active\ndocuments';
			case 'listCompletedDocuments': return 'List of completed documents';
			case 'listActiveDocuments': return 'List of active documents';
			case 'listPackageContents': return 'List of package contents';
			case 'thereNoDocuments': return 'No documents available';
			case 'contentsEmpty': return 'The contents are empty';
			case 'documents': return 'Documents';
			case 'barcodeAndArticle': return 'Barcode/article';
			case 'title': return 'Title';
			case 'history': return 'History';
			case 'outputHistory': return 'Output of history, current process, sequential scan. Click to see details or perform an action!';
			case 'storyEmpty': return 'The story is empty';
			case 'listEmpty': return 'The list is empty';
			case 'endList': return 'End of the list';
			case 'sortList': return 'Sort the list or remove the selected filters';
			case 'added': return 'Added';
			case 'unScanned': return 'Un - scanned';
			case 'scanned': return 'Scanned';
			case 'all': return 'All';
			case 'selectActionSelectedPosition': return 'Select an action on the selected position!';
			case 'resetToZero': return 'Reset to Zero';
			case 'mistake': return 'Mistake';
			case 'resetPositionWarning': return 'The position is reset, but the position in the interface could not be updated. Reload the document!';
			case 'list': return 'List';
			case 'emptyList': return 'Empty list';
			case 'motionCreationFormValidationCreateMoving': return 'Be sure to check the form data before creating a move!';
			case 'createMove': return 'Create a move';
			case 'fromDocumentCreateMove': return 'From this document, the goods are taken to create their movements to another warehouse';
			case 'uploadingDataMove': return 'Uploading data\nto move';
			case 'goodsBeingMoved': return 'Goods being moved';
			case 'simplifiedRelocation': return 'Simplified relocation';
			case 'transferAutoAccepted': return 'This transfer will be automatically accepted at the receiving warehouse!';
			case 'standardMovement': return 'Standard movement';
			case 'transferNeedAccepted': return 'This transfer will need to be accepted at the receiving warehouse!';
			case 'warehouseRecipient': return 'Warehouse recipient';
			case 'departureWarehouseAuto': return 'the treasure of the shipment is set automatically.\nSelect the receipt warehouse!';
			case 'choose': return 'Choose';
			case 'specify': return 'Specify';
			case 'attach': return 'Attach';
			case 'notAttach': return 'Not attached';
			case 'scanProducts': return 'Scan products';
			case 'selectProducts': return 'Select products';
			case 'notDataCreateMove': return 'Could not get the data required for the move!';
			case 'notSortItemsErrorMove': return 'Couldn\'t sort through the items. Creating a move is impossible!';
			case 'clearingCurrentProcess': return 'Clearing the current process';
			case 'confirmClearCurrentFormMove': return 'Confirm that you want to clear the current move form!';
			case 'formTransferCleared': return 'The transfer form has been cleared';
			case 'failedClearMove': return 'Failed to clear the move';
			case 'selectionGoodsMove': return 'Selection of goods to move';
			case 'returnCreationMove': return 'Return to Creation Move';
			case 'backContinueCreatingMove': return 'Click to go back and continue creating the move';
			case 'receiptWarehouse': return 'Receipt Warehouse';
			case 'listProductCreateTransfer': return 'A list of products to create a transfer to another warehouse!';
			case 'noReceivingWarehouseSelected': return 'The recipient warehouse is not selected';
			case 'noGoodsCreateMove': return 'There are no goods to create a move!';
			case 'errorFormingListProducts': return 'Error in forming the list of products';
			case 'creatingMove': return 'Creating a move';
			case 'updateDb': return 'Update the database';
			case 'checkingDb': return 'Checking the Database';
			case 'gettingDb': return 'Getting data';
			case 'noDataUploadedDb': return 'No data uploaded';
			case 'getErrorAllProducts': return 'Could not get the data of all products';
			case 'dataUpdateDb': return 'Data updated';
			case 'updatedDb': return 'The data is updated, the database contains all available products';
			case 'noDataRecordedDb': return 'No data recorded';
			case 'writtenErrorDb': return 'Data could not be written to the local database.';
			case 'database': return 'Database';
			case 'removal': return 'Removal';
			case 'clearDbConfirm': return 'Do you really want to clean up the entire local database?';
			case 'localDbCleaned': return 'The local database has been cleaned and restored';
			case 'failedClearDb': return 'Failed to clear the database';
			case 'restoreDb': return 'Restore the database';
			case 'checkingUpdate': return 'Checking for updates';
			case 'languageLabel': return 'Language';
			case 'failedLoadTradingFloorData': return 'Failed to load trading floor data';
			case 'failedLoadLogisticsTabData': return 'Failed to load logistics section data';
			case 'uncertainGoods': return 'Uncertain goods';
			case 'confirmOrPostTradingHall': return 'Confirm or post the products in the trading floor that are presented in this list';
			case 'calcTradingHall': return 'Calculation of the percentage of the trading floor filling based on scanned data based on the current day\'s balances!';
			case 'scanHall': return 'Scan the hall';
			case 'dataNotUpdated': return 'Data not updated';
			case 'errorUpdatingDataTradingHall': return 'An error occurred while updating the data, the data is not up to date. Try updating manually!';
			case 'scanAllEachProductsTradingHall': return 'Scan all the products in the showcase, one unit of each size range, to check the sales floor';
			case 'uploadingActiveDocuments': return 'Uploading active\ndocuments';
			case 'uploadingDataTabsLogistics': return 'Loading partition\n data';
			case 'uploadingLogisticsListAvailability': return 'Loading the list of orders\n with goods for confirmation';
			case 'uploadingLogisticsListWithdraw': return 'Loading a list of orders\n with goods for withdrawal from the reserve';
			case 'uploadingLogisticsListPack': return 'Loading the list of orders\n for packaging';
			case 'uploadingLogisticsListSend': return 'Loading the list of orders\n with packages for shipment';
			case 'uploadingOrderData': return 'Loading order\n data';
			case 'tradingHall': return 'Trading hall';
			case 'invalidUserLogin': return 'Invalid user login';
			case 'userLogin': return 'User login';
			case 'invalidPassword': return 'Invalid password';
			case 'password': return 'Password';
			case 'scanPersonalCodeAuth': return 'Scan your personal code\n to access the terminal!';
			case 'invalidData': return 'Invalid data';
			case 'authErrorTerminal': return 'Authorization error in the terminal';
			case 'dataLoadedToCreateMove': return 'Data is being loaded to create a move';
			case 'couldNotGetDocuments': return 'Could not get these documents!';
			case 'uploadingControlData': return 'Uploading control\ndata';
			case 'byCurrentWarehouse': return 'by current warehouse';
			case 'noControl': return 'There is no control';
			case 'moveItemsAccepted': return 'Move the items that were accepted but not moved to another warehouse!';
			case 'control': return 'Control';
			case 'checkingForUpdates': return 'Checking for updates';
			case 'problemUpdating': return 'If you have problems updating, write to technical support';
			case 'updateDownloadFromServer': return 'The update is being downloaded from the server, after which you will be offered to install it';
			case 'installUpdateOnlyAndroid': return 'Installing the update is currently only possible for Android';
			case 'anErrorOccurredDownloadingInstall': return 'An error occurred while downloading and installing';
			case 'updateCenterApp': return 'Update Center\napplications';
			case 'reboot': return 'Reboot';
			case 'clearProcess': return 'Clear the process';
			case 'setAreaTitle': return 'You can\'t change the zone';
			case 'setAreaMessage': return 'After the start of scanning, when the document is not empty, you cannot change the scanning area. You can change it after sending or clearing the document!';
			case 'scanSectionSuccessInstalled': return 'The scan section has been successfully installed';
			case 'failedSetScanArea': return 'Failed to set the scan area';
			case 'productDbIsEmpty': return 'The product database\nis empty';
			case 'stateEmptyProcess': return 'Working with the process\nis impossible';
			case 'stateBlocked': return 'Working with the process\nis not allowed';
			case 'stateExistScanned': return 'Scan data\nis available';
			case 'stateExtraScanned': return 'Unnecessary scans\nin the process';
			case 'stateStart': return 'Fulfill the condition\nbefore starting work';
			case 'followSuggestedConditions': return 'Follow the suggested conditions to get started';
			case 'zone': return 'Zone';
			case 'package': return 'Package';
			case 'setZone': return 'Set the zone';
			case 'setPackage': return 'Attach the packaging';
			case 'clickChangeArea': return 'Click to change the work area!';
			case 'clickChangePackage': return 'Click to attach another package!';
			case 'scanError': return 'Scan error';
			case 'awaitLastScan': return 'The previous scan has not been processed yet, before the start of the current one.';
			case 'invalidUnreadableCode': return 'Invalid/unreadable code. Try again or enter manually!';
			case 'notBarcodeInDb': return 'Couldn\'t find this barcode in the database';
			case 'simplifiedManualInput': return 'Simplified manual input';
			case 'productIsNotList': return 'The product is not in the list';
			case 'positionIsNotScanList': return 'This position is not in the scan list, you can add it. Confirm!';
			case 'positionMissingCurrentProcess': return 'This position is missing in the current process';
			case 'positionAlreadyBeenScanned': return 'This position has already been scanned';
			case 'conditionsNotScan': return 'The conditions are not met before starting the scan';
			case 'emptyProcess': return 'Empty process';
			case 'youHaveNotScanned': return 'You have not scanned anything, an empty process cannot be sent!';
			case 'cancelingScan': return 'Canceling a scan';
			case 'confirmCancelAction': return 'Confirm that you want to cancel this action';
			case 'actionCanceled': return 'Action canceled';
			case 'couldNotCancelAction': return 'Could not cancel the action';
			case 'cancelingLastScan': return 'Canceling the last scan';
			case 'confirmCancelLastScan': return 'Confirm that you want to cancel the last scan';
			case 'lastActionCanceled': return 'Last action canceled';
			case 'couldUndoLastAction': return 'Could not undo the last action';
			case 'zeroingPosition': return 'Zeroing the position';
			case 'confirmResetPosition': return 'Confirm that you want to reset this position';
			case 'positionResetToZero': return 'The position is reset to zero';
			case 'failedResetPosition': return 'Failed to reset the position';
			case 'accessInNotProvided': return 'Access is not provided';
			case 'blockingDataIsUnknown': return 'Blocking data is unknown';
			case 'terminals': return 'Terminals';
			case 'blockedDescript_one': return 'It was not possible to check the blocking of this process. Try again later or contact support!';
			case 'blockedDescript_two': return 'It was not possible to block this process for you. Try again later or contact support!';
			case 'blockedDescript_three': return 'This process is blocked by another user. Close the process or find a terminal and unlock it!';
			case 'updateDbScan': return 'Update the database';
			case 'updateDbScanDescript_1': return 'Update the product database at the terminal, go to ';
			case 'updateDbScanDescript_2': return 'settings - database - update. ';
			case 'updateDbScanDescript_3': return 'After that, the scanning process will become available!';
			case 'emptyProcessDescript_1': return 'This scan requires ';
			case 'emptyProcessDescript_2': return 'data';
			case 'emptyProcessDescript_3': return ' which failed to load. Try again or contact technical support!';
			case 'confirmAndStart': return 'Confirm and start';
			case 'beforeStartActionsCorrect': return 'Before you start, make sure that your actions are correct. You are fully responsible for your actions.';
			case 'selectAction': return 'Select an action';
			case 'startConfirm': return 'Start confirm';
			case 'listCurrentProcess': return 'List of the current process';
			case 'outputContentsCurrentScanningProcess': return 'Output of the contents of the current scanning process. Click on a position to select an action!';
			case 'scanHistory': return 'Scan History';
			case 'cancelAction': return 'Cancel the action';
			case 'cancelingLastActionHistory': return 'Canceling the last action on the history. Click to roll back or the \'esc\' button on the terminal!';
			case 'mainAction': return 'Main action. Press the (ent) button';
			case 'loadingDataProcess': return 'Loading the data\nof the process';
			case 'failedConvertItemsCreateMove': return 'Failed to convert items to create a move!';
			case 'acceptMove': return 'Accept the move';
			case 'acceptOrder': return 'Accept the order';
			case 'clickAcceptScannedItems': return 'Confirm to accept the scanned items';
			case 'confirmAction': return 'Confirm the action!';
			case 'confirmAcceptCurrentScannedItems': return 'Do you really want to accept the current scanned items?';
			case 'sendStatement': return 'Send to the statement';
			case 'assembleToOrder': return 'Assemble to order';
			case 'clickAssembleToShipmentOnMove': return 'Confirm to send the data to the transfer order';
			case 'clickAssembleToShipmentOnOrder': return 'Confirm to send the data to the customer\'s order';
			case 'clickSendInventoryData': return 'Confirm to send to the inventory statement';
			case 'confirmSendCurrentScannedItemsInventory': return 'Do you really want to send the current scanned items to the inventory list?';
			case 'saveReport': return 'Save to Report';
			case 'clickSendScanDataReport': return 'Confirm to send the scan data to the report';
			case 'confirmYourIntention': return 'Confirm your intention';
			case 'confirmSendCurrentScannedItemsTradingHall': return 'Do you really want to send the current scanned items to the sales floor report';
			case 'manual': return 'manually';
			case 'scanning': return 'scanned';
			case 'unknown': return 'unknown';
			case 'reauthorizationRequired': return 'Reauthorization required';
			case 'terminalNotUsed': return 'The terminal has not been used for more than 30 minutes. \nauthorization will be required!';
			case 'groupAcceptanceTitle': return 'Acceptance of goods';
			case 'groupAcceptanceDescript': return 'Choose the appropriate type of acceptance';
			case 'groupWarehouseMovementsTitle': return 'Warehouse movements';
			case 'groupWarehouseMovementsDescript': return 'Create or accept a move between warehouses';
			case 'groupShipmentTitle': return 'Collecting orders';
			case 'groupShipmentTitleDescript': return 'Working with orders of available types';
			case 'moduleInventoryName': return 'Inventory';
			case 'moduleInventoryCellName': return 'Inventory of cells';
			case 'moduleAcceptanceOnAdmissionOCName': return 'By order of the supplier';
			case 'moduleShipmentOnMoveName': return 'to move';
			case 'moduleShipmentOnOrderName': return 'supplier';
			case 'moduleAcceptanceOnAdmissionOCFullName': return 'Acceptance on admission By order of the supplier';
			case 'moduleAcceptanceOnAdmissionWOCName': return 'By invoice';
			case 'moduleAcceptanceOnAdmissionWOCFullName': return 'Acceptance on admission By invoice';
			case 'moduleCreateMove': return 'Create a move';
			case 'moduleTradingHall': return 'Trading hall';
			case 'moduleAcceptanceOnMoveName': return 'Accept the move';
			case 'moduleControlMovingName': return 'Movement control';
			case 'moduleControlPlacementName': return 'Placement control';
			case 'moduleAcceptanceOnMoveFullName': return 'acceptance on admission By move';
			case 'moduleControl': return 'Control';
			case 'serverResponseParameterMissing': return 'Server response parameters are missing';
			case 'invalidResponseFromServer': return 'Invalid response from the server!';
			case 'requestHasNotBeenSent': return 'The request has not been sent. Request error!';
			case 'notification': return 'Notification';
			case 'updateCellNotify': return 'The cell data will be updated after performing the last actions!';
			case 'requestError': return 'Request error';
			case 'sessionIsNotActive': return 'The session is not active';
			case 'sessionRejected': return 'The session was rejected by the server reauthorization will be required!';
			case 'iSee': return 'I see';
			case 'confirm': return 'Confirm';
			case 'cancel': return 'Cancel';
			case 'updateAvailable': return 'An app update is available';
			case 'absentDescriptUpdate': return 'There is no description of the update';
			case 'updateNewDescript': return 'What\'s new in this version?';
			case 'goToUpdate': return 'Go to Update';
			case 'later': return 'Later';
			case 'barcodeAbbreviated': return 'Bc.';
			case 'articleAbbreviated': return 'Art.';
			case 'inputType': return 'Input type';
			case 'closeClickEmptySpace': return 'To close, click on any empty space';
			case 'simplifiedMode_1': return 'Simplified mode';
			case 'simplifiedMode_2': return ', it is enough to enter the last 5 digits of the barcode';
			case 'manualInput': return 'Manual input';
			case 'close': return 'Close';
			case 'releaseButtonTopToClose': return 'Release ▲ to close';
			case 'enterPinCodePhysicalButtons': return 'Enter the pin code using the physical buttons of the terminal';
			case 'clear': return 'Clear';
			case 'specifyArea': return 'Specify the scan area where you are going to scan';
			case 'zoneIsNotSpecify': return 'The zone is not specified';
			case 'scanningArea': return 'Scanning area';
			case 'failedProductData': return 'Failed to get product information.';
			case 'scanProductShowTheScreen': return 'Scan the product shown on the screen';
			case 'scannedWrongCode': return 'You scanned the wrong code';
			case 'scanCurrentProductInfo': return 'Scan the shown dimensions for confirmation. Switch between products using the arrows, down arrow - zoom in on the photo!';
			case 'releaseTheButtonClose': return 'Release the button to collapse';
			case 'couldNotFindItemInCurrentProcess': return 'Could not find this product in the current process';
			case 'maxItemScanned': return 'The maximum number of items scanned';
			case 'startScanning': return 'Start scanning';
			case 'continueScanning': return 'Continue scanning';
			case 'infoItemLastProduct': return 'Here you will see information about the last scanned product!';
			case 'infoPlacementScanned': return 'Scan the product and you will be shown the location options for placement!';
			case 'moduleCell': return 'Cell';
			case 'modulePackage': return 'Package';
			case 'orderNumber': return 'Order and packaging number';
			case 'packagingID': return 'Packaging ID';
			case 'modulePlacement': return 'Placement';
			case 'moduleSettings': return 'Settings';
			case 'forConfirmation': return 'For confirmation';
			case 'onPackaging': return 'On the packaging';
			case 'withdrawalFromTheReserve': return 'Withdrawal from the reserve';
			case 'toSend': return 'To send';
			case 'moduleCreateImplementation': return 'Create an implementation';
			case 'createImplementation': return 'Create an implementation';
			case 'attachedProducts': return 'Attached products';
			case 'requisites': return 'Requisites';
			case 'motionCreationFormValidationCreateImplementation': return 'Before creating an implementation, make sure that everything is selected correctly. You are personally responsible for the incorrect implementation!';
			case 'errorDataAuth': return 'Error in generating data received during authorization';
			case 'inProgressUserSettingDevice': return 'Customizing\n the device';
			case 'inProgressUserSettingDeviceDescript': return 'Please do not disconnect the device, in order to avoid the crash of the application!';
			case 'checkClearDbError': return 'The database could not be converted. Try again in the settings or contact technical support!';
			case 'checkUpdateBaseError': return 'An error occurred while updating the nomenclature database. Try again in the settings or contact technical support!';
			case 'unableRequestAnUpdateFromServer': return 'Unable to request an update from the server';
			case 'requestTimeOut': return 'The waiting time has been exceeded. There is no internet connection or problems on the server side!';
			case 'more': return 'More';
			case 'errorDetails': return 'Error Details';
			case 'isNoDetailedError': return 'There is no detailed description of the error';
			case 'waitingTimeExceed': return 'The waiting time has been exceeded. Download canceled!';
			case 'updateAndInstall': return 'Update and install';
			case 'updateAndSave': return 'Update and save';
			case 'uploadWait': return 'Uploading';
			case 'checkingForAppUpdates': return 'Checking for app updates';
			case 'checkingForAppUpdatesDescript': return 'We are looking for the latest available updates that suit you according to the parameters';
			case 'checkingForBaseProductUpdates': return 'Checking the database';
			case 'checkingForBaseProductUpdatesDescript': return 'Uploading information on the current product database on the device';
			case 'noUpdateAvailable': return 'No updates available';
			case 'requirementsSelectType': return 'Requirements of the selected type';
			case 'requirementsSelectTypeDescript': return 'For the selected type of movement, additional data is required.';
			case 'codeIsNotePackage': return 'The code is not from the packaging';
			case 'codeIsNoteCell': return 'The code is not from the cell';
			case 'codeIsNoteWarehouse': return 'The code is not from the warehouse';
			case 'codeIsNoteWorkArea': return 'The code is not from the work area';
			case 'scanPackage': return 'Scan the package';
			case 'scanCell': return 'Scan the cell';
			case 'selectPackageMovingTypeFromCell': return 'Select the cell from which you want to move the item';
			case 'selectPackageMovingTypeFromPackage': return 'Select the packaging from which you want to move the goods';
			case 'selectPackageMovingTypePackage': return 'Select the package you are going to move';
			case 'cellLocatedAnotherWarehouse': return 'The cell is located in another warehouse';
			case 'autoSetPackageMovingError': return 'Automatic presentation of packaging canceled';
			case 'autoSetCellMovingError': return 'Auto-presentation of the cell has been canceled';
			case 'packageIsNotConditionMoving': return 'Packaging is not suitable for creating a move';
			case 'packageContentEmptyMoving': return 'The contents of the package are empty or could not be obtained!';
			case 'packageItemsEmpty': return 'The contents of the package are empty or could not be retrieved';
			case 'invalidCellData': return 'Invalid cell data in the code. Maybe the code is outdated!';
			case 'invalidPackageData': return 'Incorrect packaging data in the code. Maybe the code is outdated!';
			case 'invalidWorkAreaData': return 'Invalid work zone data in the code. Maybe the code is outdated!';
			case 'invalidWarehouseData': return 'Incorrect warehouse data in the code. Maybe the code is outdated!';
			case 'selectTypeMovementTitle': return 'Choosing the type of movement';
			case 'selectTypeMovementDescript': return 'Select the type of movement from the available ones. When changing, the rest of the form fields are cleared!';
			case 'type': return 'Type';
			case 'typeMovementNotSelected': return 'The type of movement is not selected';
			case 'noCellSelected': return 'The cell from which you plan to move is not selected';
			case 'noFromPackageSelected': return 'The package from which you plan to move is not selected';
			case 'noMovePackageSelected': return 'The package you plan to move has not been selected';
			case 'movingSelectCell': return 'Select a cell or change the type of movement';
			case 'movingSelectPackage': return 'Choose a package or change the type of movement';
			case 'cellDescriptInModule': return 'Press the physical button (F1) on the terminal to immediately open the available actions on the cell, if any.';
			case 'content': return 'Content';
			case 'problems': return 'Problems';
			case 'reserve': return 'Reserve';
			case 'invalidReserve': return 'Invalid reserve';
			case 'incorrectContentCell': return 'Incorrect content';
			case 'incorrectProductsCell': return 'Incorrect products';
			case 'lastAction': return 'Last action';
			case 'packageMovingWaitTitle': return 'Waiting for acceptance';
			case 'packageArchive': return 'Packaging in the archive';
			case 'openAnotherPackage': return 'Open another package';
			case 'confirmChangePackage': return 'Confirm that you want to open another package';
			case 'openAnotherOrder': return 'Open another order';
			case 'confirmChangeOrder': return 'Confirm that you want to open another order';
			case 'openAnotherCell': return 'Open another cell';
			case 'confirmChangeCell': return 'Confirm that you want to open another cell';
			case 'reloadPackageError': return 'Could not get up-to-date packaging data. Try to scan again!';
			case 'reloadCellError': return 'Could not get up-to-date cell data. Try to scan again!';
			case 'reloadLogisticsOrderError': return 'Could not get up-to-date task data on the order. Try restarting!';
			case 'confirmDisbandPackage': return 'Do you really want to disband the packaging?';
			case 'confirmZeroingCell': return 'Do you really want to reset the contents of the cell?';
			case 'dataIrrelevant': return 'The data is out of date';
			case 'whatDoesMean': return 'What does it mean?';
			case 'packageIrrelevantDescript': return 'When updating the data, it was not possible to get new packaging data. Try to scan the package again!';
			case 'cellIrrelevantDescript': return 'When updating the data, it was not possible to get new cell data. Try to scan the cell again!';
			case 'logisticsOrderIrrelevantDescript': return 'When updating the data, it was not possible to get new data about the task on the order. Try again!';
			case 'incorrectItemsCellDescript': return 'The contents of the cell contain goods with a negative balance!';
			case 'incorrectProductsCellDescript': return 'Some products are in a cell, without SHK codes. You need to contact the administrators to fix it! Show problematic products?';
			case 'packageLocation': return 'Packaging location';
			case 'packageLocationDescript': return 'Indicates where the package is located in the system';
			case 'cellLocation': return 'Location of the cell';
			case 'cellLocationDescript': return 'Indicates where the cell is located in the system';
			case 'packageScanNotify': return 'Scan the packaging ID shown on the QR code';
			case 'transitStorageOrderScanNotify': return 'Scan the barcode of the order in transit storage';
			case 'cellScanNotify': return 'Scan the cell ID shown on the QR code';
			case 'last30actionPackage': return 'History of recent user actions on packaging. The last 30 of all actions are displayed!';
			case 'last30actionCell': return 'History of recent user actions on cell. The last 30 of all actions are displayed!';
			case 'failedLogList': return 'Failed to get a list of products from the action';
			case 'updateDataQuest': return 'Update the data?';
			case 'changeDataPackage': return 'Perhaps the packaging data has changed, do you want to update the data?';
			case 'changeDataCell': return 'Perhaps the cell data has changed, do you want to update the data?';
			case 'cellWhichPlacePackage': return 'The cell in which to place the package!';
			case 'cellMoveProductTo': return 'The cell to move the product to';
			case 'whichTakeOutGoods': return 'In which to take out the goods';
			case 'whichAttachCurrentProcess': return 'Which to attach to the current process';
			case 'addToPackage': return 'Add to the package';
			case 'addToPackageDescript': return 'Confirm to add the product to the package';
			case 'correctionCell': return 'Adjust the cell';
			case 'correctionCellDescript': return 'Confirm to correct the cell';
			case 'moveToAnotherCell': return 'Move to a cell';
			case 'moveToAnotherCellDescript': return 'Confirm to select the cell to move to';
			case 'takeToPackageFromCell': return 'Put it in the package';
			case 'takeToPackageFromCellDescript': return 'Confirm to put in the package';
			case 'putCell': return 'Add to the cell';
			case 'putCellDescript': return 'Confirm to add the product to the cell';
			case 'confirmPack': return 'Confirm the packaging';
			case 'confirmPackDescript': return 'Confirm that you have packed all the goods';
			case 'tradingHallSaveToReport': return 'Save to Report';
			case 'tradingHallSaveToReportDescript': return 'Confirm to save to today\'s showcase report';
			case 'takeCell': return 'Remove from the cell';
			case 'takeCellDescript': return 'Confirm to take the item out of the box';
			case 'removeFromPackage': return 'Remove from packaging';
			case 'removeFromPackageDescript': return 'Confirm to take the goods out of the package';
			case 'noGoodsInPackage': return 'There are no goods in the package';
			case 'couldNotGetPlacementItems': return 'Could not get information for the location of the goods';
			case 'placeProducts': return 'Place products';
			case 'placeProductsDescript': return 'Confirm to place the products in the cells';
			case 'selectKeyboardNotify': return 'You can select an item by clicking the corresponding number on the device';
			case 'formatDate1': return 'dd MMM in HH:mm';
			case 'formatDate2': return 'Time in HH:mm';
			case 'acceptPackageConfirm': return 'By accepting the package with all the contents, you take responsibility that you have checked the physical contents with the system!';
			case 'acceptPackageBtn': return 'Accept the packaging';
			case 'openLinkedDocument': return 'Open a linked document';
			case 'acceptPackageHelp': return 'You can immediately accept the package with all its contents. If the contents do not converge, perform the acceptance manually';
			case 'failedToSelectScanMode': return 'Failed to select the scan mode';
			case 'failedGetPackage': return 'Failed to get packaging information';
			case 'packageIsNotProcessMovingCurrentWarehouse': return 'The package is not in the process of being moved to the current warehouse';
			case 'confirmCancellation': return 'Confirm cancellation';
			case 'confirmCancellationDescript': return 'Do you really want to undo the last action in the current process? It will be impossible to cancel the actions!';
			case 'barcode': return 'Barcode';
			case 'article': return 'Article';
			case 'size': return 'Size';
			case 'cell': return 'Cell';
			case 'matrix': return 'Matrix';
			case 'yes': return 'Yes';
			case 'no': return 'No';
			case 'successRollback': return 'The scan was successfully canceled';
			case 'errorRollback': return 'Scan failed to cancel';
			case 'couldGetInfoLastScan': return 'Could not get information on the last scan';
			case 'zeroingProduct': return 'Zeroing the product';
			case 'zeroingProductDescript': return 'Do you want to clear all the scanning processes of this product?';
			case 'positionSuccessReset': return 'The position was successfully reset';
			case 'positionErrorReset': return 'The position could not be reset';
			case 'pinch': return 'Pinch';
			case 'viewPhotoCurrentProduct': return 'open a photo of the current product';
			case 'cleanProcessConfirm': return 'Cleaning up the process';
			case 'cleanProcessConfirmDescript': return 'Do you really want to clear the scan in the whole process? All current data will be permanently deleted!';
			case 'couldExtractBarcodeFromMatrix': return 'Couldn\'t extract barcode from matrix';
			case 'couldFindBarcodeInDb': return 'Couldn\'t find this barcode in the database';
			case 'scanOfferedProduct': return 'Scan the offered product';
			case 'cellAutoClosed': return 'The cell is automatically closed, all products are scanned';
			case 'closeOpenCell': return 'Close the open cell';
			case 'requiredScanCodeCell': return 'It is required to scan the QR code of the cell';
			case 'cellIsNotAvailable': return 'This cell is not available';
			case 'cellWasOpen': return 'The cell was open';
			case 'cellWasClosed': return 'The cell was closed';
			case 'scanOfferedProductOrCurrentCellToClose': return 'Scan the offered product or the current cell to close it!';
			case 'collectAllRequiredItemsFromCell': return 'Collect all the required items from this cell or scan the cell to close it!';
			case 'scanSuggestedCell': return 'Scan the suggested cell, follow the suggested route';
			case 'cellOpenForCollection': return 'Open for collection';
			case 'addressCollectionDoneDescript': return 'In the process of collecting, there are no positions left that you need to collect. The process is fully assembled or an error has occurred!';
			case 'missingTheCell': return 'Missing in the cell';
			case 'requiredScanBarcodeProduct': return 'It is required to scan the barcode of the product';
			case 'positionSelectedPlaceCell': return 'The position is selected, place it in the cell';
			case 'placementDoneDescript': return 'In this process, there are no products left for placement. All products have been placed or an error has occurred!';
			case 'accommodationOptions': return 'Accommodation options';
			case 'placementNoRecommend': return 'There are no recommendations';
			case 'placementRecommendedCells': return 'These cells contain this product. You can place the product in any of these cells, or in any other';
			case 'placementNotRecommendedCells': return 'For this product, there is no recommendation on placement. You can place the goods in any cell in the warehouse!';
			case 'collectionDoneDescript': return 'There are no positions left in the document that you need to scan. The document is fully scanned or an error has occurred!';
			case 'skip': return 'Skip';
			case 'defaultDoneDescript': return 'There are no positions left in the process that you need to scan. The process is fully scanned or an error has occurred!';
			case 'confirmAbsentCollection': return 'Confirm that you have not physically found the remainder in the cell. The cell will be corrected, the reserve will be reassigned!';
			case 'absentNotConfirmedRequest': return 'The result of the request could not be verified. Unavailable units have been removed from the collection, you can continue. After the collection is completed, you will see a notification.';
			case 'processUnconfirmedProducts': return 'There are unconfirmed products';
			case 'processUnconfirmedProductsDescript': return 'In the current process, there are positions that were excluded in the course of work. After restarting the process, positions may appear in the process!';
			case 'existScannedContinue': return 'You take responsibility by leaving the previous scan, in the current process';
			case 'existScannedClearDb': return 'This process will be completely cleared of all scanning processes in it';
			case 'blockIsExistScannedProcess': return 'There are scanned positions';
			case 'blockIsExistScannedProcessDescript': return 'There are scanned products in the current process. Continue working or clear the scanning process';
			case 'itemAlreadyBeenScanned': return 'This article/size has already been scanned';
			case 'skipCollectingNotify': return 'Remaining units . the goods were temporarily excluded from the current collection. Go on!';
			case 'skipCollectingConfirm': return 'The product will be temporarily removed from the collection route. The missed item will appear again after sending or reloading';
			case 'search': return 'Search';
			case 'backToSearch': return 'Back to Search';
			case 'searchTitle': return 'Search';
			case 'searchResult': return 'Search results';
			case 'searchResultTaskDocumentDescript': return 'Click on the found document to go to it or return to the search';
			case 'searchTaskDocumentDescript': return 'Enter the document number. If it is found, it will be displayed in the search results!';
			case 'searchParameters': return 'Search Parameters';
			case 'searchParametersDescript': return 'These parameters affect the search result';
			case 'year': return 'Year';
			case 'enterFullDocumentNumberToSearch': return 'Enter the full document number to search for';
			case 'searchByCurrent': return 'Search by current';
			case 'searchByOther': return 'Search by other';
			case 'autoSubmissionOfParametersCanceled': return 'Auto-submission of parameters canceled';
			case 'selectedTypeIsNotAvailable': return 'The selected type is not available';
			case 'changeMovingType': return 'When you change the type of movement, all other parameters will be cleared!';
			case 'articleSizePrice': return 'Article - size / price';
			case 'noDocumentToCalculateResult': return 'There are no documents to calculate the result';
			case 'acceptPackageBeforeNotify': return 'Make sure as much as possible that the contents of the package in the system converge with the physical!';
			case 'from': return 'From';
			case 'status': return 'Status';
			case 'relatedDocument': return 'Related document';
			case 'orderStatus': return 'Order status';
			case 'operation': return 'Operation';
			case 'cancelled': return 'Cancelled';
			case 'active': return 'Active';
			case 'acceptance': return 'Acceptance';
			case 'moving': return 'Moving';
			case 'placement': return 'Placement';
			case 'collectionRoute': return 'Collection route';
			case 'actionsProcess': return 'Actions on the process';
			case 'confirmSelectCellAddressCollection': return 'The current open cell will be closed before opening the selected one!';
			case 'thereIsNoRoute': return 'There is no route';
			case 'currentLastCell': return 'Current last cell';
			case 'currentCell': return 'Current cell';
			case 'currentProposedCellCurrentCollection': return 'Current or proposed cell, in the current collection';
			case 'followingRoute': return 'Following the route';
			case 'followingRouteDescript': return 'Click on the cell to change the route relative to the selected cell';
			case 'dateTime': return 'Date and time';
			case 'notCorrectScanExtra': return 'There are no scans that need to be canceled';
			case 'correctScanExtraDescript': return 'Cancel each scan separately by clicking on the item and confirming the action. The cancellation of the action must be accompanied by the return of the physical goods to the place!';
			case 'extraScans': return 'Extra scans';
			case 'stateExtraScanTitle': return 'Solve the problem';
			case 'stateExtraScanCorrectionOptions1': return 'There are saved scanned products that are missing in the current process. To continue working, you need to delete unnecessary scans or clear the entire process!';
			case 'stateExtraScanCorrectionOptions2': return 'There are many saved scanned items that are missing in the current process. To continue, you need to clear the process of all scans!';
			case 'clearResume': return 'Clear and continue';
			case 'clearExtra': return 'Clear the excess';
			case 'unableToCheckUpdate': return 'Unable to check the update';
			case 'unableToCheckUpdateDescript': return 'You have a consolidated warehouse. First select a warehouse or work area to check for updates!';
			case 'baseNomenclature': return 'The base of the nomenclature';
			case 'baseNomenclatureEmpty': return 'The nomenclature base is empty';
			case 'baseNomenclatureEmptyDescript': return 'Download required, for further work';
			case 'selectLangDescript': return 'Select your preferred language for working with the terminal. You can change it at any time!';
			case 'unlock': return 'Unlock';
			case 'processUnlockDescript': return 'Click to unlock the current process.';
			case 'confirmProcessUnlock': return 'When unblocked, the current scan will be cleared and exited!';
			case 'aboutTheApp': return 'About the app';
			case 'disbanded': return 'Disbanded';
			case 'shipped': return 'Shipped';
			case 'combineCell': return 'In cell';
			case 'expectation': return 'Expectation';
			case 'applicationVersion': return 'Application Version';
			case 'apiVersion': return 'API Version';
			case 'theme': return 'Theme';
			case 'fontSize': return 'Font Size';
			case 'light': return 'Light';
			case 'dark': return 'Dark';
			case 'standard': return 'Standard';
			case 'large': return 'Large';
			case 'veryLarge': return 'Very large';
			case 'personalizationApplication': return 'Personalization of the application';
			case 'personalizationApplicationDescript': return 'Adjust the parameters as you like!';
			case 'userSettings': return 'User Settings';
			case 'userSettingsDescript': return 'Change your account settings';
			case 'unlockAllDocuments': return 'Unlock all documents';
			case 'unlockAllDocumentsDescript': return 'Unlock all documents blocked from this terminal!';
			case 'errorSavePersonalizingSetting': return 'Your user settings could not be saved!';
			case 'confirmUnlockAll': return 'When unlocking all documents, the scanning database will be cleared!';
			case 'repeatBackgroundTaskError': return 'Repeat request execution. There will be an attempt to re-execute the request.';
			case 'timeIsNotDefined': return 'The time is not defined';
			case 'startTyping': return 'Start typing';
			case 'listOfDocuments': return 'List of documents';
			case 'acceptancePackageIdScan': return 'Scan the packing ID of the move. Or go to the list of documents!';
			case 'availability': return 'Availability';
			case 'transitStorage': return 'Transit storage';
			case 'logistics': return 'Logistics';
			case 'send': return 'Send';
			case 'createMoveBasedThisDocument': return 'Creating a move based on this document!';
			case 'identificationOfMovement': return 'Identification of movement';
			case 'identificationOfMovementDescript': return 'Scan the free packaging ID and secure it after creating the move!';
			case 'failedToClearTheMoveProcess': return 'Failed to clear the move process';
			case 'selectKeyboardHelp': return 'Press the button on the terminal corresponding to the serial number of the item!';
			case 'selectTypeMove': return 'Select the type of movement';
			case 'warning': return 'Warning';
			case 'movingFormWarningPreparedOrSaveData': return 'Some prepared or saved data is not suitable for creating a move';
			case 'unknownStatus': return 'Unknown status';
			case 'logisticHistoryEmpty': return 'The history of the movement is empty';
			case 'logisticUndefinedStatus': return 'Status unknown';
			case 'sender': return 'Sender';
			case 'recipient': return 'Recipient';
			case 'packageProcessMoving': return 'In the process of moving';
			case 'shipFromWarehouse': return 'Ship from warehouse';
			case 'recentMovementMovementsPackageExternal': return 'Recent movement movements';
			case 'client': return 'Client';
			case 'packageLeaveWarehouse': return 'The packaging left the warehouse and was closed';
			case 'confirmPackageLeaveWarehouse': return 'Confirm the shipment of the package from the current warehouse';
			case 'externalMovingStatusUnknown': return 'Unknown status';
			case 'externalMovingStatusWait': return 'Waiting for transportation';
			case 'externalMovingStatusWay': return 'Sent, on the way';
			case 'externalMovingStatusArrived': return 'Arrived at the receiving warehouse';
			case 'externalMovingNoMovementsLocations': return 'There are no movements movements';
			case 'location': return 'Location';
			case 'leftLocation': return 'Left location';
			case 'availableActionsInCell': return 'Available actions on a cell';
			case 'availableActionsInPackage': return 'Available actions on packaging';
			case 'selectSearchOption': return 'Select a search option';
			case 'selectFilter': return 'Select a filter';
			case 'selectActionProcess': return 'Select an action on the process';
			case 'absent': return 'Absent';
			case 'changeAvatar': return 'Change avatar';
			case 'changeWarehouse': return 'Change warehouse';
			case 'cellBelongsAnotherWarehouse': return 'The cell belongs to another warehouse';
			case 'identiconInfo': return 'One of the main functions of the avatar is to work as an identifier of your account';
			case 'save': return 'Save';
			case 'selectAnother': return 'Choose another one';
			case 'avatar': return 'Avatar';
			case 'updateAvatarDescript': return 'The current avatar will be set for your profile';
			case 'ship': return 'Ship';
			case 'disband': return 'Disband';
			case 'moveToACell': return 'Move to a cell';
			case 'transitStorageOrderDisbandInfo': return 'The order was canceled in the system. It is required to disband from storage to the return cell!';
			case 'transitStorageOrderShipInfo': return 'The order is active. Shipment of the order from transit storage is required';
			case 'transitStorageConfirmShip': return 'Confirm the intention to ship the order from transit storage';
			case 'transitStorageConfirmDisband': return 'Confirm the intention of disbanding the order from transit storage to packaging';
			case 'orderIsExistsOperation': return 'The operation on this order in transit storage has been completed. There are no further actions!';
			case 'orderActionExpectedInTransitStorage': return 'An action is expected to be performed on this package in transit storage!';
			case 'combineInCellDescript': return 'To which you want to move the package';
			case 'hintOrderNumber': return 'Order number';
			case 'failedLoadOrderData': return 'Failed to load order data';
			case 'notAssigned': return 'Not assigned';
			case 'reasonRejection': return 'Reason for rejection';
			case 'logisticsConfirmCellTo': return 'All confirmed items will be moved to this cell';
			case 'rejectForAbsence': return 'Reject for absence';
			case 'nextPageError': return 'The following page could not be loaded. Try again!';
			case 'nextPageDone': return 'All data has been uploaded';
			case 'repeat': return 'Repeat';
			case 'logisticsOrderNotAssignedCell': return 'Not assigned to a cell';
			case 'products': return 'Products';
			case 'packages': return 'Packages';
			case 'taskDescription': return 'Task description';
			case 'logisticsAvailabilityTaskDescript': return 'It is required to collect and confirm the transfer of things to the cell with the order, or reject the goods with the selected reason!';
			case 'logisticsWithdrawTaskDescript': return 'It is required to collect and confirm the transfer of items from the order box to the return box';
			case 'logisticsPackTaskDescript': return 'Scanning of the contents of each package is required to confirm readiness for shipment';
			case 'logisticsSendTaskDescript': return 'It is required to scan the package to confirm the shipment of the package by order';
			case 'logisticsTabsDescript': return 'Be careful when completing tasks. Your actions are not subject to cancellation!';
			case 'tabs': return 'Tabs';
			case 'logisticsTabsAvailableTask': return 'Available tasks';
			case 'taskList': return 'Task list';
			case 'rejectWithReason': return 'Reject with reason';
			case 'skipProduct': return 'Skip the product';
			case 'findAnotherCell': return 'Find another cell';
			case 'reasonReject_1': return 'Missing button';
			case 'reasonReject_2': return 'Lightning defect';
			case 'reasonReject_3': return 'The presence of clues';
			case 'reasonReject_4': return 'The presence of spots';
			case 'reasonReject_5': return 'Seam defect';
			case 'reasonReject_6': return 'The presence of pellets';
			case 'reasonReject_7': return 'Strap defect';
			case 'reasonReject_8': return 'Presence of scratches or creases';
			case 'reasonReject_9': return 'Mounting defect';
			case 'reasonReject_10': return 'The presence of an alarm hole';
			case 'reasonReject_11': return 'The presence of marriage';
			case 'reasonReject_12': return 'Not for sale in an online Store';
			case 'reasonReject_13': return 'The product is missing';
			case 'rejectSelectTitle': return 'Select the reason for rejection';
			case 'confirmRejection': return 'Confirm rejection';
			case 'rejectItemIsNotPossible': return 'Position deviation is not possible';
			case 'rejectItemIsNotPossibleMessage': return 'The product, upon confirmation of availability, was not confirmed through the TSD';
			case 'confirmItemIsNotPossible': return 'Position confirmation is not possible';
			case 'confirmItemIsNotPossibleMessage': return 'The product, upon confirmation of availability, was not confirmed through the TSD';
			case 'confirmPackageIsNotPossible': return 'Package confirmation is not possible';
			case 'confirmPackageIsNotPossibleMessage': return 'Some or all of the goods in the package, upon confirmation of availability, were not confirmed through the TSD';
			case 'notAvailableProductAccessList': return 'There is no list of available products';
			case 'scanThePackageSendDescript': return 'Scan to confirm the sending of this package';
			case 'scanThePackagePackDescript': return 'Scan to confirm the packaging of this package';
			case 'cellSearch': return 'Cell Search';
			case 'cellSearchDescript': return 'Wait until the product location search is completed';
			case 'logisticsConfirmLocationCell': return 'This cell presumably contains the current product';
			case 'logisticsConfirmNotLocationCell': return 'Could not find the location of the goods in the cells in the warehouse';
			case 'notFound': return 'Not found';
			case 'startSearch': return 'Start the search';
			case 'searchFrom3Char': return 'Search from 3 characters';
			case 'nothingWasFound': return 'Nothing was found';
			case 'invalidOrderPackageCodeScanned': return 'Invalid order package code scanned';
			case 'requiredFullScanned': return 'It is required to scan all the contents in the process';
			case 'logisticsOrderNotAccessConfirmWithoutCell': return 'The content and confirmation are not available in this task!';
			case 'logisticsConfirmItemNeedStepWait': return 'Wait';
			case 'logisticsConfirmItemNeedStepWaitAction': return 'Waiting for action';
			case 'logisticsConfirmItemNeedActionScanCell': return 'Scan the cell';
			case 'logisticsConfirmItemNeedActionScanItem': return 'Scan the product';
			case 'scanCellSpecifiedLocation': return 'Scan the cell specified in the location';
			case 'noScanningRequiredFollowSteps': return 'No scanning is required. Follow the suggested steps';
			case 'qtyUnits': return '{{qty}} ед.';
			case 'confirmHaveReturnedCell': return 'You confirm that you have returned {{article}} / {{size}} to the cell {{cell}}';
			case 'confirmHaveReturned': return 'You confirm that you have physically removed {{article}} / {{size}} from the current process';
			case 'confirmHaveReturnedError': return 'Failed to cancel scanning of {{article}} / {{size}} in the current process';
			case 'confirmHaveReturnedSuccess': return 'Scanning {{article}} / {{size}} was canceled in the current process';
			case 'hiUser': return '{{emoji}} Hello, {{userName}}';
			case 'terminalID': return 'Terminal.ID: {{tid}}';
			case 'versionTsd': return 'Version TSD: {{name}} (api v. {{api}})';
			case 'ofData': return ' {{a}} of. {{b}} u.';
			case 'sizeNotRepresentedOnTheScreen': return 'Size \'{{size}}\' not represented on the screen';
			case 'updateVersion': return '{{emoji}} Version {{v}}';
			case 'upload': return 'Uploading {{value}} / {{total}} mb.';
			case 'currentAppLastAvailable': return 'The current version of the {{v}} app is the latest available version for you!';
			case 'savePercent': return 'Save {{percent}}%';
			case 'lastUpdateDb': return 'Last update: {{date}}';
			case 'quantity': return '{{emoji}} Quantity - {{qty}}';
			case 'addingGoodsToCell': return 'Adding products to a cell {{cellName}}';
			case 'removalGoodsFromCell': return 'Removal of goods from the cell {{cellName}}';
			case 'adjustmentCell': return 'Cell Adjustment {{cellName}}';
			case 'movingItemsFromCell': return 'Moving items from a cell {{cellName}}';
			case 'moveGoodsTheCell': return 'Move {{qty}} unit of goods to the cell {{cellTo}}';
			case 'removalGoodsFromCellInPackage': return 'Removal of goods from the cell {{cellName}} in the package';
			case 'takeToCellInPackage': return 'Take out {{qty}} units of goods from the cell {{cellFrom}} From to the package {{packageId}}';
			case 'selectWarehouseTitle': return 'Switch to {{name}}';
			case 'selectWorkAreaTitle': return 'Switch to the work area {{workareaName}} {{warehouseName}}';
			case 'packageId': return 'Package #{{id}}';
			case 'orderWithGrid': return 'Order #{{orderId}}';
			case 'scanThePackage': return 'Scan the package #{{packageId}}';
			case 'confirmRejectionMessage': return 'Confirm that you want to reject {{article}} / {{size}} because of - {{reason}}';
			case 'inCell': return 'Place the package in a cell {{cellName}}';
			case 'dateCreate': return 'Date of creation {{date}}';
			case 'qtyPieces': return '{{qty}} pc.';
			case 'departureWarehouse': return 'Where from {{warehouse}}';
			case 'placePackageInCell': return 'Place the package in a cell {{cell}}';
			case 'addingGoodsToPackaging': return 'Adding goods to the packaging {{packageId}}';
			case 'removalGoodsFromPackaging': return 'Removal of goods from packaging {{packageId}}';
			case 'placementGoodsFromPackaging': return 'Placement of goods from packaging {{packageId}}';
			case 'scanCellName': return 'Scan the cell {{cellName}}';
			case 'scannedInvalidCell': return 'It was required to scan the cell {{cellName}}';
			case 'requiredMatrix': return '{{article}} - {{size}}, need to scan the matrix';
			case 'alreadyMatrix': return '{{article}} - {{size}} have you already scanned this matrix';
			case 'barcodeFailedScan': return '{{barcode}}, failed to save scan!';
			case 'barcodeScanned': return '{{barcode}}, scanned!';
			case 'failedSaveScan': return '{{barcode}}, failed to save scan!';
			case 'itemPlaceInCell': return '{{article}} - {{size}}, place in {{cell}}\'';
			case 'itemPlaceInCellFailed': return '{{article}} - {{size}}, failed to post';
			case 'productPlacement': return 'Product placement';
			case 'productChecking': return 'Product checking';
			case 'repeatLogin': return 'Account confirmation completed\nPlease log in again';
			case 'lichiId': return 'Lichi ID';
			case 'onRegistered': return 'The account has been linked successfully\nPlease request login details from technical support';
			case 'toRegistration': return 'Register';
			case 'alreadyRegistered': return 'Account is already exists';
			case 'inStock': return 'In stock';
			case 'notInStock': return 'Not in stock';
			case 'price': return 'Price';
			case 'color': return 'Color';
			case 'codeIsNotProduct': return 'The code is not from the product';
			case 'invalidProductCodeType': return 'Invalid code type, scan the product code';
			case 'isMissing': return 'Is missing';
			case 'sale': return 'Sale';
			case 'leftCells': return 'Left - {{qty}} cls.';
			case 'inventoryCell': return 'Inventory of cell {{cellName}}';
			case 'inventoryCellScanNotify': return 'Scan the cell identifier depicted in the QR code for inventory purposes.';
			case 'inventoryCellScanNotifyDubai': return 'Scan the cell identifier depicted in the QR code for inventory purposes at Dubai warehouses.';
			case 'inventoryCellCorrection': return 'Calculate a cell';
			case 'inventoryCellConfirm': return 'Confirm the void';
			case 'inventoryCellZeroing': return 'Reset the cell';
			case 'executor': return 'Executor';
			case 'undefined': return 'Undefined';
			case 'confirmation': return 'Confirmation';
			case 'counting': return 'Counting';
			case 'result': return 'Result';
			case 'zeroing': return 'Zeroing';
			case 'inventoryNotCarriedOut': return 'The inventory has not been carried out';
			case 'inventoryCarriedOut': return 'Inventory completed';
			case 'inventoryCarriedOutWithError': return 'The inventory has been completed. There are discrepancies';
			case 'productCheckingScanNotify': return 'Scan the barcode of the product to check the product';
			case 'incorrectPincode': return 'Invalid PIN code\nthe PIN code must contain only numbers';
			default: return null;
		}
	}
}

extension on _StringsRu {
	dynamic _flatMapFunction(String path) {
		switch (path) {
			case 'warehouse': return 'Склад';
			case 'notSelected': return 'Не выбран';
			case 'notifyScanQrWarehouse': return 'Отсканируйте QR-код склада или рабочей зоны. Вы откроете модули, доступные для склада';
			case 'userID': return 'Пользователь.ID';
			case 'notificationCompletionWork': return 'Обязательно завершите работу, все запросы выполняются от вашего имени!';
			case 'finishJob': return 'Завершить работу';
			case 'requestCannotExecuted': return 'Запрос не может быть выполнен';
			case 'settings': return 'Настройки';
			case 'noModulesAvailable': return 'Нет доступных модулей';
			case 'noModulesAvailableDescript': return 'На этом складе нет доступных модулей для работы, смените склад или обратитесь в службу технической поддержки!';
			case 'selectWarehouse': return 'Выберите склад';
			case 'selectWarehouseDescript': return 'В вашем аккаунте отображается консолидированный склад. Просканируйте доступный склад, где вы будете работать!';
			case 'exitUserTitle': return 'Завершение работы';
			case 'exitUserMessage': return 'Вы действительно хотите завершить работу с терминалом?';
			case 'invalidCodeType': return 'Недопустимый тип кода';
			case 'invalidCodeFormat': return 'Неверный формат кода';
			case 'invalidAuthCodeType': return 'Неверный тип кода, отсканируйте свой личный qr-код';
			case 'invalidOrderPackageCodeType': return 'Неверный код с идентификатором заказа с пакетом';
			case 'invalidWarehouseWorkareaCodeType': return 'Неверный тип кода, отсканируйте код склада или зоны работы';
			case 'failedDecryptQrCode': return 'Не удалось расшифровать qr-code';
			case 'doesNotCodeTask': return 'Код несоответствует задаче';
			case 'probablyCode': return 'Вероятно код поврежден. Не удалось считать данные!';
			case 'selectWarehouseMessage': return 'Подтвердите, что вы действительно хотите переключиться на выбранный в данный момент склад';
			case 'selectWorkAreaMessage': return 'Подтвердите, что вы действительно хотите переключиться на выбранную зону';
			case 'language': return 'Русский';
			case 'calculation': return 'Расчет';
			case 'clearingDb': return 'Очистка базы данных';
			case 'updatingProductDb': return 'Обновление базы данных продуктов';
			case 'thereErrors': return 'Есть ошибки';
			case 'errors': return 'Ошибки';
			case 'done': return 'Готово';
			case 'onPageNotifyTitle': return 'Есть проблемы';
			case 'onPageNotifyMessage': return 'Некоторые шаги не удалось выполнить, пожалуйста, свяжитесь с разработчиком для получения разъяснений!';
			case 'checkingTerminal': return 'Проверка терминала';
			case 'notificationVerifyTerminal': return 'Не выключайте устройство во время проверки и обновления';
			case 'continueL': return 'Продолжить';
			case 'noDataAvailable': return 'Нет доступных данных';
			case 'consolidatedResult': return 'Консолидированный результат по всем активным документам в текущем модуле. Нажмите, чтобы обновить результат и документы';
			case 'activeDocuments': return 'Активные документы';
			case 'completedDocuments': return 'Завершенные документы';
			case 'unableOpenDocument': return 'Не удается открыть документ';
			case 'updateListDocumentTitle': return 'Обновление данных';
			case 'updateListDocumentMessage': return 'Обновить список документов?';
			case 'statusUploadCompletedDocuments': return 'Загрузка завершенных\nдокументов';
			case 'statusUploadingActiveDocuments': return 'Загрузка активных\nдокументов';
			case 'listCompletedDocuments': return 'Список выполненных документов';
			case 'listActiveDocuments': return 'Список активных документов';
			case 'listPackageContents': return 'Список содержимого упаковки';
			case 'thereNoDocuments': return 'Нет доступных документов';
			case 'contentsEmpty': return 'Содержимое пустое';
			case 'documents': return 'Документы';
			case 'barcodeAndArticle': return 'Штрихкод/артикул';
			case 'title': return 'Название';
			case 'history': return 'История';
			case 'outputHistory': return 'Вывод истории, текущего процесса, последовательного сканирования. Нажмите, чтобы просмотреть подробную информацию или выполнить действие!';
			case 'storyEmpty': return 'Эта история пуста';
			case 'listEmpty': return 'Список пуст';
			case 'endList': return 'Конец списка';
			case 'sortList': return 'Отсортируйте список или удалите выбранные фильтры';
			case 'added': return 'Добавленые';
			case 'unScanned': return 'Не отсканированные';
			case 'scanned': return 'Отсканированные';
			case 'all': return 'Все';
			case 'selectActionSelectedPosition': return 'Выберите действие в выбранной позиции!';
			case 'resetToZero': return 'Обнулить';
			case 'mistake': return 'Ошибка';
			case 'resetPositionWarning': return 'Позиция сброшена, но позиция в интерфейсе не может быть обновлена. Перезагрузите документ!';
			case 'list': return 'Список';
			case 'emptyList': return 'Пустой список';
			case 'motionCreationFormValidationCreateMoving': return 'Обязательно проверьте данные формы, перед созданием перемещения!';
			case 'createMove': return 'Создать перемещение';
			case 'fromDocumentCreateMove': return 'Из этого документа берутся товары для создания их перемещения на другой склад';
			case 'uploadingDataMove': return 'Загрузка данных\nдля перемещения';
			case 'goodsBeingMoved': return 'Перемещаемые товары';
			case 'simplifiedRelocation': return 'Упрощенное перемещение';
			case 'transferAutoAccepted': return 'Это перемещение будет автоматически принято на складе поступления!';
			case 'standardMovement': return 'Стандартное перемещение';
			case 'transferNeedAccepted': return 'Это перемещение необходимо будет принять на складе-получателе!';
			case 'warehouseRecipient': return 'Склад получатель';
			case 'departureWarehouseAuto': return 'Склад отправления устанавливается автоматически. \nВыберите склад поступления!';
			case 'choose': return 'Выбрать';
			case 'specify': return 'Укажите';
			case 'attach': return 'Прикрепите';
			case 'notAttach': return 'Не прикреплена';
			case 'scanProducts': return 'Сканировать товары';
			case 'selectProducts': return 'Выбрать товары';
			case 'notDataCreateMove': return 'Не удалось получить данные, необходимые для перемещения!';
			case 'notSortItemsErrorMove': return 'Не удалось отсортировать товары. Создание перемещения невозможно!';
			case 'clearingCurrentProcess': return 'Очистка текущего процесса';
			case 'confirmClearCurrentFormMove': return 'Подтвердите, что вы хотите очистить текущую форму перемещения!';
			case 'formTransferCleared': return 'Форма перемещения была очищена';
			case 'failedClearMove': return 'Не удалось очистить перемещение';
			case 'selectionGoodsMove': return 'Выбор товаров для перемещения';
			case 'returnCreationMove': return 'Вернуться к созданию перемещения';
			case 'backContinueCreatingMove': return 'Нажмите, чтобы вернуться и продолжить создание перемещения';
			case 'receiptWarehouse': return 'Склад поступления';
			case 'listProductCreateTransfer': return 'Список товаров для создания перемещения на другой склад!';
			case 'noReceivingWarehouseSelected': return 'Не выбран склад получатель';
			case 'noGoodsCreateMove': return 'Отсутствуют товары для создания перемещения';
			case 'errorFormingListProducts': return 'Ошибка в формировании списка товаров';
			case 'creatingMove': return 'Создание перемещения';
			case 'updateDb': return 'Обновить базу данных';
			case 'checkingDb': return 'Проверка базы данных';
			case 'gettingDb': return 'Получение данных';
			case 'noDataUploadedDb': return 'Данные не загружены';
			case 'getErrorAllProducts': return 'Не удалось получить данные по всем продуктам';
			case 'dataUpdateDb': return 'Данные обновлены';
			case 'updatedDb': return 'Данные обновлены, база данных содержит все доступные продукты';
			case 'noDataRecordedDb': return 'Данные не записаны';
			case 'writtenErrorDb': return 'Данные не удалось записать в локальную базу данных.';
			case 'database': return 'База данных';
			case 'removal': return 'Удаление';
			case 'clearDbConfirm': return 'Вы действительно хотите очистить всю локальную базу данных?';
			case 'localDbCleaned': return 'Локальная база данных была очищена и восстановлена';
			case 'failedClearDb': return 'Не удалось очистить базу данных';
			case 'restoreDb': return 'Восстановить базу';
			case 'checkingUpdate': return 'Проверка обновления';
			case 'languageLabel': return 'Язык';
			case 'failedLoadTradingFloorData': return 'Не удалось загрузить данные торгового зала';
			case 'failedLoadLogisticsTabData': return 'Не удалось загрузить данные разделов логистики';
			case 'uncertainGoods': return 'Неопределенные товары';
			case 'confirmOrPostTradingHall': return 'Подтвердите или разместите в торговой зале товары, которые представлены в этом списке';
			case 'calcTradingHall': return 'Расчет процента заполнения торгового зала на основе данных сканирования по остаткам на текущий день!';
			case 'scanHall': return 'Сканировать зал';
			case 'dataNotUpdated': return 'Данные не обновлены';
			case 'errorUpdatingDataTradingHall': return 'Произошла ошибка при обновлении данных, данные не актуальны. Попробуйте обновить вручную!';
			case 'scanAllEachProductsTradingHall': return 'Отсканируйте все товары на витрине, по одной единице каждого размерного ряда, чтобы проверить торговый зал.';
			case 'uploadingActiveDocuments': return 'Загрузка активных\nдокументов';
			case 'uploadingDataTabsLogistics': return 'Загрузка данных\n разделов';
			case 'uploadingLogisticsListAvailability': return 'Загрузка списка заказов\n с товарами на подтверждение';
			case 'uploadingLogisticsListWithdraw': return 'Загрузка списка заказов\n с товарами на снятие с резерва';
			case 'uploadingLogisticsListPack': return 'Загрузка списка заказов\n на упаковку';
			case 'uploadingLogisticsListSend': return 'Загрузка списка заказов\n с упаковками на отправку';
			case 'uploadingOrderData': return 'Загрузка данных\n заказа';
			case 'tradingHall': return 'Торговый зал';
			case 'invalidUserLogin': return 'Неверный логин пользователя';
			case 'userLogin': return 'Логин пользователя';
			case 'invalidPassword': return 'Неверный пароль';
			case 'password': return 'Пароль';
			case 'scanPersonalCodeAuth': return 'Отсканируйте свой персональный код\n для доступа к терминалу!';
			case 'invalidData': return 'Неверные данные';
			case 'authErrorTerminal': return 'Ошибка авторизации в терминале';
			case 'dataLoadedToCreateMove': return 'Данные загружаются для создания перемещения';
			case 'couldNotGetDocuments': return 'Не удалось получить эти документы!';
			case 'uploadingControlData': return 'Загрузка контрольных\nданных';
			case 'byCurrentWarehouse': return 'по текущему складу';
			case 'noControl': return 'Нет никакого контроля';
			case 'moveItemsAccepted': return 'Переместите товары, которые были приняты, но не перемещены на другой склад!';
			case 'control': return 'Контроль';
			case 'checkingForUpdates': return 'Проверка наличия обновлений';
			case 'problemUpdating': return 'Если у вас возникли проблемы с обновлением, напишите в службу технической поддержки';
			case 'updateDownloadFromServer': return 'Обновление загружается с сервера, после чего вам будет предложено его установить';
			case 'installUpdateOnlyAndroid': return 'Установка обновления в настоящее время возможна только для Android';
			case 'anErrorOccurredDownloadingInstall': return 'При загрузке и установке произошла ошибка';
			case 'updateCenterApp': return 'Центр обновления\nприложения';
			case 'reboot': return 'Перезагрузить';
			case 'clearProcess': return 'Очистить процесс';
			case 'setAreaTitle': return 'Вы не можете изменить зону';
			case 'setAreaMessage': return 'После начала сканирования, когда документ не пуст, вы не можете изменить область сканирования. Вы можете изменить его после отправки или очистки документа!';
			case 'scanSectionSuccessInstalled': return 'Раздел сканирования был успешно установлен';
			case 'failedSetScanArea': return 'Не удалось установить область сканирования';
			case 'productDbIsEmpty': return 'База данных товаров\nпуста';
			case 'stateEmptyProcess': return 'Работать с этим процессом\nневозможна';
			case 'stateBlocked': return 'Работа с процессом\nне допускается';
			case 'stateExistScanned': return 'Имеются данные\nсканирования';
			case 'stateExtraScanned': return 'Лишние сканирования\nв процессе';
			case 'stateStart': return 'Выполните условие\nперед началом работы';
			case 'followSuggestedConditions': return 'Следуйте предложенным условиям, чтобы начать';
			case 'zone': return 'Зона';
			case 'package': return 'Упаковка';
			case 'setZone': return 'Установите зону';
			case 'setPackage': return 'Прикрепите упаковку';
			case 'clickChangeArea': return 'Нажмите, чтобы изменить рабочую область!';
			case 'clickChangePackage': return 'Нажмите, чтобы прикрепить другую упаковку!';
			case 'scanError': return 'Ошибка сканирования';
			case 'awaitLastScan': return 'Предыдущее сканирование еще не было обработано до начала текущего.';
			case 'invalidUnreadableCode': return 'Недопустимый/нечитаемый код. Попробуйте еще раз или введите вручную!';
			case 'notBarcodeInDb': return 'Не удалось найти этот штрих-код в базе данных';
			case 'simplifiedManualInput': return 'Упрощенный ручной ввод';
			case 'productIsNotList': return 'Товара нет в списке';
			case 'positionIsNotScanList': return 'Этой позиции нет в списке сканирования, вы можете добавить ее. Подтвердите!';
			case 'positionMissingCurrentProcess': return 'Эта позиция отсутствует в текущем процессе';
			case 'positionAlreadyBeenScanned': return 'Эта позиция уже была отсканирована';
			case 'conditionsNotScan': return 'Условия не выполнены перед началом сканирования';
			case 'emptyProcess': return 'Пустой процесс';
			case 'youHaveNotScanned': return 'Вы ничего не отсканировали, пустой процесс не может быть отправлен!';
			case 'cancelingScan': return 'Отмена сканирования';
			case 'confirmCancelAction': return 'Подтвердите, что вы хотите отменить это действие';
			case 'actionCanceled': return 'Действие отменено';
			case 'couldNotCancelAction': return 'Не удалось отменить действие';
			case 'cancelingLastScan': return 'Отмена последнего сканирования';
			case 'confirmCancelLastScan': return 'Подтвердите, что вы хотите отменить последнее сканирование';
			case 'lastActionCanceled': return 'Последнее действие отменено';
			case 'couldUndoLastAction': return 'Не удалось отменить последнее действие';
			case 'zeroingPosition': return 'Обнуление позиции';
			case 'confirmResetPosition': return 'Подтвердите, что вы хотите сбросить эту позицию';
			case 'positionResetToZero': return 'Обнуление позиции';
			case 'failedResetPosition': return 'Не удалось обнулить позицию';
			case 'accessInNotProvided': return 'Доступ не предоставляется';
			case 'blockingDataIsUnknown': return 'Блокирующие данные неизвестны';
			case 'terminals': return 'Терминалы';
			case 'blockedDescript_one': return 'Проверить блокировку этого процесса не удалось. Повторите попытку позже или обратитесь в службу поддержки!';
			case 'blockedDescript_two': return 'Заблокировать этот процесс для вас не представлялось возможным. Повторите попытку позже или обратитесь в службу поддержки!';
			case 'blockedDescript_three': return 'Этот процесс заблокирован другим пользователем. Закройте процесс или найдите терминал и разблокируйте!';
			case 'updateDbScan': return 'Обновите базу данных';
			case 'updateDbScanDescript_1': return 'Обновите базу данных продуктов на терминале, перейдите к ';
			case 'updateDbScanDescript_2': return 'настройки - база данных - обновить. ';
			case 'updateDbScanDescript_3': return 'После этого процесс сканирования станет доступен!';
			case 'emptyProcessDescript_1': return 'Для этого сканирования требуются ';
			case 'emptyProcessDescript_2': return 'данные';
			case 'emptyProcessDescript_3': return ' который не удалось загрузить. Попробуйте еще раз или обратитесь в службу технической поддержки!';
			case 'confirmAndStart': return 'Подтвердите и запустите';
			case 'beforeStartActionsCorrect': return 'Прежде чем начать, убедитесь, что ваши действия правильны. Вы несете полную ответственность за свои действия.';
			case 'selectAction': return 'Выберите действие';
			case 'startConfirm': return 'Начать подтверждение';
			case 'listCurrentProcess': return 'Список текущего процесса';
			case 'outputContentsCurrentScanningProcess': return 'Вывод содержимого текущего процесса сканирования. Нажмите на позицию, чтобы выбрать действие!';
			case 'scanHistory': return 'История сканирования';
			case 'cancelAction': return 'Отменить действие';
			case 'cancelingLastActionHistory': return 'Отмена последнего действия в истории. Нажмите для отката или кнопку \'esc\' на терминале!';
			case 'mainAction': return 'Основное действие. Нажмите кнопку (ent)';
			case 'loadingDataProcess': return 'Загрузка данных\nпроцесса';
			case 'failedConvertItemsCreateMove': return 'Не удалось преобразовать элементы для создания перемещения!';
			case 'acceptMove': return 'Принять перемещение';
			case 'acceptOrder': return 'Принять заказ';
			case 'clickAcceptScannedItems': return 'Подтвердите, чтобы принять отсканированные элементы';
			case 'confirmAction': return 'Подтвердите действие!';
			case 'confirmAcceptCurrentScannedItems': return 'Вы действительно хотите принять текущие отсканированные элементы?';
			case 'sendStatement': return 'Отправить в ведомость';
			case 'assembleToOrder': return 'Собрать в заказ';
			case 'clickAssembleToShipmentOnMove': return 'Подтвердите, чтобы отправить данные в заказ на перемещение';
			case 'clickAssembleToShipmentOnOrder': return 'Подтвердите, чтобы отправить данные в заказ клиента';
			case 'clickSendInventoryData': return 'Подтвердите, чтобы отправить в ведомость инвентаризации';
			case 'confirmSendCurrentScannedItemsInventory': return 'Вы действительно хотите отправить текущие отсканированные товары в ведомость инвентаризации?';
			case 'saveReport': return 'Сохранить в отчет';
			case 'clickSendScanDataReport': return 'Подтвердите, чтобы отправить данные сканирования в отчет';
			case 'confirmYourIntention': return 'Подтвердите свое намерение';
			case 'confirmSendCurrentScannedItemsTradingHall': return 'Вы действительно хотите отправить текущие отсканированные товары в отчет торгового зала';
			case 'manual': return 'вручную';
			case 'scanning': return 'отсканировано';
			case 'unknown': return 'неизвестный';
			case 'reauthorizationRequired': return 'Требуется повторная авторизация';
			case 'terminalNotUsed': return 'Терминал не использовался более 30 минут. \nпотребуется повторная авторизация!';
			case 'groupAcceptanceTitle': return 'Приемка товара';
			case 'groupAcceptanceDescript': return 'Выберите подходящий тип приемки';
			case 'groupWarehouseMovementsTitle': return 'Перемещения на складе';
			case 'groupWarehouseMovementsDescript': return 'Создать или принять перемещение между складами';
			case 'groupShipmentTitle': return 'Сбор заказов';
			case 'groupShipmentTitleDescript': return 'Работа с заказами доступных типов';
			case 'moduleInventoryName': return 'Инвентаризация';
			case 'moduleInventoryCellName': return 'Инвентаризация ячеек';
			case 'moduleAcceptanceOnAdmissionOCName': return 'По заказу поставщика';
			case 'moduleShipmentOnMoveName': return 'На перемещение';
			case 'moduleShipmentOnOrderName': return 'Поставщиков';
			case 'moduleAcceptanceOnAdmissionOCFullName': return 'Приемка поступления по заказу поставщика';
			case 'moduleAcceptanceOnAdmissionWOCName': return 'По накладной';
			case 'moduleAcceptanceOnAdmissionWOCFullName': return 'Приемка поступления по накладной';
			case 'moduleCreateMove': return 'Создать перемещение';
			case 'moduleTradingHall': return 'Торговый зал';
			case 'moduleAcceptanceOnMoveName': return 'Принять перемещение';
			case 'moduleControlMovingName': return 'Контроль перемещения';
			case 'moduleControlPlacementName': return 'Контроль размещения';
			case 'moduleAcceptanceOnMoveFullName': return 'Приемка перемещения на склад';
			case 'moduleControl': return 'Контроль';
			case 'serverResponseParameterMissing': return 'Параметры ответа сервера отсутствуют';
			case 'invalidResponseFromServer': return 'Неверный ответ от сервера!';
			case 'requestHasNotBeenSent': return 'Запрос не был отправлен. Ошибка запроса!';
			case 'notification': return 'Уведомление';
			case 'updateCellNotify': return 'Данные ячейки будут обновлены, после выполнения последних действий!';
			case 'requestError': return 'Ошибка запроса';
			case 'sessionIsNotActive': return 'Сеанс не активен';
			case 'sessionRejected': return 'Сеанс был отклонен сервером потребуется повторная авторизация!';
			case 'iSee': return 'Понятно';
			case 'confirm': return 'Подтвердить';
			case 'cancel': return 'Закрыть';
			case 'updateAvailable': return 'Доступно обновление приложения';
			case 'absentDescriptUpdate': return 'Описание обновления отсутствует';
			case 'updateNewDescript': return 'Что нового в этой версии?';
			case 'goToUpdate': return 'Перейти к обновлению';
			case 'later': return 'Позже';
			case 'barcodeAbbreviated': return 'Шк.';
			case 'articleAbbreviated': return 'Арт.';
			case 'inputType': return 'Тип ввода';
			case 'closeClickEmptySpace': return 'Чтобы закрыть, нажмите на пустое место';
			case 'simplifiedMode_1': return 'Упрощенный режим';
			case 'simplifiedMode_2': return ', достаточно ввести последние 5 цифр штрих-кода';
			case 'manualInput': return 'Ручной ввод';
			case 'close': return 'Закрыть';
			case 'releaseButtonTopToClose': return 'Отпустите ▲ чтобы закрыть';
			case 'enterPinCodePhysicalButtons': return 'Введите pin-код с помощью физических кнопок терминала';
			case 'clear': return 'Очистить';
			case 'specifyArea': return 'Укажите область сканирования, в которой вы собираетесь выполнять сканирование';
			case 'zoneIsNotSpecify': return 'Зона не указана';
			case 'scanningArea': return 'Область сканирования';
			case 'failedProductData': return 'Не удалось получить информацию о товаре.';
			case 'scanProductShowTheScreen': return 'Отсканируйте товар, отображаемый на экране';
			case 'scannedWrongCode': return 'Вы отсканировали неправильный код';
			case 'scanCurrentProductInfo': return 'Отсканируйте показанные размеры для подтверждения. Переключайтесь между товарами с помощью стрелок, стрелка вниз - увеличьте фотографию!';
			case 'releaseTheButtonClose': return 'Отпустите кнопку, чтобы свернуть';
			case 'couldNotFindItemInCurrentProcess': return 'Не удалось найти данный товар в текущем процессе';
			case 'maxItemScanned': return 'Максимальное кол-во товара отсканировано';
			case 'startScanning': return 'Начните сканирование';
			case 'continueScanning': return 'Продолжить сканирование';
			case 'infoItemLastProduct': return 'Здесь вы увидите информацию о последнем отсканированном продукте!';
			case 'infoPlacementScanned': return 'Отсканируйте товар, и вам будет показаны варианты расположения для размещения!';
			case 'moduleCell': return 'Ячейка';
			case 'modulePackage': return 'Упаковка';
			case 'orderNumber': return 'Номер заказа и упаковки';
			case 'packagingID': return 'Упаковочный ИД';
			case 'modulePlacement': return 'Размещение';
			case 'moduleSettings': return 'Настройки';
			case 'forConfirmation': return 'На подтверждение';
			case 'onPackaging': return 'На упаковку';
			case 'withdrawalFromTheReserve': return 'Снятие с резерва';
			case 'toSend': return 'На отправку';
			case 'moduleCreateImplementation': return 'Создать реализацию';
			case 'createImplementation': return 'Создать реализацию';
			case 'attachedProducts': return 'Прикрепленные товары';
			case 'requisites': return 'Реквизиты';
			case 'motionCreationFormValidationCreateImplementation': return 'Перед созданием реализации, убедитесь, что все выбрано правильно. Вы несете личную ответственность за неправильную реализацию!';
			case 'errorDataAuth': return 'Ошибка формирования данных полученных при авторизации';
			case 'inProgressUserSettingDevice': return 'Пользовательская настройка\nустройства';
			case 'inProgressUserSettingDeviceDescript': return 'Пожалуйста не отключайте устройство, во избежании краха приложения!';
			case 'checkClearDbError': return 'Не удалось преобразовать базу данных. Попробуйте повторить в настройках или обратитесь в техподдержку!';
			case 'checkUpdateBaseError': return 'При обновлении базы номенклатуры произошла ошибка. Попробуйте повторить в настройках или обратитесь в техподдержку!';
			case 'unableRequestAnUpdateFromServer': return 'Не удается запросить обновление с сервера';
			case 'requestTimeOut': return 'Превышено время ожидания. Отсутствует интернет соединение или проблемы на стороне сервере!';
			case 'more': return 'Подробнее';
			case 'errorDetails': return 'Подробности ошибки';
			case 'isNoDetailedError': return 'Отсутствует подробное описание ошибки';
			case 'waitingTimeExceed': return 'Превышено время ожидания. Загрузка отменена!';
			case 'updateAndInstall': return 'Обновить и установить';
			case 'updateAndSave': return 'Обновить и сохранить';
			case 'uploadWait': return 'Загружаем';
			case 'checkingForAppUpdates': return 'Проверка обновления приложения';
			case 'checkingForAppUpdatesDescript': return 'Ищем последние доступные обновления, подходящее вам по параметрам';
			case 'checkingForBaseProductUpdates': return 'Проверка базы данных';
			case 'checkingForBaseProductUpdatesDescript': return 'Загружаем информацию по текущей базе товаров на устройстве';
			case 'noUpdateAvailable': return 'Нет доступных обновлении';
			case 'requirementsSelectType': return 'Требования выбранного типа';
			case 'requirementsSelectTypeDescript': return 'Для выбранного типа перемещения, требуются доп. данные';
			case 'codeIsNotePackage': return 'Код не от упаковки';
			case 'codeIsNoteCell': return 'Код не от ячейки';
			case 'codeIsNoteWarehouse': return 'Код не от склада';
			case 'codeIsNoteWorkArea': return 'Код не от зоны работ';
			case 'scanPackage': return 'Отсканируйте упаковку';
			case 'scanCell': return 'Отсканируйте ячейку';
			case 'selectPackageMovingTypeFromCell': return 'Выберите ячейку, из которой хотите переместить товар';
			case 'selectPackageMovingTypeFromPackage': return 'Выберите упаковку из которой хотите переместить товары';
			case 'selectPackageMovingTypePackage': return 'Выберите упаковку которую собираетесь переместить';
			case 'cellLocatedAnotherWarehouse': return 'Ячейка находится на другом складе';
			case 'autoSetPackageMovingError': return 'Автоподставление упаковки отменено';
			case 'autoSetCellMovingError': return 'Автоподставление ячейки отменено';
			case 'packageIsNotConditionMoving': return 'Упаковка не подходит для создания перемещения';
			case 'packageContentEmptyMoving': return 'Содержимое упаковки пустое или его не удалось получить!';
			case 'packageItemsEmpty': return 'Содержимое упаковки пустое или его не удалось получить';
			case 'invalidCellData': return 'Неверные данные ячейки в коде. Возможно код устарел!';
			case 'invalidPackageData': return 'Неверные данные упаковки в коде. Возможно код устарел!';
			case 'invalidWorkAreaData': return 'Неверные данные зоны работ в коде. Возможно код устарел!';
			case 'invalidWarehouseData': return 'Неверные данные склада в коде. Возможно код устарел!';
			case 'selectTypeMovementTitle': return 'Выбор типа перемещения';
			case 'selectTypeMovementDescript': return 'Выберите тип перемещения из доступных. При изменении, остальные поля формы очищаются!';
			case 'type': return 'Тип';
			case 'typeMovementNotSelected': return 'Не выбран тип перемещения';
			case 'noCellSelected': return 'Не выбрана ячейка из которой планируется перемещение';
			case 'noFromPackageSelected': return 'Не выбрана упаковка из которой планируется перемещение';
			case 'noMovePackageSelected': return 'Не выбрана упаковка, которую планируете переместить';
			case 'movingSelectCell': return 'Выберите ячейку или смените тип перемещения';
			case 'movingSelectPackage': return 'Выберите упаковку или смените тип перемещения';
			case 'cellDescriptInModule': return 'Нажмите физическую кнопку (F1) на терминале, чтобы сразу открыть доступные действия над ячейкой, если они есть.';
			case 'content': return 'Содержимое';
			case 'problems': return 'Проблемы';
			case 'reserve': return 'Резерв';
			case 'invalidReserve': return 'Проблемы с резервом';
			case 'incorrectContentCell': return 'Некорректное содержимое';
			case 'incorrectProductsCell': return 'Некорректные товары';
			case 'lastAction': return 'Последнее действие';
			case 'packageMovingWaitTitle': return 'Ожидание приемки';
			case 'packageArchive': return 'Упаковка в архиве';
			case 'openAnotherPackage': return 'Открыть другую упаковку';
			case 'confirmChangePackage': return 'Подтвердите что вы хотите открыть другую упаковку';
			case 'openAnotherOrder': return 'Открыть другой заказ';
			case 'confirmChangeOrder': return 'Подтвердите что вы хотите открыть другой заказ';
			case 'openAnotherCell': return 'Открыть другую ячейку';
			case 'confirmChangeCell': return 'Подтвердите что вы хотите открыть другую ячейку';
			case 'reloadPackageError': return 'Не удалось получить актуальные данные упаковки. Попробуйте отсканировать повторно!';
			case 'reloadCellError': return 'Не удалось получить актуальные данные ячейки. Попробуйте отсканировать повторно!';
			case 'reloadLogisticsOrderError': return 'Не удалось получить актуальные данные задачи по заказу. Попробуйте перезагрузить!';
			case 'confirmDisbandPackage': return 'Вы действительно хотите расформировать упаковку?';
			case 'confirmZeroingCell': return 'Вы действительно хотите обнулить содержимое ячейки?';
			case 'dataIrrelevant': return 'Данные неактуальные';
			case 'whatDoesMean': return 'Что это значит?';
			case 'packageIrrelevantDescript': return 'При обновлении данных, не удалось получить новые данные об упаковке. Попробуйте отсканировать упаковку заного!';
			case 'cellIrrelevantDescript': return 'При обновлении данных, не удалось получить новые данные о ячейке. Попробуйте отсканировать ячейку заного!';
			case 'logisticsOrderIrrelevantDescript': return 'При обновлении данных, не удалось получить новые данные о задаче по заказу. Попробуйте повторить!';
			case 'incorrectItemsCellDescript': return 'Содержимое ячейки содержит товары с отрицательным остатком!';
			case 'incorrectProductsCellDescript': return 'Некоторые товары в ячейке, без шк кодов. Требуется обратиться к администраторам, для исправления! Показать проблемные товары?';
			case 'packageLocation': return 'Местоположение упаковки';
			case 'packageLocationDescript': return 'Указывает где находится упаковка в системе';
			case 'cellLocation': return 'Местоположение ячейки';
			case 'cellLocationDescript': return 'Указывает где находится ячейка в системе';
			case 'packageScanNotify': return 'Отсканируйте упаковочный идентификатор изображенный на QR - коде';
			case 'transitStorageOrderScanNotify': return 'Отсканируйте штрих-код заказа в транзитном хранении';
			case 'cellScanNotify': return 'Отсканируйте идентификатор ячейки изображенный на QR - коде';
			case 'last30actionPackage': return 'История последних действий пользователей над упаковкой. Выводятся последние 30 всех действий!';
			case 'last30actionCell': return 'История последних действий пользователей над ячейкой. Выводятся последние 30 всех действий!';
			case 'failedLogList': return 'Неудалось получить список товаров из действия';
			case 'updateDataQuest': return 'Обновить данные?';
			case 'changeDataPackage': return 'Возможно данные упаковки изменились, хотите обновить данные?';
			case 'changeDataCell': return 'Возможно данные ячейки изменились, хотите обновить данные?';
			case 'cellWhichPlacePackage': return 'Ячейку, в которую расположить упаковку!';
			case 'cellMoveProductTo': return 'Ячейку, в которую переместить товар';
			case 'whichTakeOutGoods': return 'В которую вынести товар';
			case 'whichAttachCurrentProcess': return 'Которую прикрепить к текущему процессу';
			case 'addToPackage': return 'Внести в упаковку';
			case 'addToPackageDescript': return 'Подтвердите, чтобы внести товар в упаковку';
			case 'correctionCell': return 'Откорректировать ячейку';
			case 'correctionCellDescript': return 'Подтвердите, чтобы откорректировать ячейку';
			case 'moveToAnotherCell': return 'Переместить в ячейку';
			case 'moveToAnotherCellDescript': return 'Подтвердите, чтобы выбрать ячейку, куда перемещать';
			case 'takeToPackageFromCell': return 'Вынести в упаковку';
			case 'takeToPackageFromCellDescript': return 'Подтвердите, чтобы вынести в упаковку';
			case 'putCell': return 'Внести в ячейку';
			case 'putCellDescript': return 'Подтвердите, чтобы внести товар в ячейку';
			case 'confirmPack': return 'Подтвердить упаковку';
			case 'confirmPackDescript': return 'Подтвердите, что собрали все товары в упаковку';
			case 'tradingHallSaveToReport': return 'Сохранить в отчет';
			case 'tradingHallSaveToReportDescript': return 'Подтвердите, чтобы сохранить в сегодняшний отчет по витрине';
			case 'takeCell': return 'Вынести из ячейки';
			case 'takeCellDescript': return 'Подтвердите, чтобы вынести товар из ячейки';
			case 'removeFromPackage': return 'Вынести из упаковки';
			case 'removeFromPackageDescript': return 'Подтвердите, чтобы вынести товары из упаковки';
			case 'noGoodsInPackage': return 'В упаковке отсутствуют товары';
			case 'couldNotGetPlacementItems': return 'Не удалось получить информацию для расположения товаров';
			case 'placeProducts': return 'Разместить товары';
			case 'placeProductsDescript': return 'Подтвердите, чтобы разместить товары по ячейкам';
			case 'selectKeyboardNotify': return 'Выбрать пункт можно, нажав соответствующую цирфру на устройстве';
			case 'formatDate1': return 'dd MMM в HH:mm';
			case 'formatDate2': return 'Время в HH:mm';
			case 'acceptPackageConfirm': return 'Принимая упаковку со всем содержимым, вы берете ответственность что проверили физическое содержимое с системным!';
			case 'acceptPackageBtn': return 'Принять упаковку';
			case 'openLinkedDocument': return 'Открыть связанный документ';
			case 'acceptPackageHelp': return 'Вы можете сразу принять упаковку со всем ее содержимым. Если содержимое не сходится, осуществите приемку вручную';
			case 'failedToSelectScanMode': return 'Не удалось подобрать режим сканирования';
			case 'failedGetPackage': return 'Не удалось получить информацию об упаковке';
			case 'packageIsNotProcessMovingCurrentWarehouse': return 'Упаковка не находится в процессе перемещения на текущий склад';
			case 'confirmCancellation': return 'Подтвердите отмену';
			case 'confirmCancellationDescript': return 'Вы действительно хотите отменить последнее действие в текущем процессе? Отменить действия, будет невозможно!';
			case 'barcode': return 'Штрихкод';
			case 'article': return 'Артикул';
			case 'size': return 'Размер';
			case 'cell': return 'Ячейка';
			case 'matrix': return 'Матрица';
			case 'yes': return 'Да';
			case 'no': return 'Нет';
			case 'successRollback': return 'Сканирование было успешно отменено';
			case 'errorRollback': return 'Сканирование не удалось отменить';
			case 'couldGetInfoLastScan': return 'Не удалось получить информацию по последнему сканированию';
			case 'zeroingProduct': return 'Обнуление товара';
			case 'zeroingProductDescript': return 'Вы хотите очистить все процессы сканирования этого товара?';
			case 'positionSuccessReset': return 'Позиция была успешно обнулена';
			case 'positionErrorReset': return 'Позицию не удалось обнулить';
			case 'pinch': return 'Зажмите';
			case 'viewPhotoCurrentProduct': return 'открыть фото текущего товара';
			case 'cleanProcessConfirm': return 'Очистка процесса';
			case 'cleanProcessConfirmDescript': return 'Вы действительно хотите очистить сканирование во всем процессе? Все текущие данные будут удалены безвозвратно!';
			case 'couldExtractBarcodeFromMatrix': return 'Не удалось извлечь штрихкод из матрицы';
			case 'couldFindBarcodeInDb': return 'Не удалось найти данный штрихкод в базе';
			case 'scanOfferedProduct': return 'Отсканируйте предложенный товар';
			case 'cellAutoClosed': return 'Ячейка автоматически закрыта, все товары отсканированы';
			case 'closeOpenCell': return 'Закройте открытую ячейку';
			case 'requiredScanCodeCell': return 'Требуется отсканировать qr-код ячейки';
			case 'cellIsNotAvailable': return 'Данная ячейка не доступна';
			case 'cellWasOpen': return 'Ячейка была открыта';
			case 'cellWasClosed': return 'Ячейка была закрыта';
			case 'scanOfferedProductOrCurrentCellToClose': return 'Отсканируйте предложенный товар или текущую ячейку, чтобы закрыть ее!';
			case 'collectAllRequiredItemsFromCell': return 'Соберите все требуемые товары из этой ячейки или отсканируйте ячейку, чтобы ее закрыть!';
			case 'scanSuggestedCell': return 'Отсканируйте предложенную ячейку, следуйте по предложенному маршруту';
			case 'cellOpenForCollection': return 'Открыта для сбора';
			case 'addressCollectionDoneDescript': return 'В процессе сбора не осталось позиции, которые вам нужно собрать. Процесс полностью собран или произошла ошибка!';
			case 'missingTheCell': return 'Отсутствует в ячейке';
			case 'requiredScanBarcodeProduct': return 'Требуется отсканировать шк-код товара';
			case 'positionSelectedPlaceCell': return 'Позиция выбрана, разместите в ячейку';
			case 'placementDoneDescript': return 'В данном процессе не осталось товаров для размещения. Все товары были размещены или произошла ошибка!';
			case 'accommodationOptions': return 'Варианты размещения';
			case 'placementNoRecommend': return 'Отсутствуют рекомендации';
			case 'placementRecommendedCells': return 'В этих ячейках располагается данный товар. Вы можете расположить товар в любую из этих ячеек, или в любую другую';
			case 'placementNotRecommendedCells': return 'По данному товару, нету рекомендации по размещению. Вы можете расположить товар в любую ячейку на складе!';
			case 'collectionDoneDescript': return 'В документе не осталось позиции, которые вам нужно отсканировать. Документ полностью отсканирован или произошла ошибка!';
			case 'skip': return 'Пропустить';
			case 'defaultDoneDescript': return 'В процессе не осталось позиции, которые вам нужно отсканировать. Процесс полностью отсканирован или произошла ошибка!';
			case 'confirmAbsentCollection': return 'Подтвердите, что вы не нашли физически остаток в ячейке. Ячейка будет откорретирована, резерв переназначен!';
			case 'absentNotConfirmedRequest': return 'Не удалось проверить результат запроса. Недоступные ед. были убраны со сбора, можете продолжать. После завершения сбора, вы увидите уведомление.';
			case 'processUnconfirmedProducts': return 'Есть неподтвержденные товары';
			case 'processUnconfirmedProductsDescript': return 'В текущем процессе существуют позиции, которые были исключены в процессе работы. После перезагрузки процесса, позиции могут появится в процессе!';
			case 'existScannedContinue': return 'Вы берете на себя ответственность, оставляя предыдущее сканирование, в текущем процессе';
			case 'existScannedClearDb': return 'Данный процесс будет полностью очищен от всех процессов сканирования в нем';
			case 'blockIsExistScannedProcess': return 'Есть отсканированные позиции';
			case 'blockIsExistScannedProcessDescript': return 'В текущем процессе есть отсканированные товары. Продолжите работу или очистите процесс сканирования';
			case 'itemAlreadyBeenScanned': return 'Данный артикул/размер уже был отсканирован';
			case 'skipCollectingNotify': return 'Оставшиеся ед. товара были временно исключены с текущего сбора. Продолжайте!';
			case 'skipCollectingConfirm': return 'Товар будет временно снят с маршрута сбора. Пропущенный товар появится вновь, после отправки или перезагрузки';
			case 'search': return 'Искать';
			case 'backToSearch': return 'Вернуться к поиску';
			case 'searchTitle': return 'Поиск';
			case 'searchResult': return 'Результаты поиска';
			case 'searchResultTaskDocumentDescript': return 'Нажмите на найденный документ, чтобы перейти в него или вернитесь к поиску';
			case 'searchTaskDocumentDescript': return 'Введите номер документа. Если он будет найден, он отобразится в результатах поиска!';
			case 'searchParameters': return 'Параметры поиска';
			case 'searchParametersDescript': return 'Данные параметры, влияют на результат поиска';
			case 'year': return 'Год';
			case 'enterFullDocumentNumberToSearch': return 'Введите полный номер документа, для поиска';
			case 'searchByCurrent': return 'Поиск по текущим';
			case 'searchByOther': return 'Поиск по другим';
			case 'autoSubmissionOfParametersCanceled': return 'Автоподставление параметров отменено';
			case 'selectedTypeIsNotAvailable': return 'Выбранный тип недоступен';
			case 'changeMovingType': return 'При изменении типа перемещения, все остальные параметры будут очищены!';
			case 'articleSizePrice': return 'Артикул - размер / цена';
			case 'noDocumentToCalculateResult': return 'Отсутствуют документы, для просчета результата';
			case 'acceptPackageBeforeNotify': return 'Максимально убедитесь, что содержимое упаковки в системе сходится с физическим!';
			case 'from': return 'Откуда';
			case 'status': return 'Статус';
			case 'relatedDocument': return 'Связанный документ';
			case 'orderStatus': return 'Статус заказа';
			case 'operation': return 'Операция';
			case 'cancelled': return 'Отменен';
			case 'active': return 'Активен';
			case 'acceptance': return 'Приемка';
			case 'moving': return 'Перемещение';
			case 'placement': return 'Размещение';
			case 'collectionRoute': return 'Маршрут сбора';
			case 'actionsProcess': return 'Действия над процессом';
			case 'confirmSelectCellAddressCollection': return 'Текущая открытая ячейка будет закрыта, перед открытием выбранной!';
			case 'thereIsNoRoute': return 'Маршрут отсутствует';
			case 'currentLastCell': return 'Текущая последняя ячейка';
			case 'currentCell': return 'Текущая ячейка';
			case 'currentProposedCellCurrentCollection': return 'Текущая или предложенная ячейка, в текущем сборе';
			case 'followingRoute': return 'Следующие по маршруту';
			case 'followingRouteDescript': return 'Нажмите на ячейку, чтобы изменить маршрут относительно выбранной ячейки';
			case 'dateTime': return 'Дата и время';
			case 'notCorrectScanExtra': return 'Отсутствуют сканирования которые требуется отменить';
			case 'correctScanExtraDescript': return 'Отмените каждое сканирование отдельно, нажав на элемент и подтвердив действие. Отмена действия должна сопровождаться, возвратом физического товара на место!';
			case 'extraScans': return 'Лишние сканирования';
			case 'stateExtraScanTitle': return 'Разрешите проблему';
			case 'stateExtraScanCorrectionOptions1': return 'Есть сохраненные отсканированные товары, которые отсутствуют в текущем процессе. Для продолжения работы, требуется удалить лишние сканирования или очистить процесс целиком!';
			case 'stateExtraScanCorrectionOptions2': return 'Содержаться много сохраненных отсканированных товаров, которые отсутствуют в текущем процессе. Для продолжения, требуется очистить процесс от всех сканировании!';
			case 'clearResume': return 'Очистить и продолжить';
			case 'clearExtra': return 'Очистить лишние';
			case 'unableToCheckUpdate': return 'Невозможно проверить обновление';
			case 'unableToCheckUpdateDescript': return 'У вас консолидированный склад. Сначала выберите склад или зону работ, для проверки обновлений!';
			case 'baseNomenclature': return 'База номенклатуры';
			case 'baseNomenclatureEmpty': return 'База номенклатуры пустая';
			case 'baseNomenclatureEmptyDescript': return 'Требуется загрузка, для дальнейшей работы';
			case 'selectLangDescript': return 'Выберите предпочитаемый язык для работы с терминалом. Изменить можно в любое время!';
			case 'unlock': return 'Разблокировать';
			case 'processUnlockDescript': return 'Нажмите, чтобы снять блокировку с текущего процесса.';
			case 'confirmProcessUnlock': return 'При разблокировке, текущее сканирование будет очищено и произведен выход!';
			case 'aboutTheApp': return 'О приложении';
			case 'disbanded': return 'Расформирован';
			case 'shipped': return 'Отгружен';
			case 'combineCell': return 'В ячейку';
			case 'expectation': return 'Ожидание';
			case 'applicationVersion': return 'Версия приложения';
			case 'apiVersion': return 'Версия api';
			case 'theme': return 'Тема';
			case 'fontSize': return 'Размер шрифта';
			case 'light': return 'Светлая';
			case 'dark': return 'Тёмная';
			case 'standard': return 'Стандартный';
			case 'large': return 'Крупный';
			case 'veryLarge': return 'Очень крупный';
			case 'personalizationApplication': return 'Персонализация приложения';
			case 'personalizationApplicationDescript': return 'Настройте параметры, как вам удобно!';
			case 'userSettings': return 'Пользовательские настройки';
			case 'userSettingsDescript': return 'Измените параметры вашего аккаунта';
			case 'unlockAllDocuments': return 'Разблокировать все документы';
			case 'unlockAllDocumentsDescript': return 'Разблокировка всех документов заблокированных с этого терминала!';
			case 'errorSavePersonalizingSetting': return 'Не удалось сохранить ваши пользовательские настройки!';
			case 'confirmUnlockAll': return 'При разблокировки всех документов, будет очищена база сканирования!';
			case 'repeatBackgroundTaskError': return 'Повтор выполнения запроса. Будет попытка повторного выполнения запроса.';
			case 'timeIsNotDefined': return 'Время не определено';
			case 'startTyping': return 'Начните ввод';
			case 'listOfDocuments': return 'Список документов';
			case 'acceptancePackageIdScan': return 'Отсканируйте упаковочный идентификатор перемещения. Или перейдите в список документов!';
			case 'availability': return 'Наличие';
			case 'transitStorage': return 'Транзитное хранение';
			case 'logistics': return 'Логистика';
			case 'send': return 'Отправить';
			case 'createMoveBasedThisDocument': return 'Создание перемещения на основании данного документа!';
			case 'identificationOfMovement': return 'Идентификация перемещения';
			case 'identificationOfMovementDescript': return 'Отсканируйте свободный упаковочный идентификатор и закрепите его после создания перемещения!';
			case 'failedToClearTheMoveProcess': return 'Не удалось очистить процесс перемещения';
			case 'selectKeyboardHelp': return 'Нажмите кнопку на терминале, соответствующей порядковому номеру пункта!';
			case 'selectTypeMove': return 'Выберите тип перемещения';
			case 'warning': return 'Предупреждение';
			case 'movingFormWarningPreparedOrSaveData': return 'Некоторые подготовленные или сохраненные данные не подходят для создания перемещения';
			case 'unknownStatus': return 'Неизвестный статус';
			case 'logisticHistoryEmpty': return 'История движения пустая';
			case 'logisticUndefinedStatus': return 'Статус неизвестен';
			case 'sender': return 'Отправитель';
			case 'recipient': return 'Получатель';
			case 'packageProcessMoving': return 'В процессе перемещения';
			case 'shipFromWarehouse': return 'Отгрузить со склада';
			case 'recentMovementMovementsPackageExternal': return 'Последние движения перемещения';
			case 'client': return 'Клиент';
			case 'packageLeaveWarehouse': return 'Упаковка покинула склад и была закрыта';
			case 'confirmPackageLeaveWarehouse': return 'Подтвердите отправку упаковки с текущего склада';
			case 'externalMovingStatusUnknown': return 'Неизвестный статус';
			case 'externalMovingStatusWait': return 'Ожидание транспортировки';
			case 'externalMovingStatusWay': return 'Отправлено, в пути';
			case 'externalMovingStatusArrived': return 'Прибыло на склад получения';
			case 'externalMovingNoMovementsLocations': return 'Движения перемещения отсутствуют';
			case 'location': return 'Местоположение';
			case 'leftLocation': return 'Покинуло местоположение';
			case 'availableActionsInCell': return 'Доступные действия над ячейкой';
			case 'availableActionsInPackage': return 'Доступные действия над упаковкой';
			case 'selectSearchOption': return 'Выберите вариант поиска';
			case 'selectFilter': return 'Выберите фильтр';
			case 'selectActionProcess': return 'Выберите действие над процессом';
			case 'absent': return 'Отсутствует';
			case 'changeAvatar': return 'Изменить аватар';
			case 'changeWarehouse': return 'Изменить склад';
			case 'cellBelongsAnotherWarehouse': return 'Ячейка принадлежит другому складу';
			case 'identiconInfo': return 'Одной из основных функций аватара является работа в качестве идентикона вашего аккаунта';
			case 'save': return 'Сохранить';
			case 'selectAnother': return 'Выбрать другой';
			case 'avatar': return 'Аватар';
			case 'updateAvatarDescript': return 'Текущий аватар будет установлен для вашего профиля';
			case 'ship': return 'Отгрузить';
			case 'disband': return 'Расформировать';
			case 'moveToACell': return 'Переместить в ячейку';
			case 'transitStorageOrderDisbandInfo': return 'Заказ был отменен в системе. Требуется провести расформирование с хранения в ячейку возврата!';
			case 'transitStorageOrderShipInfo': return 'Заказ активен. Требуется отгрузка заказа с транзитного хранения';
			case 'transitStorageConfirmShip': return 'Подтвердите намерение отгрузки заказа с транзитного хранения';
			case 'transitStorageConfirmDisband': return 'Подтвердите намерение расформирование заказа с транзитного хранения в упаковку';
			case 'orderIsExistsOperation': return 'Операция над данным заказом в транзитном хранении, была выполнена. Дальнейшие действия отсутствуют!';
			case 'orderActionExpectedInTransitStorage': return 'Ожидается выполнение действие над данной упаковкой в транзитном хранений!';
			case 'combineInCellDescript': return 'В которую требуется переместить упаковку';
			case 'hintOrderNumber': return 'Номер заказа';
			case 'failedLoadOrderData': return 'Не удалось загрузить данные заказа';
			case 'notAssigned': return 'Не присвоена';
			case 'reasonRejection': return 'Причина отклонения';
			case 'logisticsConfirmCellTo': return 'Все подтвержденные товары будут перемещены в эту ячейку';
			case 'rejectForAbsence': return 'Отклонить за отсутствие';
			case 'nextPageError': return 'Не удалось загрузить следующую страницу. Попробуйте повторить!';
			case 'nextPageDone': return 'Все данные были загружены';
			case 'repeat': return 'Повторить';
			case 'logisticsOrderNotAssignedCell': return 'Не закреплен за ячейкой';
			case 'products': return 'Товары';
			case 'packages': return 'Пакеты';
			case 'taskDescription': return 'Описание задачи';
			case 'logisticsAvailabilityTaskDescript': return 'Требуется собрать и подтвердить перемещение вещей в ячейку с заказом, или отклонить товар с выбранной причиной!';
			case 'logisticsWithdrawTaskDescript': return 'Требуется собрать и подтвердить перемещение вещей из ячейки с заказом в ячейку возврата';
			case 'logisticsPackTaskDescript': return 'Требуется сканирование содержимого каждой упаковки для подтверждения готовности на отправку';
			case 'logisticsSendTaskDescript': return 'Требуется отсканировать упаковку для подтверждения отправки пакета по заказу';
			case 'logisticsTabsDescript': return 'Будьте внимательны, выполняя задачи. Ваши действия не подлежат отмене!';
			case 'tabs': return 'Вкладки';
			case 'logisticsTabsAvailableTask': return 'Доступные задачи';
			case 'taskList': return 'Список задач';
			case 'rejectWithReason': return 'Отклонить с причиной';
			case 'skipProduct': return 'Пропустить товар';
			case 'findAnotherCell': return 'Найти другую ячейку';
			case 'reasonReject_1': return 'Отсутствует пуговица';
			case 'reasonReject_2': return 'Дефект молнии';
			case 'reasonReject_3': return 'Наличие зацепок';
			case 'reasonReject_4': return 'Наличие пятен';
			case 'reasonReject_5': return 'Дефект шва';
			case 'reasonReject_6': return 'Наличие катышек';
			case 'reasonReject_7': return 'Дефект бретельки';
			case 'reasonReject_8': return 'Наличие царапин или заломов';
			case 'reasonReject_9': return 'Дефект крепления';
			case 'reasonReject_10': return 'Наличие отверстия от аларма';
			case 'reasonReject_11': return 'Наличие брака';
			case 'reasonReject_12': return 'Не для продажи в Интернет Магазине';
			case 'reasonReject_13': return 'Товар отсутствует';
			case 'rejectSelectTitle': return 'Выберите причину отклонения';
			case 'confirmRejection': return 'Подтвердите отклонение';
			case 'rejectItemIsNotPossible': return 'Отклонение позиции невозможно';
			case 'rejectItemIsNotPossibleMessage': return 'Товар при подтверждений наличия, был подтвержден не через ТСД';
			case 'confirmItemIsNotPossible': return 'Подтверждение позиции невозможно';
			case 'confirmItemIsNotPossibleMessage': return 'Товар при подтверждений наличия, был подтвержден не через ТСД';
			case 'confirmPackageIsNotPossible': return 'Подтверждение пакета невозможно';
			case 'confirmPackageIsNotPossibleMessage': return 'Некоторый или весь товар в пакете, при подтверждении наличия был подтвержден не через ТСД';
			case 'notAvailableProductAccessList': return 'Отсутствует список доступных товаров';
			case 'scanThePackageSendDescript': return 'Отсканируйте, чтобы подтвердить отправку этого пакета';
			case 'scanThePackagePackDescript': return 'Отсканируйте, чтобы подтвердить упаковку этого пакета';
			case 'cellSearch': return 'Поиск по ячейкам';
			case 'cellSearchDescript': return 'Дождитесь завершения поиска местоположения товара';
			case 'logisticsConfirmLocationCell': return 'В этой ячейке предположительно находится текущий товар';
			case 'logisticsConfirmNotLocationCell': return 'Не удалось найти местоположение товара в ячейках, на складе';
			case 'notFound': return 'Не найдено';
			case 'startSearch': return 'Начинайте поиск';
			case 'searchFrom3Char': return 'Поиск от 3-ех символов';
			case 'nothingWasFound': return 'Ничего не нашлось';
			case 'invalidOrderPackageCodeScanned': return 'Отсканирован неверный код пакета заказа';
			case 'requiredFullScanned': return 'Требуется отсканировать все содержимое в процессе';
			case 'logisticsOrderNotAccessConfirmWithoutCell': return 'Содержимое и подтверждение не доступно в этой задаче!';
			case 'logisticsConfirmItemNeedStepWait': return 'Подождите';
			case 'logisticsConfirmItemNeedStepWaitAction': return 'Ожидание действия';
			case 'logisticsConfirmItemNeedActionScanCell': return 'Отсканируйте ячейку';
			case 'logisticsConfirmItemNeedActionScanItem': return 'Отсканируйте товар';
			case 'scanCellSpecifiedLocation': return 'Отсканируйте ячейку указанную в местоположении';
			case 'noScanningRequiredFollowSteps': return 'Сканирование не требуется. Выполните предложенные действия';
			case 'qtyUnits': return '{{qty}} ед.';
			case 'confirmHaveReturnedCell': return 'Вы подтверждаете что вернули {{article}} / {{size}} в ячейку {{cell}}';
			case 'confirmHaveReturned': return 'Вы подтверждаете что физически убрали {{article}} / {{size}} из текущего процесса';
			case 'confirmHaveReturnedError': return 'Не удалось отменить сканирование {{article}} / {{size}} в текущем процессе';
			case 'confirmHaveReturnedSuccess': return 'Сканирование {{article}} / {{size}} было отменено в текущем процессе';
			case 'hiUser': return '{{emoji}} Привет, {{userName}}';
			case 'terminalID': return 'Терминал.ID: {{tid}}';
			case 'versionTsd': return 'Версия TSD: {{name}} (api v. {{api}})';
			case 'ofData': return ' {{a}} из {{b}} ед.';
			case 'sizeNotRepresentedOnTheScreen': return 'Размер \'{{size}}\' не отображается на экране';
			case 'updateVersion': return '{{emoji}} Версия {{v}}';
			case 'upload': return 'Загружаем {{value}} / {{total}} мб.';
			case 'currentAppLastAvailable': return 'Текущая версия приложения {{v}} является последней доступной версией для вас!';
			case 'savePercent': return 'Сохраняем {{percent}}%';
			case 'lastUpdateDb': return 'Последнее обновление: {{date}}';
			case 'quantity': return '{{emoji}} Количество - {{qty}}';
			case 'addingGoodsToCell': return 'Внесение товаров в ячейку {{cellName}}';
			case 'removalGoodsFromCell': return 'Вынесение товаров из ячейки {{cellName}}';
			case 'adjustmentCell': return 'Корректировка ячейки {{cellName}}';
			case 'movingItemsFromCell': return 'Перемещение товаров из ячейки {{cellName}}';
			case 'moveGoodsTheCell': return 'Переместить {{qty}} ед. товара в ячейку {{cellTo}}';
			case 'removalGoodsFromCellInPackage': return 'Вынесение товаров из ячейки {{cellName}} в упаковку';
			case 'takeToCellInPackage': return 'Вынести {{qty}} ед. товара из ячейки {{cellFrom}} в упаковку {{packageId}}';
			case 'selectWarehouseTitle': return 'Переключиться на {{name}}';
			case 'selectWorkAreaTitle': return 'Переключиться в зону работы {{workareaName}} {{warehouseName}}';
			case 'packageId': return 'Упаковка #{{id}}';
			case 'orderWithGrid': return 'Заказ #{{orderId}}';
			case 'scanThePackage': return 'Отсканируйте пакет #{{packageId}}';
			case 'confirmRejectionMessage': return 'Подтвердите что хотите отклонить {{article}} / {{size}} по причине - {{reason}}';
			case 'inCell': return 'В ячейке {{cellName}}';
			case 'dateCreate': return 'Дата создания {{date}}';
			case 'qtyPieces': return '{{qty}} шт.';
			case 'departureWarehouse': return 'Откуда {{warehouse}}';
			case 'placePackageInCell': return 'Разместить упаковку в ячейку {{cell}}';
			case 'addingGoodsToPackaging': return 'Внесение товаров в упаковку {{packageId}}';
			case 'removalGoodsFromPackaging': return 'Вынесение товаров из упаковки {{packageId}}';
			case 'placementGoodsFromPackaging': return 'Размещение товаров из упаковки {{packageId}}';
			case 'scanCellName': return 'Отсканируйте ячейку {{cellName}}';
			case 'scannedInvalidCell': return 'Требовалось отсканировать ячейку {{cellName}}';
			case 'requiredMatrix': return '{{article}} - {{size}}, нужно отсканировать матрицу';
			case 'alreadyMatrix': return '{{article}} - {{size}} вы уже отсканировали эту матрицу';
			case 'barcodeFailedScan': return '{{barcode}}, не удалось сохранить сканирование!';
			case 'barcodeScanned': return '{{barcode}}, отсканирован!';
			case 'failedSaveScan': return '{{barcode}}, не удалось сохранить сканирование!';
			case 'itemPlaceInCell': return '{{article}} - {{size}}, помещен в {{cell}}\'';
			case 'itemPlaceInCellFailed': return '{{article}} - {{size}}, не удалось разместить';
			case 'leftCells': return 'Осталось - {{qty}} яч.';
			case 'productPlacement': return 'Размещение товара';
			case 'productChecking': return 'Проверка товара';
			case 'repeatLogin': return 'Подтверждение аккаунта завершено\nПожалуйста повторите вход';
			case 'inStock': return 'В наличии';
			case 'notInStock': return 'Нет в наличии';
			case 'price': return 'Цена';
			case 'color': return 'Цвет';
			case 'codeIsNotProduct': return 'Код не от товара';
			case 'invalidProductCodeType': return 'Неверный тип кода, отсканируйте код товара';
			case 'isMissing': return 'Отсутствует';
			case 'sale': return 'Sale';
			case 'lichiId': return 'Lichi ID';
			case 'onRegistered': return 'Аккаунт успешно привязан\nПожалуйста запросите данные для входа у техподдержки';
			case 'toRegistration': return 'Зарегистрироваться';
			case 'alreadyRegistered': return 'Данный аккаунт уже существует';
			case 'inventoryCell': return 'Инвентаризация ячейки {{cellName}}';
			case 'inventoryCellScanNotify': return 'Отсканируйте идентификатор ячейки изображенный на QR - коде, для целей инвентаризации';
			case 'inventoryCellScanNotifyDubai': return 'Отсканируйте идентификатор ячейки изображенный на QR - коде, для целей инвентаризации на складах Дубай';
			case 'inventoryCellCorrection': return 'Посчитать ячейку';
			case 'inventoryCellConfirm': return 'Подтвердить пустоту';
			case 'inventoryCellZeroing': return 'Обнулить ячейку';
			case 'executor': return 'Исполнитель';
			case 'undefined': return 'Неопределено';
			case 'confirmation': return 'Подтверждение';
			case 'counting': return 'Подсчет';
			case 'result': return 'Результат';
			case 'zeroing': return 'Обнуление';
			case 'inventoryNotCarriedOut': return 'Инвентаризация не проведена';
			case 'inventoryCarriedOut': return 'Инвентаризация проведена';
			case 'inventoryCarriedOutWithError': return 'Инвентаризация проведена. Имеются расхождения';
			case 'productCheckingScanNotify': return 'Отсканируйте штрихкод товара, для проверки товара';
			case 'incorrectPincode': return 'Неверный пинкод\nпинкод должен содержать только цифры';
			default: return null;
		}
	}
}
