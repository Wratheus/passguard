/// Generated file. Do not edit.
///
/// Original: assets/i18n
/// To regenerate, run: `dart run slang`
///
/// Locales: 2
/// Strings: 1564 (782 per locale)
///
/// Built on 2024-03-10 at 20:15 UTC

// coverage:ignore-file
// ignore_for_file: type=lint

import 'package:flutter/widgets.dart';
import 'package:slang/builder/model/node.dart';
import 'package:slang_flutter/slang_flutter.dart';
export 'package:slang_flutter/slang_flutter.dart';

const AppLocale _baseLocale = AppLocale.ru;

/// Supported locales, see extension methods below.
///
/// Usage:
/// - LocaleSettings.setLocale(AppLocale.ru) // set locale
/// - Locale locale = AppLocale.ru.flutterLocale // get flutter locale from enum
/// - if (LocaleSettings.currentLocale == AppLocale.ru) // locale check
enum AppLocale with BaseAppLocale<AppLocale, Translations> {
	ru(languageCode: 'ru', build: Translations.build),
	en(languageCode: 'en', build: _TranslationsEn.build);

	const AppLocale({required this.languageCode, this.scriptCode, this.countryCode, required this.build}); // ignore: unused_element

	@override final String languageCode;
	@override final String? scriptCode;
	@override final String? countryCode;
	@override final TranslationBuilder<AppLocale, Translations> build;

	/// Gets current instance managed by [LocaleSettings].
	Translations get translations => LocaleSettings.instance.translationMap[this]!;
}

/// Method A: Simple
///
/// No rebuild after locale change.
/// Translation happens during initialization of the widget (call of t).
/// Configurable via 'translate_var'.
///
/// Usage:
/// String a = t.someKey.anotherKey;
/// String b = t['someKey.anotherKey']; // Only for edge cases!
Translations get t => LocaleSettings.instance.currentTranslations;

/// Method B: Advanced
///
/// All widgets using this method will trigger a rebuild when locale changes.
/// Use this if you have e.g. a settings page where the user can select the locale during runtime.
///
/// Step 1:
/// wrap your App with
/// TranslationProvider(
/// 	child: MyApp()
/// );
///
/// Step 2:
/// final t = Translations.of(context); // Get t variable.
/// String a = t.someKey.anotherKey; // Use t variable.
/// String b = t['someKey.anotherKey']; // Only for edge cases!
class TranslationProvider extends BaseTranslationProvider<AppLocale, Translations> {
	TranslationProvider({required super.child}) : super(settings: LocaleSettings.instance);

	static InheritedLocaleData<AppLocale, Translations> of(BuildContext context) => InheritedLocaleData.of<AppLocale, Translations>(context);
}

/// Method B shorthand via [BuildContext] extension method.
/// Configurable via 'translate_var'.
///
/// Usage (e.g. in a widget's build method):
/// context.t.someKey.anotherKey
extension BuildContextTranslationsExtension on BuildContext {
	Translations get t => TranslationProvider.of(this).translations;
}

/// Manages all translation instances and the current locale
class LocaleSettings extends BaseFlutterLocaleSettings<AppLocale, Translations> {
	LocaleSettings._() : super(utils: AppLocaleUtils.instance);

	static final instance = LocaleSettings._();

	// static aliases (checkout base methods for documentation)
	static AppLocale get currentLocale => instance.currentLocale;
	static Stream<AppLocale> getLocaleStream() => instance.getLocaleStream();
	static AppLocale setLocale(AppLocale locale, {bool? listenToDeviceLocale = false}) => instance.setLocale(locale, listenToDeviceLocale: listenToDeviceLocale);
	static AppLocale setLocaleRaw(String rawLocale, {bool? listenToDeviceLocale = false}) => instance.setLocaleRaw(rawLocale, listenToDeviceLocale: listenToDeviceLocale);
	static AppLocale useDeviceLocale() => instance.useDeviceLocale();
	@Deprecated('Use [AppLocaleUtils.supportedLocales]') static List<Locale> get supportedLocales => instance.supportedLocales;
	@Deprecated('Use [AppLocaleUtils.supportedLocalesRaw]') static List<String> get supportedLocalesRaw => instance.supportedLocalesRaw;
	static void setPluralResolver({String? language, AppLocale? locale, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver}) => instance.setPluralResolver(
		language: language,
		locale: locale,
		cardinalResolver: cardinalResolver,
		ordinalResolver: ordinalResolver,
	);
}

/// Provides utility functions without any side effects.
class AppLocaleUtils extends BaseAppLocaleUtils<AppLocale, Translations> {
	AppLocaleUtils._() : super(baseLocale: _baseLocale, locales: AppLocale.values);

	static final instance = AppLocaleUtils._();

	// static aliases (checkout base methods for documentation)
	static AppLocale parse(String rawLocale) => instance.parse(rawLocale);
	static AppLocale parseLocaleParts({required String languageCode, String? scriptCode, String? countryCode}) => instance.parseLocaleParts(languageCode: languageCode, scriptCode: scriptCode, countryCode: countryCode);
	static AppLocale findDeviceLocale() => instance.findDeviceLocale();
	static List<Locale> get supportedLocales => instance.supportedLocales;
	static List<String> get supportedLocalesRaw => instance.supportedLocalesRaw;
}

// translations

// Path: <root>
class Translations implements BaseTranslations<AppLocale, Translations> {
	/// Returns the current translations of the given [context].
	///
	/// Usage:
	/// final t = Translations.of(context);
	static Translations of(BuildContext context) => InheritedLocaleData.of<AppLocale, Translations>(context).translations;

	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	Translations.build({Map<String, Node>? overrides, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver})
		: assert(overrides == null, 'Set "translation_overrides: true" in order to enable this feature.'),
		  $meta = TranslationMetadata(
		    locale: AppLocale.ru,
		    overrides: overrides ?? {},
		    cardinalResolver: cardinalResolver,
		    ordinalResolver: ordinalResolver,
		  ) {
		$meta.setFlatMapFunction(_flatMapFunction);
	}

	/// Metadata for the translations of <ru>.
	@override final TranslationMetadata<AppLocale, Translations> $meta;

	/// Access flat map
	dynamic operator[](String key) => $meta.getTranslation(key);

	late final Translations _root = this; // ignore: unused_field

	// Translations
	String get warehouse => 'Склад';
	String get notSelected => 'Не выбран';
	String get notifyScanQrWarehouse => 'Отсканируйте QR-код склада или рабочей зоны. Вы откроете модули, доступные для склада';
	String get userID => 'Пользователь.ID';
	String get notificationCompletionWork => 'Обязательно завершите работу, все запросы выполняются от вашего имени!';
	String get finishJob => 'Завершить работу';
	String get requestCannotExecuted => 'Запрос не может быть выполнен';
	String get settings => 'Настройки';
	String get noModulesAvailable => 'Нет доступных модулей';
	String get noModulesAvailableDescript => 'На этом складе нет доступных модулей для работы, смените склад или обратитесь в службу технической поддержки!';
	String get selectWarehouse => 'Выберите склад';
	String get selectWarehouseDescript => 'В вашем аккаунте отображается консолидированный склад. Просканируйте доступный склад, где вы будете работать!';
	String get exitUserTitle => 'Завершение работы';
	String get exitUserMessage => 'Вы действительно хотите завершить работу с терминалом?';
	String get invalidCodeType => 'Недопустимый тип кода';
	String get invalidCodeFormat => 'Неверный формат кода';
	String get invalidAuthCodeType => 'Неверный тип кода, отсканируйте свой личный qr-код';
	String get invalidOrderPackageCodeType => 'Неверный код с идентификатором заказа с пакетом';
	String get invalidWarehouseWorkareaCodeType => 'Неверный тип кода, отсканируйте код склада или зоны работы';
	String get failedDecryptQrCode => 'Не удалось расшифровать qr-code';
	String get doesNotCodeTask => 'Код несоответствует задаче';
	String get probablyCode => 'Вероятно код поврежден. Не удалось считать данные!';
	String get selectWarehouseMessage => 'Подтвердите, что вы действительно хотите переключиться на выбранный в данный момент склад';
	String get selectWorkAreaMessage => 'Подтвердите, что вы действительно хотите переключиться на выбранную зону';
	String get language => 'Русский';
	String get calculation => 'Расчет';
	String get clearingDb => 'Очистка базы данных';
	String get updatingProductDb => 'Обновление базы данных продуктов';
	String get thereErrors => 'Есть ошибки';
	String get errors => 'Ошибки';
	String get done => 'Готово';
	String get onPageNotifyTitle => 'Есть проблемы';
	String get onPageNotifyMessage => 'Некоторые шаги не удалось выполнить, пожалуйста, свяжитесь с разработчиком для получения разъяснений!';
	String get checkingTerminal => 'Проверка терминала';
	String get notificationVerifyTerminal => 'Не выключайте устройство во время проверки и обновления';
	String get continueL => 'Продолжить';
	String get noDataAvailable => 'Нет доступных данных';
	String get consolidatedResult => 'Консолидированный результат по всем активным документам в текущем модуле. Нажмите, чтобы обновить результат и документы';
	String get activeDocuments => 'Активные документы';
	String get completedDocuments => 'Завершенные документы';
	String get unableOpenDocument => 'Не удается открыть документ';
	String get updateListDocumentTitle => 'Обновление данных';
	String get updateListDocumentMessage => 'Обновить список документов?';
	String get statusUploadCompletedDocuments => 'Загрузка завершенных\nдокументов';
	String get statusUploadingActiveDocuments => 'Загрузка активных\nдокументов';
	String get listCompletedDocuments => 'Список выполненных документов';
	String get listActiveDocuments => 'Список активных документов';
	String get listPackageContents => 'Список содержимого упаковки';
	String get thereNoDocuments => 'Нет доступных документов';
	String get contentsEmpty => 'Содержимое пустое';
	String get documents => 'Документы';
	String get barcodeAndArticle => 'Штрихкод/артикул';
	String get title => 'Название';
	String get history => 'История';
	String get outputHistory => 'Вывод истории, текущего процесса, последовательного сканирования. Нажмите, чтобы просмотреть подробную информацию или выполнить действие!';
	String get storyEmpty => 'Эта история пуста';
	String get listEmpty => 'Список пуст';
	String get endList => 'Конец списка';
	String get sortList => 'Отсортируйте список или удалите выбранные фильтры';
	String get added => 'Добавленые';
	String get unScanned => 'Не отсканированные';
	String get scanned => 'Отсканированные';
	String get all => 'Все';
	String get selectActionSelectedPosition => 'Выберите действие в выбранной позиции!';
	String get resetToZero => 'Обнулить';
	String get mistake => 'Ошибка';
	String get resetPositionWarning => 'Позиция сброшена, но позиция в интерфейсе не может быть обновлена. Перезагрузите документ!';
	String get list => 'Список';
	String get emptyList => 'Пустой список';
	String get motionCreationFormValidationCreateMoving => 'Обязательно проверьте данные формы, перед созданием перемещения!';
	String get createMove => 'Создать перемещение';
	String get fromDocumentCreateMove => 'Из этого документа берутся товары для создания их перемещения на другой склад';
	String get uploadingDataMove => 'Загрузка данных\nдля перемещения';
	String get goodsBeingMoved => 'Перемещаемые товары';
	String get simplifiedRelocation => 'Упрощенное перемещение';
	String get transferAutoAccepted => 'Это перемещение будет автоматически принято на складе поступления!';
	String get standardMovement => 'Стандартное перемещение';
	String get transferNeedAccepted => 'Это перемещение необходимо будет принять на складе-получателе!';
	String get warehouseRecipient => 'Склад получатель';
	String get departureWarehouseAuto => 'Склад отправления устанавливается автоматически. \nВыберите склад поступления!';
	String get choose => 'Выбрать';
	String get specify => 'Укажите';
	String get attach => 'Прикрепите';
	String get notAttach => 'Не прикреплена';
	String get scanProducts => 'Сканировать товары';
	String get selectProducts => 'Выбрать товары';
	String get notDataCreateMove => 'Не удалось получить данные, необходимые для перемещения!';
	String get notSortItemsErrorMove => 'Не удалось отсортировать товары. Создание перемещения невозможно!';
	String get clearingCurrentProcess => 'Очистка текущего процесса';
	String get confirmClearCurrentFormMove => 'Подтвердите, что вы хотите очистить текущую форму перемещения!';
	String get formTransferCleared => 'Форма перемещения была очищена';
	String get failedClearMove => 'Не удалось очистить перемещение';
	String get selectionGoodsMove => 'Выбор товаров для перемещения';
	String get returnCreationMove => 'Вернуться к созданию перемещения';
	String get backContinueCreatingMove => 'Нажмите, чтобы вернуться и продолжить создание перемещения';
	String get receiptWarehouse => 'Склад поступления';
	String get listProductCreateTransfer => 'Список товаров для создания перемещения на другой склад!';
	String get noReceivingWarehouseSelected => 'Не выбран склад получатель';
	String get noGoodsCreateMove => 'Отсутствуют товары для создания перемещения';
	String get errorFormingListProducts => 'Ошибка в формировании списка товаров';
	String get creatingMove => 'Создание перемещения';
	String get updateDb => 'Обновить базу данных';
	String get checkingDb => 'Проверка базы данных';
	String get gettingDb => 'Получение данных';
	String get noDataUploadedDb => 'Данные не загружены';
	String get getErrorAllProducts => 'Не удалось получить данные по всем продуктам';
	String get dataUpdateDb => 'Данные обновлены';
	String get updatedDb => 'Данные обновлены, база данных содержит все доступные продукты';
	String get noDataRecordedDb => 'Данные не записаны';
	String get writtenErrorDb => 'Данные не удалось записать в локальную базу данных.';
	String get database => 'База данных';
	String get removal => 'Удаление';
	String get clearDbConfirm => 'Вы действительно хотите очистить всю локальную базу данных?';
	String get localDbCleaned => 'Локальная база данных была очищена и восстановлена';
	String get failedClearDb => 'Не удалось очистить базу данных';
	String get restoreDb => 'Восстановить базу';
	String get checkingUpdate => 'Проверка обновления';
	String get languageLabel => 'Язык';
	String get failedLoadTradingFloorData => 'Не удалось загрузить данные торгового зала';
	String get failedLoadLogisticsTabData => 'Не удалось загрузить данные разделов логистики';
	String get uncertainGoods => 'Неопределенные товары';
	String get confirmOrPostTradingHall => 'Подтвердите или разместите в торговой зале товары, которые представлены в этом списке';
	String get calcTradingHall => 'Расчет процента заполнения торгового зала на основе данных сканирования по остаткам на текущий день!';
	String get scanHall => 'Сканировать зал';
	String get dataNotUpdated => 'Данные не обновлены';
	String get errorUpdatingDataTradingHall => 'Произошла ошибка при обновлении данных, данные не актуальны. Попробуйте обновить вручную!';
	String get scanAllEachProductsTradingHall => 'Отсканируйте все товары на витрине, по одной единице каждого размерного ряда, чтобы проверить торговый зал.';
	String get uploadingActiveDocuments => 'Загрузка активных\nдокументов';
	String get uploadingDataTabsLogistics => 'Загрузка данных\n разделов';
	String get uploadingLogisticsListAvailability => 'Загрузка списка заказов\n с товарами на подтверждение';
	String get uploadingLogisticsListWithdraw => 'Загрузка списка заказов\n с товарами на снятие с резерва';
	String get uploadingLogisticsListPack => 'Загрузка списка заказов\n на упаковку';
	String get uploadingLogisticsListSend => 'Загрузка списка заказов\n с упаковками на отправку';
	String get uploadingOrderData => 'Загрузка данных\n заказа';
	String get tradingHall => 'Торговый зал';
	String get invalidUserLogin => 'Неверный логин пользователя';
	String get userLogin => 'Логин пользователя';
	String get invalidPassword => 'Неверный пароль';
	String get password => 'Пароль';
	String get scanPersonalCodeAuth => 'Отсканируйте свой персональный код\n для доступа к терминалу!';
	String get invalidData => 'Неверные данные';
	String get authErrorTerminal => 'Ошибка авторизации в терминале';
	String get dataLoadedToCreateMove => 'Данные загружаются для создания перемещения';
	String get couldNotGetDocuments => 'Не удалось получить эти документы!';
	String get uploadingControlData => 'Загрузка контрольных\nданных';
	String get byCurrentWarehouse => 'по текущему складу';
	String get noControl => 'Нет никакого контроля';
	String get moveItemsAccepted => 'Переместите товары, которые были приняты, но не перемещены на другой склад!';
	String get control => 'Контроль';
	String get checkingForUpdates => 'Проверка наличия обновлений';
	String get problemUpdating => 'Если у вас возникли проблемы с обновлением, напишите в службу технической поддержки';
	String get updateDownloadFromServer => 'Обновление загружается с сервера, после чего вам будет предложено его установить';
	String get installUpdateOnlyAndroid => 'Установка обновления в настоящее время возможна только для Android';
	String get anErrorOccurredDownloadingInstall => 'При загрузке и установке произошла ошибка';
	String get updateCenterApp => 'Центр обновления\nприложения';
	String get reboot => 'Перезагрузить';
	String get clearProcess => 'Очистить процесс';
	String get setAreaTitle => 'Вы не можете изменить зону';
	String get setAreaMessage => 'После начала сканирования, когда документ не пуст, вы не можете изменить область сканирования. Вы можете изменить его после отправки или очистки документа!';
	String get scanSectionSuccessInstalled => 'Раздел сканирования был успешно установлен';
	String get failedSetScanArea => 'Не удалось установить область сканирования';
	String get productDbIsEmpty => 'База данных товаров\nпуста';
	String get stateEmptyProcess => 'Работать с этим процессом\nневозможна';
	String get stateBlocked => 'Работа с процессом\nне допускается';
	String get stateExistScanned => 'Имеются данные\nсканирования';
	String get stateExtraScanned => 'Лишние сканирования\nв процессе';
	String get stateStart => 'Выполните условие\nперед началом работы';
	String get followSuggestedConditions => 'Следуйте предложенным условиям, чтобы начать';
	String get zone => 'Зона';
	String get package => 'Упаковка';
	String get setZone => 'Установите зону';
	String get setPackage => 'Прикрепите упаковку';
	String get clickChangeArea => 'Нажмите, чтобы изменить рабочую область!';
	String get clickChangePackage => 'Нажмите, чтобы прикрепить другую упаковку!';
	String get scanError => 'Ошибка сканирования';
	String get awaitLastScan => 'Предыдущее сканирование еще не было обработано до начала текущего.';
	String get invalidUnreadableCode => 'Недопустимый/нечитаемый код. Попробуйте еще раз или введите вручную!';
	String get notBarcodeInDb => 'Не удалось найти этот штрих-код в базе данных';
	String get simplifiedManualInput => 'Упрощенный ручной ввод';
	String get productIsNotList => 'Товара нет в списке';
	String get positionIsNotScanList => 'Этой позиции нет в списке сканирования, вы можете добавить ее. Подтвердите!';
	String get positionMissingCurrentProcess => 'Эта позиция отсутствует в текущем процессе';
	String get positionAlreadyBeenScanned => 'Эта позиция уже была отсканирована';
	String get conditionsNotScan => 'Условия не выполнены перед началом сканирования';
	String get emptyProcess => 'Пустой процесс';
	String get youHaveNotScanned => 'Вы ничего не отсканировали, пустой процесс не может быть отправлен!';
	String get cancelingScan => 'Отмена сканирования';
	String get confirmCancelAction => 'Подтвердите, что вы хотите отменить это действие';
	String get actionCanceled => 'Действие отменено';
	String get couldNotCancelAction => 'Не удалось отменить действие';
	String get cancelingLastScan => 'Отмена последнего сканирования';
	String get confirmCancelLastScan => 'Подтвердите, что вы хотите отменить последнее сканирование';
	String get lastActionCanceled => 'Последнее действие отменено';
	String get couldUndoLastAction => 'Не удалось отменить последнее действие';
	String get zeroingPosition => 'Обнуление позиции';
	String get confirmResetPosition => 'Подтвердите, что вы хотите сбросить эту позицию';
	String get positionResetToZero => 'Обнуление позиции';
	String get failedResetPosition => 'Не удалось обнулить позицию';
	String get accessInNotProvided => 'Доступ не предоставляется';
	String get blockingDataIsUnknown => 'Блокирующие данные неизвестны';
	String get terminals => 'Терминалы';
	String get blockedDescript_one => 'Проверить блокировку этого процесса не удалось. Повторите попытку позже или обратитесь в службу поддержки!';
	String get blockedDescript_two => 'Заблокировать этот процесс для вас не представлялось возможным. Повторите попытку позже или обратитесь в службу поддержки!';
	String get blockedDescript_three => 'Этот процесс заблокирован другим пользователем. Закройте процесс или найдите терминал и разблокируйте!';
	String get updateDbScan => 'Обновите базу данных';
	String get updateDbScanDescript_1 => 'Обновите базу данных продуктов на терминале, перейдите к ';
	String get updateDbScanDescript_2 => 'настройки - база данных - обновить. ';
	String get updateDbScanDescript_3 => 'После этого процесс сканирования станет доступен!';
	String get emptyProcessDescript_1 => 'Для этого сканирования требуются ';
	String get emptyProcessDescript_2 => 'данные';
	String get emptyProcessDescript_3 => ' который не удалось загрузить. Попробуйте еще раз или обратитесь в службу технической поддержки!';
	String get confirmAndStart => 'Подтвердите и запустите';
	String get beforeStartActionsCorrect => 'Прежде чем начать, убедитесь, что ваши действия правильны. Вы несете полную ответственность за свои действия.';
	String get selectAction => 'Выберите действие';
	String get startConfirm => 'Начать подтверждение';
	String get listCurrentProcess => 'Список текущего процесса';
	String get outputContentsCurrentScanningProcess => 'Вывод содержимого текущего процесса сканирования. Нажмите на позицию, чтобы выбрать действие!';
	String get scanHistory => 'История сканирования';
	String get cancelAction => 'Отменить действие';
	String get cancelingLastActionHistory => 'Отмена последнего действия в истории. Нажмите для отката или кнопку \'esc\' на терминале!';
	String get mainAction => 'Основное действие. Нажмите кнопку (ent)';
	String get loadingDataProcess => 'Загрузка данных\nпроцесса';
	String get failedConvertItemsCreateMove => 'Не удалось преобразовать элементы для создания перемещения!';
	String get acceptMove => 'Принять перемещение';
	String get acceptOrder => 'Принять заказ';
	String get clickAcceptScannedItems => 'Подтвердите, чтобы принять отсканированные элементы';
	String get confirmAction => 'Подтвердите действие!';
	String get confirmAcceptCurrentScannedItems => 'Вы действительно хотите принять текущие отсканированные элементы?';
	String get sendStatement => 'Отправить в ведомость';
	String get assembleToOrder => 'Собрать в заказ';
	String get clickAssembleToShipmentOnMove => 'Подтвердите, чтобы отправить данные в заказ на перемещение';
	String get clickAssembleToShipmentOnOrder => 'Подтвердите, чтобы отправить данные в заказ клиента';
	String get clickSendInventoryData => 'Подтвердите, чтобы отправить в ведомость инвентаризации';
	String get confirmSendCurrentScannedItemsInventory => 'Вы действительно хотите отправить текущие отсканированные товары в ведомость инвентаризации?';
	String get saveReport => 'Сохранить в отчет';
	String get clickSendScanDataReport => 'Подтвердите, чтобы отправить данные сканирования в отчет';
	String get confirmYourIntention => 'Подтвердите свое намерение';
	String get confirmSendCurrentScannedItemsTradingHall => 'Вы действительно хотите отправить текущие отсканированные товары в отчет торгового зала';
	String get manual => 'вручную';
	String get scanning => 'отсканировано';
	String get unknown => 'неизвестный';
	String get reauthorizationRequired => 'Требуется повторная авторизация';
	String get terminalNotUsed => 'Терминал не использовался более 30 минут. \nпотребуется повторная авторизация!';
	String get groupAcceptanceTitle => 'Приемка товара';
	String get groupAcceptanceDescript => 'Выберите подходящий тип приемки';
	String get groupWarehouseMovementsTitle => 'Перемещения на складе';
	String get groupWarehouseMovementsDescript => 'Создать или принять перемещение между складами';
	String get groupShipmentTitle => 'Сбор заказов';
	String get groupShipmentTitleDescript => 'Работа с заказами доступных типов';
	String get moduleInventoryName => 'Инвентаризация';
	String get moduleInventoryCellName => 'Инвентаризация ячеек';
	String get moduleAcceptanceOnAdmissionOCName => 'По заказу поставщика';
	String get moduleShipmentOnMoveName => 'На перемещение';
	String get moduleShipmentOnOrderName => 'Поставщиков';
	String get moduleAcceptanceOnAdmissionOCFullName => 'Приемка поступления по заказу поставщика';
	String get moduleAcceptanceOnAdmissionWOCName => 'По накладной';
	String get moduleAcceptanceOnAdmissionWOCFullName => 'Приемка поступления по накладной';
	String get moduleCreateMove => 'Создать перемещение';
	String get moduleTradingHall => 'Торговый зал';
	String get moduleAcceptanceOnMoveName => 'Принять перемещение';
	String get moduleControlMovingName => 'Контроль перемещения';
	String get moduleControlPlacementName => 'Контроль размещения';
	String get moduleAcceptanceOnMoveFullName => 'Приемка перемещения на склад';
	String get moduleControl => 'Контроль';
	String get serverResponseParameterMissing => 'Параметры ответа сервера отсутствуют';
	String get invalidResponseFromServer => 'Неверный ответ от сервера!';
	String get requestHasNotBeenSent => 'Запрос не был отправлен. Ошибка запроса!';
	String get notification => 'Уведомление';
	String get updateCellNotify => 'Данные ячейки будут обновлены, после выполнения последних действий!';
	String get requestError => 'Ошибка запроса';
	String get sessionIsNotActive => 'Сеанс не активен';
	String get sessionRejected => 'Сеанс был отклонен сервером потребуется повторная авторизация!';
	String get iSee => 'Понятно';
	String get confirm => 'Подтвердить';
	String get cancel => 'Закрыть';
	String get updateAvailable => 'Доступно обновление приложения';
	String get absentDescriptUpdate => 'Описание обновления отсутствует';
	String get updateNewDescript => 'Что нового в этой версии?';
	String get goToUpdate => 'Перейти к обновлению';
	String get later => 'Позже';
	String get barcodeAbbreviated => 'Шк.';
	String get articleAbbreviated => 'Арт.';
	String get inputType => 'Тип ввода';
	String get closeClickEmptySpace => 'Чтобы закрыть, нажмите на пустое место';
	String get simplifiedMode_1 => 'Упрощенный режим';
	String get simplifiedMode_2 => ', достаточно ввести последние 5 цифр штрих-кода';
	String get manualInput => 'Ручной ввод';
	String get close => 'Закрыть';
	String get releaseButtonTopToClose => 'Отпустите ▲ чтобы закрыть';
	String get enterPinCodePhysicalButtons => 'Введите pin-код с помощью физических кнопок терминала';
	String get clear => 'Очистить';
	String get specifyArea => 'Укажите область сканирования, в которой вы собираетесь выполнять сканирование';
	String get zoneIsNotSpecify => 'Зона не указана';
	String get scanningArea => 'Область сканирования';
	String get failedProductData => 'Не удалось получить информацию о товаре.';
	String get scanProductShowTheScreen => 'Отсканируйте товар, отображаемый на экране';
	String get scannedWrongCode => 'Вы отсканировали неправильный код';
	String get scanCurrentProductInfo => 'Отсканируйте показанные размеры для подтверждения. Переключайтесь между товарами с помощью стрелок, стрелка вниз - увеличьте фотографию!';
	String get releaseTheButtonClose => 'Отпустите кнопку, чтобы свернуть';
	String get couldNotFindItemInCurrentProcess => 'Не удалось найти данный товар в текущем процессе';
	String get maxItemScanned => 'Максимальное кол-во товара отсканировано';
	String get startScanning => 'Начните сканирование';
	String get continueScanning => 'Продолжить сканирование';
	String get infoItemLastProduct => 'Здесь вы увидите информацию о последнем отсканированном продукте!';
	String get infoPlacementScanned => 'Отсканируйте товар, и вам будет показаны варианты расположения для размещения!';
	String get moduleCell => 'Ячейка';
	String get modulePackage => 'Упаковка';
	String get orderNumber => 'Номер заказа и упаковки';
	String get packagingID => 'Упаковочный ИД';
	String get modulePlacement => 'Размещение';
	String get moduleSettings => 'Настройки';
	String get forConfirmation => 'На подтверждение';
	String get onPackaging => 'На упаковку';
	String get withdrawalFromTheReserve => 'Снятие с резерва';
	String get toSend => 'На отправку';
	String get moduleCreateImplementation => 'Создать реализацию';
	String get createImplementation => 'Создать реализацию';
	String get attachedProducts => 'Прикрепленные товары';
	String get requisites => 'Реквизиты';
	String get motionCreationFormValidationCreateImplementation => 'Перед созданием реализации, убедитесь, что все выбрано правильно. Вы несете личную ответственность за неправильную реализацию!';
	String get errorDataAuth => 'Ошибка формирования данных полученных при авторизации';
	String get inProgressUserSettingDevice => 'Пользовательская настройка\nустройства';
	String get inProgressUserSettingDeviceDescript => 'Пожалуйста не отключайте устройство, во избежании краха приложения!';
	String get checkClearDbError => 'Не удалось преобразовать базу данных. Попробуйте повторить в настройках или обратитесь в техподдержку!';
	String get checkUpdateBaseError => 'При обновлении базы номенклатуры произошла ошибка. Попробуйте повторить в настройках или обратитесь в техподдержку!';
	String get unableRequestAnUpdateFromServer => 'Не удается запросить обновление с сервера';
	String get requestTimeOut => 'Превышено время ожидания. Отсутствует интернет соединение или проблемы на стороне сервере!';
	String get more => 'Подробнее';
	String get errorDetails => 'Подробности ошибки';
	String get isNoDetailedError => 'Отсутствует подробное описание ошибки';
	String get waitingTimeExceed => 'Превышено время ожидания. Загрузка отменена!';
	String get updateAndInstall => 'Обновить и установить';
	String get updateAndSave => 'Обновить и сохранить';
	String get uploadWait => 'Загружаем';
	String get checkingForAppUpdates => 'Проверка обновления приложения';
	String get checkingForAppUpdatesDescript => 'Ищем последние доступные обновления, подходящее вам по параметрам';
	String get checkingForBaseProductUpdates => 'Проверка базы данных';
	String get checkingForBaseProductUpdatesDescript => 'Загружаем информацию по текущей базе товаров на устройстве';
	String get noUpdateAvailable => 'Нет доступных обновлении';
	String get requirementsSelectType => 'Требования выбранного типа';
	String get requirementsSelectTypeDescript => 'Для выбранного типа перемещения, требуются доп. данные';
	String get codeIsNotePackage => 'Код не от упаковки';
	String get codeIsNoteCell => 'Код не от ячейки';
	String get codeIsNoteWarehouse => 'Код не от склада';
	String get codeIsNoteWorkArea => 'Код не от зоны работ';
	String get scanPackage => 'Отсканируйте упаковку';
	String get scanCell => 'Отсканируйте ячейку';
	String get selectPackageMovingTypeFromCell => 'Выберите ячейку, из которой хотите переместить товар';
	String get selectPackageMovingTypeFromPackage => 'Выберите упаковку из которой хотите переместить товары';
	String get selectPackageMovingTypePackage => 'Выберите упаковку которую собираетесь переместить';
	String get cellLocatedAnotherWarehouse => 'Ячейка находится на другом складе';
	String get autoSetPackageMovingError => 'Автоподставление упаковки отменено';
	String get autoSetCellMovingError => 'Автоподставление ячейки отменено';
	String get packageIsNotConditionMoving => 'Упаковка не подходит для создания перемещения';
	String get packageContentEmptyMoving => 'Содержимое упаковки пустое или его не удалось получить!';
	String get packageItemsEmpty => 'Содержимое упаковки пустое или его не удалось получить';
	String get invalidCellData => 'Неверные данные ячейки в коде. Возможно код устарел!';
	String get invalidPackageData => 'Неверные данные упаковки в коде. Возможно код устарел!';
	String get invalidWorkAreaData => 'Неверные данные зоны работ в коде. Возможно код устарел!';
	String get invalidWarehouseData => 'Неверные данные склада в коде. Возможно код устарел!';
	String get selectTypeMovementTitle => 'Выбор типа перемещения';
	String get selectTypeMovementDescript => 'Выберите тип перемещения из доступных. При изменении, остальные поля формы очищаются!';
	String get type => 'Тип';
	String get typeMovementNotSelected => 'Не выбран тип перемещения';
	String get noCellSelected => 'Не выбрана ячейка из которой планируется перемещение';
	String get noFromPackageSelected => 'Не выбрана упаковка из которой планируется перемещение';
	String get noMovePackageSelected => 'Не выбрана упаковка, которую планируете переместить';
	String get movingSelectCell => 'Выберите ячейку или смените тип перемещения';
	String get movingSelectPackage => 'Выберите упаковку или смените тип перемещения';
	String get cellDescriptInModule => 'Нажмите физическую кнопку (F1) на терминале, чтобы сразу открыть доступные действия над ячейкой, если они есть.';
	String get content => 'Содержимое';
	String get problems => 'Проблемы';
	String get reserve => 'Резерв';
	String get invalidReserve => 'Проблемы с резервом';
	String get incorrectContentCell => 'Некорректное содержимое';
	String get incorrectProductsCell => 'Некорректные товары';
	String get lastAction => 'Последнее действие';
	String get packageMovingWaitTitle => 'Ожидание приемки';
	String get packageArchive => 'Упаковка в архиве';
	String get openAnotherPackage => 'Открыть другую упаковку';
	String get confirmChangePackage => 'Подтвердите что вы хотите открыть другую упаковку';
	String get openAnotherOrder => 'Открыть другой заказ';
	String get confirmChangeOrder => 'Подтвердите что вы хотите открыть другой заказ';
	String get openAnotherCell => 'Открыть другую ячейку';
	String get confirmChangeCell => 'Подтвердите что вы хотите открыть другую ячейку';
	String get reloadPackageError => 'Не удалось получить актуальные данные упаковки. Попробуйте отсканировать повторно!';
	String get reloadCellError => 'Не удалось получить актуальные данные ячейки. Попробуйте отсканировать повторно!';
	String get reloadLogisticsOrderError => 'Не удалось получить актуальные данные задачи по заказу. Попробуйте перезагрузить!';
	String get confirmDisbandPackage => 'Вы действительно хотите расформировать упаковку?';
	String get confirmZeroingCell => 'Вы действительно хотите обнулить содержимое ячейки?';
	String get dataIrrelevant => 'Данные неактуальные';
	String get whatDoesMean => 'Что это значит?';
	String get packageIrrelevantDescript => 'При обновлении данных, не удалось получить новые данные об упаковке. Попробуйте отсканировать упаковку заного!';
	String get cellIrrelevantDescript => 'При обновлении данных, не удалось получить новые данные о ячейке. Попробуйте отсканировать ячейку заного!';
	String get logisticsOrderIrrelevantDescript => 'При обновлении данных, не удалось получить новые данные о задаче по заказу. Попробуйте повторить!';
	String get incorrectItemsCellDescript => 'Содержимое ячейки содержит товары с отрицательным остатком!';
	String get incorrectProductsCellDescript => 'Некоторые товары в ячейке, без шк кодов. Требуется обратиться к администраторам, для исправления! Показать проблемные товары?';
	String get packageLocation => 'Местоположение упаковки';
	String get packageLocationDescript => 'Указывает где находится упаковка в системе';
	String get cellLocation => 'Местоположение ячейки';
	String get cellLocationDescript => 'Указывает где находится ячейка в системе';
	String get packageScanNotify => 'Отсканируйте упаковочный идентификатор изображенный на QR - коде';
	String get transitStorageOrderScanNotify => 'Отсканируйте штрих-код заказа в транзитном хранении';
	String get cellScanNotify => 'Отсканируйте идентификатор ячейки изображенный на QR - коде';
	String get last30actionPackage => 'История последних действий пользователей над упаковкой. Выводятся последние 30 всех действий!';
	String get last30actionCell => 'История последних действий пользователей над ячейкой. Выводятся последние 30 всех действий!';
	String get failedLogList => 'Неудалось получить список товаров из действия';
	String get updateDataQuest => 'Обновить данные?';
	String get changeDataPackage => 'Возможно данные упаковки изменились, хотите обновить данные?';
	String get changeDataCell => 'Возможно данные ячейки изменились, хотите обновить данные?';
	String get cellWhichPlacePackage => 'Ячейку, в которую расположить упаковку!';
	String get cellMoveProductTo => 'Ячейку, в которую переместить товар';
	String get whichTakeOutGoods => 'В которую вынести товар';
	String get whichAttachCurrentProcess => 'Которую прикрепить к текущему процессу';
	String get addToPackage => 'Внести в упаковку';
	String get addToPackageDescript => 'Подтвердите, чтобы внести товар в упаковку';
	String get correctionCell => 'Откорректировать ячейку';
	String get correctionCellDescript => 'Подтвердите, чтобы откорректировать ячейку';
	String get moveToAnotherCell => 'Переместить в ячейку';
	String get moveToAnotherCellDescript => 'Подтвердите, чтобы выбрать ячейку, куда перемещать';
	String get takeToPackageFromCell => 'Вынести в упаковку';
	String get takeToPackageFromCellDescript => 'Подтвердите, чтобы вынести в упаковку';
	String get putCell => 'Внести в ячейку';
	String get putCellDescript => 'Подтвердите, чтобы внести товар в ячейку';
	String get confirmPack => 'Подтвердить упаковку';
	String get confirmPackDescript => 'Подтвердите, что собрали все товары в упаковку';
	String get tradingHallSaveToReport => 'Сохранить в отчет';
	String get tradingHallSaveToReportDescript => 'Подтвердите, чтобы сохранить в сегодняшний отчет по витрине';
	String get takeCell => 'Вынести из ячейки';
	String get takeCellDescript => 'Подтвердите, чтобы вынести товар из ячейки';
	String get removeFromPackage => 'Вынести из упаковки';
	String get removeFromPackageDescript => 'Подтвердите, чтобы вынести товары из упаковки';
	String get noGoodsInPackage => 'В упаковке отсутствуют товары';
	String get couldNotGetPlacementItems => 'Не удалось получить информацию для расположения товаров';
	String get placeProducts => 'Разместить товары';
	String get placeProductsDescript => 'Подтвердите, чтобы разместить товары по ячейкам';
	String get selectKeyboardNotify => 'Выбрать пункт можно, нажав соответствующую цирфру на устройстве';
	String get formatDate1 => 'dd MMM в HH:mm';
	String get formatDate2 => 'Время в HH:mm';
	String get acceptPackageConfirm => 'Принимая упаковку со всем содержимым, вы берете ответственность что проверили физическое содержимое с системным!';
	String get acceptPackageBtn => 'Принять упаковку';
	String get openLinkedDocument => 'Открыть связанный документ';
	String get acceptPackageHelp => 'Вы можете сразу принять упаковку со всем ее содержимым. Если содержимое не сходится, осуществите приемку вручную';
	String get failedToSelectScanMode => 'Не удалось подобрать режим сканирования';
	String get failedGetPackage => 'Не удалось получить информацию об упаковке';
	String get packageIsNotProcessMovingCurrentWarehouse => 'Упаковка не находится в процессе перемещения на текущий склад';
	String get confirmCancellation => 'Подтвердите отмену';
	String get confirmCancellationDescript => 'Вы действительно хотите отменить последнее действие в текущем процессе? Отменить действия, будет невозможно!';
	String get barcode => 'Штрихкод';
	String get article => 'Артикул';
	String get size => 'Размер';
	String get cell => 'Ячейка';
	String get matrix => 'Матрица';
	String get yes => 'Да';
	String get no => 'Нет';
	String get successRollback => 'Сканирование было успешно отменено';
	String get errorRollback => 'Сканирование не удалось отменить';
	String get couldGetInfoLastScan => 'Не удалось получить информацию по последнему сканированию';
	String get zeroingProduct => 'Обнуление товара';
	String get zeroingProductDescript => 'Вы хотите очистить все процессы сканирования этого товара?';
	String get positionSuccessReset => 'Позиция была успешно обнулена';
	String get positionErrorReset => 'Позицию не удалось обнулить';
	String get pinch => 'Зажмите';
	String get viewPhotoCurrentProduct => 'открыть фото текущего товара';
	String get cleanProcessConfirm => 'Очистка процесса';
	String get cleanProcessConfirmDescript => 'Вы действительно хотите очистить сканирование во всем процессе? Все текущие данные будут удалены безвозвратно!';
	String get couldExtractBarcodeFromMatrix => 'Не удалось извлечь штрихкод из матрицы';
	String get couldFindBarcodeInDb => 'Не удалось найти данный штрихкод в базе';
	String get scanOfferedProduct => 'Отсканируйте предложенный товар';
	String get cellAutoClosed => 'Ячейка автоматически закрыта, все товары отсканированы';
	String get closeOpenCell => 'Закройте открытую ячейку';
	String get requiredScanCodeCell => 'Требуется отсканировать qr-код ячейки';
	String get cellIsNotAvailable => 'Данная ячейка не доступна';
	String get cellWasOpen => 'Ячейка была открыта';
	String get cellWasClosed => 'Ячейка была закрыта';
	String get scanOfferedProductOrCurrentCellToClose => 'Отсканируйте предложенный товар или текущую ячейку, чтобы закрыть ее!';
	String get collectAllRequiredItemsFromCell => 'Соберите все требуемые товары из этой ячейки или отсканируйте ячейку, чтобы ее закрыть!';
	String get scanSuggestedCell => 'Отсканируйте предложенную ячейку, следуйте по предложенному маршруту';
	String get cellOpenForCollection => 'Открыта для сбора';
	String get addressCollectionDoneDescript => 'В процессе сбора не осталось позиции, которые вам нужно собрать. Процесс полностью собран или произошла ошибка!';
	String get missingTheCell => 'Отсутствует в ячейке';
	String get requiredScanBarcodeProduct => 'Требуется отсканировать шк-код товара';
	String get positionSelectedPlaceCell => 'Позиция выбрана, разместите в ячейку';
	String get placementDoneDescript => 'В данном процессе не осталось товаров для размещения. Все товары были размещены или произошла ошибка!';
	String get accommodationOptions => 'Варианты размещения';
	String get placementNoRecommend => 'Отсутствуют рекомендации';
	String get placementRecommendedCells => 'В этих ячейках располагается данный товар. Вы можете расположить товар в любую из этих ячеек, или в любую другую';
	String get placementNotRecommendedCells => 'По данному товару, нету рекомендации по размещению. Вы можете расположить товар в любую ячейку на складе!';
	String get collectionDoneDescript => 'В документе не осталось позиции, которые вам нужно отсканировать. Документ полностью отсканирован или произошла ошибка!';
	String get skip => 'Пропустить';
	String get defaultDoneDescript => 'В процессе не осталось позиции, которые вам нужно отсканировать. Процесс полностью отсканирован или произошла ошибка!';
	String get confirmAbsentCollection => 'Подтвердите, что вы не нашли физически остаток в ячейке. Ячейка будет откорретирована, резерв переназначен!';
	String get absentNotConfirmedRequest => 'Не удалось проверить результат запроса. Недоступные ед. были убраны со сбора, можете продолжать. После завершения сбора, вы увидите уведомление.';
	String get processUnconfirmedProducts => 'Есть неподтвержденные товары';
	String get processUnconfirmedProductsDescript => 'В текущем процессе существуют позиции, которые были исключены в процессе работы. После перезагрузки процесса, позиции могут появится в процессе!';
	String get existScannedContinue => 'Вы берете на себя ответственность, оставляя предыдущее сканирование, в текущем процессе';
	String get existScannedClearDb => 'Данный процесс будет полностью очищен от всех процессов сканирования в нем';
	String get blockIsExistScannedProcess => 'Есть отсканированные позиции';
	String get blockIsExistScannedProcessDescript => 'В текущем процессе есть отсканированные товары. Продолжите работу или очистите процесс сканирования';
	String get itemAlreadyBeenScanned => 'Данный артикул/размер уже был отсканирован';
	String get skipCollectingNotify => 'Оставшиеся ед. товара были временно исключены с текущего сбора. Продолжайте!';
	String get skipCollectingConfirm => 'Товар будет временно снят с маршрута сбора. Пропущенный товар появится вновь, после отправки или перезагрузки';
	String get search => 'Искать';
	String get backToSearch => 'Вернуться к поиску';
	String get searchTitle => 'Поиск';
	String get searchResult => 'Результаты поиска';
	String get searchResultTaskDocumentDescript => 'Нажмите на найденный документ, чтобы перейти в него или вернитесь к поиску';
	String get searchTaskDocumentDescript => 'Введите номер документа. Если он будет найден, он отобразится в результатах поиска!';
	String get searchParameters => 'Параметры поиска';
	String get searchParametersDescript => 'Данные параметры, влияют на результат поиска';
	String get year => 'Год';
	String get enterFullDocumentNumberToSearch => 'Введите полный номер документа, для поиска';
	String get searchByCurrent => 'Поиск по текущим';
	String get searchByOther => 'Поиск по другим';
	String get autoSubmissionOfParametersCanceled => 'Автоподставление параметров отменено';
	String get selectedTypeIsNotAvailable => 'Выбранный тип недоступен';
	String get changeMovingType => 'При изменении типа перемещения, все остальные параметры будут очищены!';
	String get articleSizePrice => 'Артикул - размер / цена';
	String get noDocumentToCalculateResult => 'Отсутствуют документы, для просчета результата';
	String get acceptPackageBeforeNotify => 'Максимально убедитесь, что содержимое упаковки в системе сходится с физическим!';
	String get from => 'Откуда';
	String get status => 'Статус';
	String get relatedDocument => 'Связанный документ';
	String get orderStatus => 'Статус заказа';
	String get operation => 'Операция';
	String get cancelled => 'Отменен';
	String get active => 'Активен';
	String get acceptance => 'Приемка';
	String get moving => 'Перемещение';
	String get placement => 'Размещение';
	String get collectionRoute => 'Маршрут сбора';
	String get actionsProcess => 'Действия над процессом';
	String get confirmSelectCellAddressCollection => 'Текущая открытая ячейка будет закрыта, перед открытием выбранной!';
	String get thereIsNoRoute => 'Маршрут отсутствует';
	String get currentLastCell => 'Текущая последняя ячейка';
	String get currentCell => 'Текущая ячейка';
	String get currentProposedCellCurrentCollection => 'Текущая или предложенная ячейка, в текущем сборе';
	String get followingRoute => 'Следующие по маршруту';
	String get followingRouteDescript => 'Нажмите на ячейку, чтобы изменить маршрут относительно выбранной ячейки';
	String get dateTime => 'Дата и время';
	String get notCorrectScanExtra => 'Отсутствуют сканирования которые требуется отменить';
	String get correctScanExtraDescript => 'Отмените каждое сканирование отдельно, нажав на элемент и подтвердив действие. Отмена действия должна сопровождаться, возвратом физического товара на место!';
	String get extraScans => 'Лишние сканирования';
	String get stateExtraScanTitle => 'Разрешите проблему';
	String get stateExtraScanCorrectionOptions1 => 'Есть сохраненные отсканированные товары, которые отсутствуют в текущем процессе. Для продолжения работы, требуется удалить лишние сканирования или очистить процесс целиком!';
	String get stateExtraScanCorrectionOptions2 => 'Содержаться много сохраненных отсканированных товаров, которые отсутствуют в текущем процессе. Для продолжения, требуется очистить процесс от всех сканировании!';
	String get clearResume => 'Очистить и продолжить';
	String get clearExtra => 'Очистить лишние';
	String get unableToCheckUpdate => 'Невозможно проверить обновление';
	String get unableToCheckUpdateDescript => 'У вас консолидированный склад. Сначала выберите склад или зону работ, для проверки обновлений!';
	String get baseNomenclature => 'База номенклатуры';
	String get baseNomenclatureEmpty => 'База номенклатуры пустая';
	String get baseNomenclatureEmptyDescript => 'Требуется загрузка, для дальнейшей работы';
	String get selectLangDescript => 'Выберите предпочитаемый язык для работы с терминалом. Изменить можно в любое время!';
	String get unlock => 'Разблокировать';
	String get processUnlockDescript => 'Нажмите, чтобы снять блокировку с текущего процесса.';
	String get confirmProcessUnlock => 'При разблокировке, текущее сканирование будет очищено и произведен выход!';
	String get aboutTheApp => 'О приложении';
	String get disbanded => 'Расформирован';
	String get shipped => 'Отгружен';
	String get combineCell => 'В ячейку';
	String get expectation => 'Ожидание';
	String get applicationVersion => 'Версия приложения';
	String get apiVersion => 'Версия api';
	String get theme => 'Тема';
	String get fontSize => 'Размер шрифта';
	String get light => 'Светлая';
	String get dark => 'Тёмная';
	String get standard => 'Стандартный';
	String get large => 'Крупный';
	String get veryLarge => 'Очень крупный';
	String get personalizationApplication => 'Персонализация приложения';
	String get personalizationApplicationDescript => 'Настройте параметры, как вам удобно!';
	String get userSettings => 'Пользовательские настройки';
	String get userSettingsDescript => 'Измените параметры вашего аккаунта';
	String get unlockAllDocuments => 'Разблокировать все документы';
	String get unlockAllDocumentsDescript => 'Разблокировка всех документов заблокированных с этого терминала!';
	String get errorSavePersonalizingSetting => 'Не удалось сохранить ваши пользовательские настройки!';
	String get confirmUnlockAll => 'При разблокировки всех документов, будет очищена база сканирования!';
	String get repeatBackgroundTaskError => 'Повтор выполнения запроса. Будет попытка повторного выполнения запроса.';
	String get timeIsNotDefined => 'Время не определено';
	String get startTyping => 'Начните ввод';
	String get listOfDocuments => 'Список документов';
	String get acceptancePackageIdScan => 'Отсканируйте упаковочный идентификатор перемещения. Или перейдите в список документов!';
	String get availability => 'Наличие';
	String get transitStorage => 'Транзитное хранение';
	String get logistics => 'Логистика';
	String get send => 'Отправить';
	String get createMoveBasedThisDocument => 'Создание перемещения на основании данного документа!';
	String get identificationOfMovement => 'Идентификация перемещения';
	String get identificationOfMovementDescript => 'Отсканируйте свободный упаковочный идентификатор и закрепите его после создания перемещения!';
	String get failedToClearTheMoveProcess => 'Не удалось очистить процесс перемещения';
	String get selectKeyboardHelp => 'Нажмите кнопку на терминале, соответствующей порядковому номеру пункта!';
	String get selectTypeMove => 'Выберите тип перемещения';
	String get warning => 'Предупреждение';
	String get movingFormWarningPreparedOrSaveData => 'Некоторые подготовленные или сохраненные данные не подходят для создания перемещения';
	String get unknownStatus => 'Неизвестный статус';
	String get logisticHistoryEmpty => 'История движения пустая';
	String get logisticUndefinedStatus => 'Статус неизвестен';
	String get sender => 'Отправитель';
	String get recipient => 'Получатель';
	String get packageProcessMoving => 'В процессе перемещения';
	String get shipFromWarehouse => 'Отгрузить со склада';
	String get recentMovementMovementsPackageExternal => 'Последние движения перемещения';
	String get client => 'Клиент';
	String get packageLeaveWarehouse => 'Упаковка покинула склад и была закрыта';
	String get confirmPackageLeaveWarehouse => 'Подтвердите отправку упаковки с текущего склада';
	String get externalMovingStatusUnknown => 'Неизвестный статус';
	String get externalMovingStatusWait => 'Ожидание транспортировки';
	String get externalMovingStatusWay => 'Отправлено, в пути';
	String get externalMovingStatusArrived => 'Прибыло на склад получения';
	String get externalMovingNoMovementsLocations => 'Движения перемещения отсутствуют';
	String get location => 'Местоположение';
	String get leftLocation => 'Покинуло местоположение';
	String get availableActionsInCell => 'Доступные действия над ячейкой';
	String get availableActionsInPackage => 'Доступные действия над упаковкой';
	String get selectSearchOption => 'Выберите вариант поиска';
	String get selectFilter => 'Выберите фильтр';
	String get selectActionProcess => 'Выберите действие над процессом';
	String get absent => 'Отсутствует';
	String get changeAvatar => 'Изменить аватар';
	String get changeWarehouse => 'Изменить склад';
	String get cellBelongsAnotherWarehouse => 'Ячейка принадлежит другому складу';
	String get identiconInfo => 'Одной из основных функций аватара является работа в качестве идентикона вашего аккаунта';
	String get save => 'Сохранить';
	String get selectAnother => 'Выбрать другой';
	String get avatar => 'Аватар';
	String get updateAvatarDescript => 'Текущий аватар будет установлен для вашего профиля';
	String get ship => 'Отгрузить';
	String get disband => 'Расформировать';
	String get moveToACell => 'Переместить в ячейку';
	String get transitStorageOrderDisbandInfo => 'Заказ был отменен в системе. Требуется провести расформирование с хранения в ячейку возврата!';
	String get transitStorageOrderShipInfo => 'Заказ активен. Требуется отгрузка заказа с транзитного хранения';
	String get transitStorageConfirmShip => 'Подтвердите намерение отгрузки заказа с транзитного хранения';
	String get transitStorageConfirmDisband => 'Подтвердите намерение расформирование заказа с транзитного хранения в упаковку';
	String get orderIsExistsOperation => 'Операция над данным заказом в транзитном хранении, была выполнена. Дальнейшие действия отсутствуют!';
	String get orderActionExpectedInTransitStorage => 'Ожидается выполнение действие над данной упаковкой в транзитном хранений!';
	String get combineInCellDescript => 'В которую требуется переместить упаковку';
	String get hintOrderNumber => 'Номер заказа';
	String get failedLoadOrderData => 'Не удалось загрузить данные заказа';
	String get notAssigned => 'Не присвоена';
	String get reasonRejection => 'Причина отклонения';
	String get logisticsConfirmCellTo => 'Все подтвержденные товары будут перемещены в эту ячейку';
	String get rejectForAbsence => 'Отклонить за отсутствие';
	String get nextPageError => 'Не удалось загрузить следующую страницу. Попробуйте повторить!';
	String get nextPageDone => 'Все данные были загружены';
	String get repeat => 'Повторить';
	String get logisticsOrderNotAssignedCell => 'Не закреплен за ячейкой';
	String get products => 'Товары';
	String get packages => 'Пакеты';
	String get taskDescription => 'Описание задачи';
	String get logisticsAvailabilityTaskDescript => 'Требуется собрать и подтвердить перемещение вещей в ячейку с заказом, или отклонить товар с выбранной причиной!';
	String get logisticsWithdrawTaskDescript => 'Требуется собрать и подтвердить перемещение вещей из ячейки с заказом в ячейку возврата';
	String get logisticsPackTaskDescript => 'Требуется сканирование содержимого каждой упаковки для подтверждения готовности на отправку';
	String get logisticsSendTaskDescript => 'Требуется отсканировать упаковку для подтверждения отправки пакета по заказу';
	String get logisticsTabsDescript => 'Будьте внимательны, выполняя задачи. Ваши действия не подлежат отмене!';
	String get tabs => 'Вкладки';
	String get logisticsTabsAvailableTask => 'Доступные задачи';
	String get taskList => 'Список задач';
	String get rejectWithReason => 'Отклонить с причиной';
	String get skipProduct => 'Пропустить товар';
	String get findAnotherCell => 'Найти другую ячейку';
	String get reasonReject_1 => 'Отсутствует пуговица';
	String get reasonReject_2 => 'Дефект молнии';
	String get reasonReject_3 => 'Наличие зацепок';
	String get reasonReject_4 => 'Наличие пятен';
	String get reasonReject_5 => 'Дефект шва';
	String get reasonReject_6 => 'Наличие катышек';
	String get reasonReject_7 => 'Дефект бретельки';
	String get reasonReject_8 => 'Наличие царапин или заломов';
	String get reasonReject_9 => 'Дефект крепления';
	String get reasonReject_10 => 'Наличие отверстия от аларма';
	String get reasonReject_11 => 'Наличие брака';
	String get reasonReject_12 => 'Не для продажи в Интернет Магазине';
	String get reasonReject_13 => 'Товар отсутствует';
	String get rejectSelectTitle => 'Выберите причину отклонения';
	String get confirmRejection => 'Подтвердите отклонение';
	String get rejectItemIsNotPossible => 'Отклонение позиции невозможно';
	String get rejectItemIsNotPossibleMessage => 'Товар при подтверждений наличия, был подтвержден не через ТСД';
	String get confirmItemIsNotPossible => 'Подтверждение позиции невозможно';
	String get confirmItemIsNotPossibleMessage => 'Товар при подтверждений наличия, был подтвержден не через ТСД';
	String get confirmPackageIsNotPossible => 'Подтверждение пакета невозможно';
	String get confirmPackageIsNotPossibleMessage => 'Некоторый или весь товар в пакете, при подтверждении наличия был подтвержден не через ТСД';
	String get notAvailableProductAccessList => 'Отсутствует список доступных товаров';
	String get scanThePackageSendDescript => 'Отсканируйте, чтобы подтвердить отправку этого пакета';
	String get scanThePackagePackDescript => 'Отсканируйте, чтобы подтвердить упаковку этого пакета';
	String get cellSearch => 'Поиск по ячейкам';
	String get cellSearchDescript => 'Дождитесь завершения поиска местоположения товара';
	String get logisticsConfirmLocationCell => 'В этой ячейке предположительно находится текущий товар';
	String get logisticsConfirmNotLocationCell => 'Не удалось найти местоположение товара в ячейках, на складе';
	String get notFound => 'Не найдено';
	String get startSearch => 'Начинайте поиск';
	String get searchFrom3Char => 'Поиск от 3-ех символов';
	String get nothingWasFound => 'Ничего не нашлось';
	String get invalidOrderPackageCodeScanned => 'Отсканирован неверный код пакета заказа';
	String get requiredFullScanned => 'Требуется отсканировать все содержимое в процессе';
	String get logisticsOrderNotAccessConfirmWithoutCell => 'Содержимое и подтверждение не доступно в этой задаче!';
	String get logisticsConfirmItemNeedStepWait => 'Подождите';
	String get logisticsConfirmItemNeedStepWaitAction => 'Ожидание действия';
	String get logisticsConfirmItemNeedActionScanCell => 'Отсканируйте ячейку';
	String get logisticsConfirmItemNeedActionScanItem => 'Отсканируйте товар';
	String get scanCellSpecifiedLocation => 'Отсканируйте ячейку указанную в местоположении';
	String get noScanningRequiredFollowSteps => 'Сканирование не требуется. Выполните предложенные действия';
	String qtyUnits({required Object qty}) => '${qty} ед.';
	String confirmHaveReturnedCell({required Object article, required Object size, required Object cell}) => 'Вы подтверждаете что вернули ${article} / ${size} в ячейку ${cell}';
	String confirmHaveReturned({required Object article, required Object size}) => 'Вы подтверждаете что физически убрали ${article} / ${size} из текущего процесса';
	String confirmHaveReturnedError({required Object article, required Object size}) => 'Не удалось отменить сканирование ${article} / ${size} в текущем процессе';
	String confirmHaveReturnedSuccess({required Object article, required Object size}) => 'Сканирование ${article} / ${size} было отменено в текущем процессе';
	String hiUser({required Object emoji, required Object userName}) => '${emoji} Привет, ${userName}';
	String terminalID({required Object tid}) => 'Терминал.ID: ${tid}';
	String versionTsd({required Object name, required Object api}) => 'Версия TSD: ${name} (api v. ${api})';
	String ofData({required Object a, required Object b}) => ' ${a} из ${b} ед.';
	String sizeNotRepresentedOnTheScreen({required Object size}) => 'Размер \'${size}\' не отображается на экране';
	String updateVersion({required Object emoji, required Object v}) => '${emoji} Версия ${v}';
	String upload({required Object value, required Object total}) => 'Загружаем ${value} / ${total} мб.';
	String currentAppLastAvailable({required Object v}) => 'Текущая версия приложения ${v} является последней доступной версией для вас!';
	String savePercent({required Object percent}) => 'Сохраняем ${percent}%';
	String lastUpdateDb({required Object date}) => 'Последнее обновление: ${date}';
	String quantity({required Object emoji, required Object qty}) => '${emoji} Количество - ${qty}';
	String addingGoodsToCell({required Object cellName}) => 'Внесение товаров в ячейку ${cellName}';
	String removalGoodsFromCell({required Object cellName}) => 'Вынесение товаров из ячейки ${cellName}';
	String adjustmentCell({required Object cellName}) => 'Корректировка ячейки ${cellName}';
	String movingItemsFromCell({required Object cellName}) => 'Перемещение товаров из ячейки ${cellName}';
	String moveGoodsTheCell({required Object qty, required Object cellTo}) => 'Переместить ${qty} ед. товара в ячейку ${cellTo}';
	String removalGoodsFromCellInPackage({required Object cellName}) => 'Вынесение товаров из ячейки ${cellName} в упаковку';
	String takeToCellInPackage({required Object qty, required Object cellFrom, required Object packageId}) => 'Вынести ${qty} ед. товара из ячейки ${cellFrom} в упаковку ${packageId}';
	String selectWarehouseTitle({required Object name}) => 'Переключиться на ${name}';
	String selectWorkAreaTitle({required Object workareaName, required Object warehouseName}) => 'Переключиться в зону работы ${workareaName} ${warehouseName}';
	String packageId({required Object id}) => 'Упаковка #${id}';
	String orderWithGrid({required Object orderId}) => 'Заказ #${orderId}';
	String scanThePackage({required Object packageId}) => 'Отсканируйте пакет #${packageId}';
	String confirmRejectionMessage({required Object article, required Object size, required Object reason}) => 'Подтвердите что хотите отклонить ${article} / ${size} по причине - ${reason}';
	String inCell({required Object cellName}) => 'В ячейке ${cellName}';
	String dateCreate({required Object date}) => 'Дата создания ${date}';
	String qtyPieces({required Object qty}) => '${qty} шт.';
	String departureWarehouse({required Object warehouse}) => 'Откуда ${warehouse}';
	String placePackageInCell({required Object cell}) => 'Разместить упаковку в ячейку ${cell}';
	String addingGoodsToPackaging({required Object packageId}) => 'Внесение товаров в упаковку ${packageId}';
	String removalGoodsFromPackaging({required Object packageId}) => 'Вынесение товаров из упаковки ${packageId}';
	String placementGoodsFromPackaging({required Object packageId}) => 'Размещение товаров из упаковки ${packageId}';
	String scanCellName({required Object cellName}) => 'Отсканируйте ячейку ${cellName}';
	String scannedInvalidCell({required Object cellName}) => 'Требовалось отсканировать ячейку ${cellName}';
	String requiredMatrix({required Object article, required Object size}) => '${article} - ${size}, нужно отсканировать матрицу';
	String alreadyMatrix({required Object article, required Object size}) => '${article} - ${size} вы уже отсканировали эту матрицу';
	String barcodeFailedScan({required Object barcode}) => '${barcode}, не удалось сохранить сканирование!';
	String barcodeScanned({required Object barcode}) => '${barcode}, отсканирован!';
	String failedSaveScan({required Object barcode}) => '${barcode}, не удалось сохранить сканирование!';
	String itemPlaceInCell({required Object article, required Object size, required Object cell}) => '${article} - ${size}, помещен в ${cell}\'';
	String itemPlaceInCellFailed({required Object article, required Object size}) => '${article} - ${size}, не удалось разместить';
	String leftCells({required Object qty}) => 'Осталось - ${qty} яч.';
	String get productPlacement => 'Размещение товара';
	String get productChecking => 'Проверка товара';
	String get repeatLogin => 'Подтверждение аккаунта завершено\nПожалуйста повторите вход';
	String get inStock => 'В наличии';
	String get notInStock => 'Нет в наличии';
	String get price => 'Цена';
	String get color => 'Цвет';
	String get codeIsNotProduct => 'Код не от товара';
	String get invalidProductCodeType => 'Неверный тип кода, отсканируйте код товара';
	String get isMissing => 'Отсутствует';
	String get sale => 'Sale';
	String get lichiId => 'Lichi ID';
	String get onRegistered => 'Аккаунт успешно привязан\nПожалуйста запросите данные для входа у техподдержки';
	String get toRegistration => 'Зарегистрироваться';
	String get alreadyRegistered => 'Данный аккаунт уже существует';
	String inventoryCell({required Object cellName}) => 'Инвентаризация ячейки ${cellName}';
	String get inventoryCellScanNotify => 'Отсканируйте идентификатор ячейки изображенный на QR - коде, для целей инвентаризации';
	String get inventoryCellScanNotifyDubai => 'Отсканируйте идентификатор ячейки изображенный на QR - коде, для целей инвентаризации на складах Дубай';
	String get inventoryCellCorrection => 'Посчитать ячейку';
	String get inventoryCellConfirm => 'Подтвердить пустоту';
	String get inventoryCellZeroing => 'Обнулить ячейку';
	String get executor => 'Исполнитель';
	String get undefined => 'Неопределено';
	String get confirmation => 'Подтверждение';
	String get counting => 'Подсчет';
	String get result => 'Результат';
	String get zeroing => 'Обнуление';
	String get inventoryNotCarriedOut => 'Инвентаризация не проведена';
	String get inventoryCarriedOut => 'Инвентаризация проведена';
	String get inventoryCarriedOutWithError => 'Инвентаризация проведена. Имеются расхождения';
	String get productCheckingScanNotify => 'Отсканируйте штрихкод товара, для проверки товара';
	String get incorrectPincode => 'Неверный пинкод\nпинкод должен содержать только цифры';
}

// Path: <root>
class _TranslationsEn extends Translations {
	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	_TranslationsEn.build({Map<String, Node>? overrides, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver})
		: assert(overrides == null, 'Set "translation_overrides: true" in order to enable this feature.'),
		  $meta = TranslationMetadata(
		    locale: AppLocale.en,
		    overrides: overrides ?? {},
		    cardinalResolver: cardinalResolver,
		    ordinalResolver: ordinalResolver,
		  ),
		  super.build(cardinalResolver: cardinalResolver, ordinalResolver: ordinalResolver) {
		super.$meta.setFlatMapFunction($meta.getTranslation); // copy base translations to super.$meta
		$meta.setFlatMapFunction(_flatMapFunction);
	}

	/// Metadata for the translations of <en>.
	@override final TranslationMetadata<AppLocale, Translations> $meta;

	/// Access flat map
	@override dynamic operator[](String key) => $meta.getTranslation(key) ?? super.$meta.getTranslation(key);

	@override late final _TranslationsEn _root = this; // ignore: unused_field

	// Translations
	@override String get warehouse => 'Warehouse';
	@override String get notSelected => 'Not selected';
	@override String get notifyScanQrWarehouse => 'Scan the QR code of the warehouse or work area. You will open the modules available for the warehouse';
	@override String get userID => 'User.ID';
	@override String get notificationCompletionWork => 'Be sure to complete the work, all requests are executed on your behalf!';
	@override String get finishJob => 'Finish the job';
	@override String get requestCannotExecuted => 'The request cannot be executed';
	@override String get settings => 'Settings';
	@override String get noModulesAvailable => 'No modules available';
	@override String get noModulesAvailableDescript => 'There are no modules available for work in this warehouse, change the warehouse or contact technical support!';
	@override String get selectWarehouse => 'Select a warehouse';
	@override String get selectWarehouseDescript => 'A consolidated warehouse is displayed on your account. Scan the available warehouse where you will work!';
	@override String get exitUserTitle => 'Completion of work';
	@override String get exitUserMessage => 'Do you really want to shut down the terminal?';
	@override String get invalidCodeType => 'Invalid code type';
	@override String get invalidCodeFormat => 'Invalid code format';
	@override String get invalidAuthCodeType => 'Invalid code type, scan your personal qr code';
	@override String get invalidOrderPackageCodeType => 'Invalid code with the package order ID';
	@override String get invalidWarehouseWorkareaCodeType => 'Invalid code type, scan the code of the warehouse or work area';
	@override String get failedDecryptQrCode => 'Failed to decrypt qr code';
	@override String get doesNotCodeTask => 'The code does not match the task';
	@override String get probablyCode => 'The code is probably corrupted. Data could not be read!';
	@override String get selectWarehouseMessage => 'Confirm that you really want to switch to the currently selected warehouse';
	@override String get selectWorkAreaMessage => 'Confirm that you really want to switch to the selected zone';
	@override String get language => 'English';
	@override String get calculation => 'Calculation';
	@override String get clearingDb => 'Clearing the database';
	@override String get updatingProductDb => 'Updating the product database';
	@override String get thereErrors => 'There are errors';
	@override String get errors => 'Errors';
	@override String get done => 'Done';
	@override String get onPageNotifyTitle => 'There are problems';
	@override String get onPageNotifyMessage => 'Some steps could not be completed, please contact the developer for clarification!';
	@override String get checkingTerminal => 'Checking the terminal';
	@override String get notificationVerifyTerminal => 'Do not turn off the device while checking and updating';
	@override String get continueL => 'Continue';
	@override String get noDataAvailable => 'No data available';
	@override String get consolidatedResult => 'Consolidated result for all active documents in the current module. Click to update the result and documents';
	@override String get activeDocuments => 'Active documents';
	@override String get completedDocuments => 'Completed documents';
	@override String get unableOpenDocument => 'Unable to open the document';
	@override String get updateListDocumentTitle => 'Updating data';
	@override String get updateListDocumentMessage => 'Update the list of documents?';
	@override String get statusUploadCompletedDocuments => 'Uploading completed\ndocuments';
	@override String get statusUploadingActiveDocuments => 'Uploading active\ndocuments';
	@override String get listCompletedDocuments => 'List of completed documents';
	@override String get listActiveDocuments => 'List of active documents';
	@override String get listPackageContents => 'List of package contents';
	@override String get thereNoDocuments => 'No documents available';
	@override String get contentsEmpty => 'The contents are empty';
	@override String get documents => 'Documents';
	@override String get barcodeAndArticle => 'Barcode/article';
	@override String get title => 'Title';
	@override String get history => 'History';
	@override String get outputHistory => 'Output of history, current process, sequential scan. Click to see details or perform an action!';
	@override String get storyEmpty => 'The story is empty';
	@override String get listEmpty => 'The list is empty';
	@override String get endList => 'End of the list';
	@override String get sortList => 'Sort the list or remove the selected filters';
	@override String get added => 'Added';
	@override String get unScanned => 'Un - scanned';
	@override String get scanned => 'Scanned';
	@override String get all => 'All';
	@override String get selectActionSelectedPosition => 'Select an action on the selected position!';
	@override String get resetToZero => 'Reset to Zero';
	@override String get mistake => 'Mistake';
	@override String get resetPositionWarning => 'The position is reset, but the position in the interface could not be updated. Reload the document!';
	@override String get list => 'List';
	@override String get emptyList => 'Empty list';
	@override String get motionCreationFormValidationCreateMoving => 'Be sure to check the form data before creating a move!';
	@override String get createMove => 'Create a move';
	@override String get fromDocumentCreateMove => 'From this document, the goods are taken to create their movements to another warehouse';
	@override String get uploadingDataMove => 'Uploading data\nto move';
	@override String get goodsBeingMoved => 'Goods being moved';
	@override String get simplifiedRelocation => 'Simplified relocation';
	@override String get transferAutoAccepted => 'This transfer will be automatically accepted at the receiving warehouse!';
	@override String get standardMovement => 'Standard movement';
	@override String get transferNeedAccepted => 'This transfer will need to be accepted at the receiving warehouse!';
	@override String get warehouseRecipient => 'Warehouse recipient';
	@override String get departureWarehouseAuto => 'the treasure of the shipment is set automatically.\nSelect the receipt warehouse!';
	@override String get choose => 'Choose';
	@override String get specify => 'Specify';
	@override String get attach => 'Attach';
	@override String get notAttach => 'Not attached';
	@override String get scanProducts => 'Scan products';
	@override String get selectProducts => 'Select products';
	@override String get notDataCreateMove => 'Could not get the data required for the move!';
	@override String get notSortItemsErrorMove => 'Couldn\'t sort through the items. Creating a move is impossible!';
	@override String get clearingCurrentProcess => 'Clearing the current process';
	@override String get confirmClearCurrentFormMove => 'Confirm that you want to clear the current move form!';
	@override String get formTransferCleared => 'The transfer form has been cleared';
	@override String get failedClearMove => 'Failed to clear the move';
	@override String get selectionGoodsMove => 'Selection of goods to move';
	@override String get returnCreationMove => 'Return to Creation Move';
	@override String get backContinueCreatingMove => 'Click to go back and continue creating the move';
	@override String get receiptWarehouse => 'Receipt Warehouse';
	@override String get listProductCreateTransfer => 'A list of products to create a transfer to another warehouse!';
	@override String get noReceivingWarehouseSelected => 'The recipient warehouse is not selected';
	@override String get noGoodsCreateMove => 'There are no goods to create a move!';
	@override String get errorFormingListProducts => 'Error in forming the list of products';
	@override String get creatingMove => 'Creating a move';
	@override String get updateDb => 'Update the database';
	@override String get checkingDb => 'Checking the Database';
	@override String get gettingDb => 'Getting data';
	@override String get noDataUploadedDb => 'No data uploaded';
	@override String get getErrorAllProducts => 'Could not get the data of all products';
	@override String get dataUpdateDb => 'Data updated';
	@override String get updatedDb => 'The data is updated, the database contains all available products';
	@override String get noDataRecordedDb => 'No data recorded';
	@override String get writtenErrorDb => 'Data could not be written to the local database.';
	@override String get database => 'Database';
	@override String get removal => 'Removal';
	@override String get clearDbConfirm => 'Do you really want to clean up the entire local database?';
	@override String get localDbCleaned => 'The local database has been cleaned and restored';
	@override String get failedClearDb => 'Failed to clear the database';
	@override String get restoreDb => 'Restore the database';
	@override String get checkingUpdate => 'Checking for updates';
	@override String get languageLabel => 'Language';
	@override String get failedLoadTradingFloorData => 'Failed to load trading floor data';
	@override String get failedLoadLogisticsTabData => 'Failed to load logistics section data';
	@override String get uncertainGoods => 'Uncertain goods';
	@override String get confirmOrPostTradingHall => 'Confirm or post the products in the trading floor that are presented in this list';
	@override String get calcTradingHall => 'Calculation of the percentage of the trading floor filling based on scanned data based on the current day\'s balances!';
	@override String get scanHall => 'Scan the hall';
	@override String get dataNotUpdated => 'Data not updated';
	@override String get errorUpdatingDataTradingHall => 'An error occurred while updating the data, the data is not up to date. Try updating manually!';
	@override String get scanAllEachProductsTradingHall => 'Scan all the products in the showcase, one unit of each size range, to check the sales floor';
	@override String get uploadingActiveDocuments => 'Uploading active\ndocuments';
	@override String get uploadingDataTabsLogistics => 'Loading partition\n data';
	@override String get uploadingLogisticsListAvailability => 'Loading the list of orders\n with goods for confirmation';
	@override String get uploadingLogisticsListWithdraw => 'Loading a list of orders\n with goods for withdrawal from the reserve';
	@override String get uploadingLogisticsListPack => 'Loading the list of orders\n for packaging';
	@override String get uploadingLogisticsListSend => 'Loading the list of orders\n with packages for shipment';
	@override String get uploadingOrderData => 'Loading order\n data';
	@override String get tradingHall => 'Trading hall';
	@override String get invalidUserLogin => 'Invalid user login';
	@override String get userLogin => 'User login';
	@override String get invalidPassword => 'Invalid password';
	@override String get password => 'Password';
	@override String get scanPersonalCodeAuth => 'Scan your personal code\n to access the terminal!';
	@override String get invalidData => 'Invalid data';
	@override String get authErrorTerminal => 'Authorization error in the terminal';
	@override String get dataLoadedToCreateMove => 'Data is being loaded to create a move';
	@override String get couldNotGetDocuments => 'Could not get these documents!';
	@override String get uploadingControlData => 'Uploading control\ndata';
	@override String get byCurrentWarehouse => 'by current warehouse';
	@override String get noControl => 'There is no control';
	@override String get moveItemsAccepted => 'Move the items that were accepted but not moved to another warehouse!';
	@override String get control => 'Control';
	@override String get checkingForUpdates => 'Checking for updates';
	@override String get problemUpdating => 'If you have problems updating, write to technical support';
	@override String get updateDownloadFromServer => 'The update is being downloaded from the server, after which you will be offered to install it';
	@override String get installUpdateOnlyAndroid => 'Installing the update is currently only possible for Android';
	@override String get anErrorOccurredDownloadingInstall => 'An error occurred while downloading and installing';
	@override String get updateCenterApp => 'Update Center\napplications';
	@override String get reboot => 'Reboot';
	@override String get clearProcess => 'Clear the process';
	@override String get setAreaTitle => 'You can\'t change the zone';
	@override String get setAreaMessage => 'After the start of scanning, when the document is not empty, you cannot change the scanning area. You can change it after sending or clearing the document!';
	@override String get scanSectionSuccessInstalled => 'The scan section has been successfully installed';
	@override String get failedSetScanArea => 'Failed to set the scan area';
	@override String get productDbIsEmpty => 'The product database\nis empty';
	@override String get stateEmptyProcess => 'Working with the process\nis impossible';
	@override String get stateBlocked => 'Working with the process\nis not allowed';
	@override String get stateExistScanned => 'Scan data\nis available';
	@override String get stateExtraScanned => 'Unnecessary scans\nin the process';
	@override String get stateStart => 'Fulfill the condition\nbefore starting work';
	@override String get followSuggestedConditions => 'Follow the suggested conditions to get started';
	@override String get zone => 'Zone';
	@override String get package => 'Package';
	@override String get setZone => 'Set the zone';
	@override String get setPackage => 'Attach the packaging';
	@override String get clickChangeArea => 'Click to change the work area!';
	@override String get clickChangePackage => 'Click to attach another package!';
	@override String get scanError => 'Scan error';
	@override String get awaitLastScan => 'The previous scan has not been processed yet, before the start of the current one.';
	@override String get invalidUnreadableCode => 'Invalid/unreadable code. Try again or enter manually!';
	@override String get notBarcodeInDb => 'Couldn\'t find this barcode in the database';
	@override String get simplifiedManualInput => 'Simplified manual input';
	@override String get productIsNotList => 'The product is not in the list';
	@override String get positionIsNotScanList => 'This position is not in the scan list, you can add it. Confirm!';
	@override String get positionMissingCurrentProcess => 'This position is missing in the current process';
	@override String get positionAlreadyBeenScanned => 'This position has already been scanned';
	@override String get conditionsNotScan => 'The conditions are not met before starting the scan';
	@override String get emptyProcess => 'Empty process';
	@override String get youHaveNotScanned => 'You have not scanned anything, an empty process cannot be sent!';
	@override String get cancelingScan => 'Canceling a scan';
	@override String get confirmCancelAction => 'Confirm that you want to cancel this action';
	@override String get actionCanceled => 'Action canceled';
	@override String get couldNotCancelAction => 'Could not cancel the action';
	@override String get cancelingLastScan => 'Canceling the last scan';
	@override String get confirmCancelLastScan => 'Confirm that you want to cancel the last scan';
	@override String get lastActionCanceled => 'Last action canceled';
	@override String get couldUndoLastAction => 'Could not undo the last action';
	@override String get zeroingPosition => 'Zeroing the position';
	@override String get confirmResetPosition => 'Confirm that you want to reset this position';
	@override String get positionResetToZero => 'The position is reset to zero';
	@override String get failedResetPosition => 'Failed to reset the position';
	@override String get accessInNotProvided => 'Access is not provided';
	@override String get blockingDataIsUnknown => 'Blocking data is unknown';
	@override String get terminals => 'Terminals';
	@override String get blockedDescript_one => 'It was not possible to check the blocking of this process. Try again later or contact support!';
	@override String get blockedDescript_two => 'It was not possible to block this process for you. Try again later or contact support!';
	@override String get blockedDescript_three => 'This process is blocked by another user. Close the process or find a terminal and unlock it!';
	@override String get updateDbScan => 'Update the database';
	@override String get updateDbScanDescript_1 => 'Update the product database at the terminal, go to ';
	@override String get updateDbScanDescript_2 => 'settings - database - update. ';
	@override String get updateDbScanDescript_3 => 'After that, the scanning process will become available!';
	@override String get emptyProcessDescript_1 => 'This scan requires ';
	@override String get emptyProcessDescript_2 => 'data';
	@override String get emptyProcessDescript_3 => ' which failed to load. Try again or contact technical support!';
	@override String get confirmAndStart => 'Confirm and start';
	@override String get beforeStartActionsCorrect => 'Before you start, make sure that your actions are correct. You are fully responsible for your actions.';
	@override String get selectAction => 'Select an action';
	@override String get startConfirm => 'Start confirm';
	@override String get listCurrentProcess => 'List of the current process';
	@override String get outputContentsCurrentScanningProcess => 'Output of the contents of the current scanning process. Click on a position to select an action!';
	@override String get scanHistory => 'Scan History';
	@override String get cancelAction => 'Cancel the action';
	@override String get cancelingLastActionHistory => 'Canceling the last action on the history. Click to roll back or the \'esc\' button on the terminal!';
	@override String get mainAction => 'Main action. Press the (ent) button';
	@override String get loadingDataProcess => 'Loading the data\nof the process';
	@override String get failedConvertItemsCreateMove => 'Failed to convert items to create a move!';
	@override String get acceptMove => 'Accept the move';
	@override String get acceptOrder => 'Accept the order';
	@override String get clickAcceptScannedItems => 'Confirm to accept the scanned items';
	@override String get confirmAction => 'Confirm the action!';
	@override String get confirmAcceptCurrentScannedItems => 'Do you really want to accept the current scanned items?';
	@override String get sendStatement => 'Send to the statement';
	@override String get assembleToOrder => 'Assemble to order';
	@override String get clickAssembleToShipmentOnMove => 'Confirm to send the data to the transfer order';
	@override String get clickAssembleToShipmentOnOrder => 'Confirm to send the data to the customer\'s order';
	@override String get clickSendInventoryData => 'Confirm to send to the inventory statement';
	@override String get confirmSendCurrentScannedItemsInventory => 'Do you really want to send the current scanned items to the inventory list?';
	@override String get saveReport => 'Save to Report';
	@override String get clickSendScanDataReport => 'Confirm to send the scan data to the report';
	@override String get confirmYourIntention => 'Confirm your intention';
	@override String get confirmSendCurrentScannedItemsTradingHall => 'Do you really want to send the current scanned items to the sales floor report';
	@override String get manual => 'manually';
	@override String get scanning => 'scanned';
	@override String get unknown => 'unknown';
	@override String get reauthorizationRequired => 'Reauthorization required';
	@override String get terminalNotUsed => 'The terminal has not been used for more than 30 minutes. \nauthorization will be required!';
	@override String get groupAcceptanceTitle => 'Acceptance of goods';
	@override String get groupAcceptanceDescript => 'Choose the appropriate type of acceptance';
	@override String get groupWarehouseMovementsTitle => 'Warehouse movements';
	@override String get groupWarehouseMovementsDescript => 'Create or accept a move between warehouses';
	@override String get groupShipmentTitle => 'Collecting orders';
	@override String get groupShipmentTitleDescript => 'Working with orders of available types';
	@override String get moduleInventoryName => 'Inventory';
	@override String get moduleInventoryCellName => 'Inventory of cells';
	@override String get moduleAcceptanceOnAdmissionOCName => 'By order of the supplier';
	@override String get moduleShipmentOnMoveName => 'to move';
	@override String get moduleShipmentOnOrderName => 'supplier';
	@override String get moduleAcceptanceOnAdmissionOCFullName => 'Acceptance on admission By order of the supplier';
	@override String get moduleAcceptanceOnAdmissionWOCName => 'By invoice';
	@override String get moduleAcceptanceOnAdmissionWOCFullName => 'Acceptance on admission By invoice';
	@override String get moduleCreateMove => 'Create a move';
	@override String get moduleTradingHall => 'Trading hall';
	@override String get moduleAcceptanceOnMoveName => 'Accept the move';
	@override String get moduleControlMovingName => 'Movement control';
	@override String get moduleControlPlacementName => 'Placement control';
	@override String get moduleAcceptanceOnMoveFullName => 'acceptance on admission By move';
	@override String get moduleControl => 'Control';
	@override String get serverResponseParameterMissing => 'Server response parameters are missing';
	@override String get invalidResponseFromServer => 'Invalid response from the server!';
	@override String get requestHasNotBeenSent => 'The request has not been sent. Request error!';
	@override String get notification => 'Notification';
	@override String get updateCellNotify => 'The cell data will be updated after performing the last actions!';
	@override String get requestError => 'Request error';
	@override String get sessionIsNotActive => 'The session is not active';
	@override String get sessionRejected => 'The session was rejected by the server reauthorization will be required!';
	@override String get iSee => 'I see';
	@override String get confirm => 'Confirm';
	@override String get cancel => 'Cancel';
	@override String get updateAvailable => 'An app update is available';
	@override String get absentDescriptUpdate => 'There is no description of the update';
	@override String get updateNewDescript => 'What\'s new in this version?';
	@override String get goToUpdate => 'Go to Update';
	@override String get later => 'Later';
	@override String get barcodeAbbreviated => 'Bc.';
	@override String get articleAbbreviated => 'Art.';
	@override String get inputType => 'Input type';
	@override String get closeClickEmptySpace => 'To close, click on any empty space';
	@override String get simplifiedMode_1 => 'Simplified mode';
	@override String get simplifiedMode_2 => ', it is enough to enter the last 5 digits of the barcode';
	@override String get manualInput => 'Manual input';
	@override String get close => 'Close';
	@override String get releaseButtonTopToClose => 'Release ▲ to close';
	@override String get enterPinCodePhysicalButtons => 'Enter the pin code using the physical buttons of the terminal';
	@override String get clear => 'Clear';
	@override String get specifyArea => 'Specify the scan area where you are going to scan';
	@override String get zoneIsNotSpecify => 'The zone is not specified';
	@override String get scanningArea => 'Scanning area';
	@override String get failedProductData => 'Failed to get product information.';
	@override String get scanProductShowTheScreen => 'Scan the product shown on the screen';
	@override String get scannedWrongCode => 'You scanned the wrong code';
	@override String get scanCurrentProductInfo => 'Scan the shown dimensions for confirmation. Switch between products using the arrows, down arrow - zoom in on the photo!';
	@override String get releaseTheButtonClose => 'Release the button to collapse';
	@override String get couldNotFindItemInCurrentProcess => 'Could not find this product in the current process';
	@override String get maxItemScanned => 'The maximum number of items scanned';
	@override String get startScanning => 'Start scanning';
	@override String get continueScanning => 'Continue scanning';
	@override String get infoItemLastProduct => 'Here you will see information about the last scanned product!';
	@override String get infoPlacementScanned => 'Scan the product and you will be shown the location options for placement!';
	@override String get moduleCell => 'Cell';
	@override String get modulePackage => 'Package';
	@override String get orderNumber => 'Order and packaging number';
	@override String get packagingID => 'Packaging ID';
	@override String get modulePlacement => 'Placement';
	@override String get moduleSettings => 'Settings';
	@override String get forConfirmation => 'For confirmation';
	@override String get onPackaging => 'On the packaging';
	@override String get withdrawalFromTheReserve => 'Withdrawal from the reserve';
	@override String get toSend => 'To send';
	@override String get moduleCreateImplementation => 'Create an implementation';
	@override String get createImplementation => 'Create an implementation';
	@override String get attachedProducts => 'Attached products';
	@override String get requisites => 'Requisites';
	@override String get motionCreationFormValidationCreateImplementation => 'Before creating an implementation, make sure that everything is selected correctly. You are personally responsible for the incorrect implementation!';
	@override String get errorDataAuth => 'Error in generating data received during authorization';
	@override String get inProgressUserSettingDevice => 'Customizing\n the device';
	@override String get inProgressUserSettingDeviceDescript => 'Please do not disconnect the device, in order to avoid the crash of the application!';
	@override String get checkClearDbError => 'The database could not be converted. Try again in the settings or contact technical support!';
	@override String get checkUpdateBaseError => 'An error occurred while updating the nomenclature database. Try again in the settings or contact technical support!';
	@override String get unableRequestAnUpdateFromServer => 'Unable to request an update from the server';
	@override String get requestTimeOut => 'The waiting time has been exceeded. There is no internet connection or problems on the server side!';
	@override String get more => 'More';
	@override String get errorDetails => 'Error Details';
	@override String get isNoDetailedError => 'There is no detailed description of the error';
	@override String get waitingTimeExceed => 'The waiting time has been exceeded. Download canceled!';
	@override String get updateAndInstall => 'Update and install';
	@override String get updateAndSave => 'Update and save';
	@override String get uploadWait => 'Uploading';
	@override String get checkingForAppUpdates => 'Checking for app updates';
	@override String get checkingForAppUpdatesDescript => 'We are looking for the latest available updates that suit you according to the parameters';
	@override String get checkingForBaseProductUpdates => 'Checking the database';
	@override String get checkingForBaseProductUpdatesDescript => 'Uploading information on the current product database on the device';
	@override String get noUpdateAvailable => 'No updates available';
	@override String get requirementsSelectType => 'Requirements of the selected type';
	@override String get requirementsSelectTypeDescript => 'For the selected type of movement, additional data is required.';
	@override String get codeIsNotePackage => 'The code is not from the packaging';
	@override String get codeIsNoteCell => 'The code is not from the cell';
	@override String get codeIsNoteWarehouse => 'The code is not from the warehouse';
	@override String get codeIsNoteWorkArea => 'The code is not from the work area';
	@override String get scanPackage => 'Scan the package';
	@override String get scanCell => 'Scan the cell';
	@override String get selectPackageMovingTypeFromCell => 'Select the cell from which you want to move the item';
	@override String get selectPackageMovingTypeFromPackage => 'Select the packaging from which you want to move the goods';
	@override String get selectPackageMovingTypePackage => 'Select the package you are going to move';
	@override String get cellLocatedAnotherWarehouse => 'The cell is located in another warehouse';
	@override String get autoSetPackageMovingError => 'Automatic presentation of packaging canceled';
	@override String get autoSetCellMovingError => 'Auto-presentation of the cell has been canceled';
	@override String get packageIsNotConditionMoving => 'Packaging is not suitable for creating a move';
	@override String get packageContentEmptyMoving => 'The contents of the package are empty or could not be obtained!';
	@override String get packageItemsEmpty => 'The contents of the package are empty or could not be retrieved';
	@override String get invalidCellData => 'Invalid cell data in the code. Maybe the code is outdated!';
	@override String get invalidPackageData => 'Incorrect packaging data in the code. Maybe the code is outdated!';
	@override String get invalidWorkAreaData => 'Invalid work zone data in the code. Maybe the code is outdated!';
	@override String get invalidWarehouseData => 'Incorrect warehouse data in the code. Maybe the code is outdated!';
	@override String get selectTypeMovementTitle => 'Choosing the type of movement';
	@override String get selectTypeMovementDescript => 'Select the type of movement from the available ones. When changing, the rest of the form fields are cleared!';
	@override String get type => 'Type';
	@override String get typeMovementNotSelected => 'The type of movement is not selected';
	@override String get noCellSelected => 'The cell from which you plan to move is not selected';
	@override String get noFromPackageSelected => 'The package from which you plan to move is not selected';
	@override String get noMovePackageSelected => 'The package you plan to move has not been selected';
	@override String get movingSelectCell => 'Select a cell or change the type of movement';
	@override String get movingSelectPackage => 'Choose a package or change the type of movement';
	@override String get cellDescriptInModule => 'Press the physical button (F1) on the terminal to immediately open the available actions on the cell, if any.';
	@override String get content => 'Content';
	@override String get problems => 'Problems';
	@override String get reserve => 'Reserve';
	@override String get invalidReserve => 'Invalid reserve';
	@override String get incorrectContentCell => 'Incorrect content';
	@override String get incorrectProductsCell => 'Incorrect products';
	@override String get lastAction => 'Last action';
	@override String get packageMovingWaitTitle => 'Waiting for acceptance';
	@override String get packageArchive => 'Packaging in the archive';
	@override String get openAnotherPackage => 'Open another package';
	@override String get confirmChangePackage => 'Confirm that you want to open another package';
	@override String get openAnotherOrder => 'Open another order';
	@override String get confirmChangeOrder => 'Confirm that you want to open another order';
	@override String get openAnotherCell => 'Open another cell';
	@override String get confirmChangeCell => 'Confirm that you want to open another cell';
	@override String get reloadPackageError => 'Could not get up-to-date packaging data. Try to scan again!';
	@override String get reloadCellError => 'Could not get up-to-date cell data. Try to scan again!';
	@override String get reloadLogisticsOrderError => 'Could not get up-to-date task data on the order. Try restarting!';
	@override String get confirmDisbandPackage => 'Do you really want to disband the packaging?';
	@override String get confirmZeroingCell => 'Do you really want to reset the contents of the cell?';
	@override String get dataIrrelevant => 'The data is out of date';
	@override String get whatDoesMean => 'What does it mean?';
	@override String get packageIrrelevantDescript => 'When updating the data, it was not possible to get new packaging data. Try to scan the package again!';
	@override String get cellIrrelevantDescript => 'When updating the data, it was not possible to get new cell data. Try to scan the cell again!';
	@override String get logisticsOrderIrrelevantDescript => 'When updating the data, it was not possible to get new data about the task on the order. Try again!';
	@override String get incorrectItemsCellDescript => 'The contents of the cell contain goods with a negative balance!';
	@override String get incorrectProductsCellDescript => 'Some products are in a cell, without SHK codes. You need to contact the administrators to fix it! Show problematic products?';
	@override String get packageLocation => 'Packaging location';
	@override String get packageLocationDescript => 'Indicates where the package is located in the system';
	@override String get cellLocation => 'Location of the cell';
	@override String get cellLocationDescript => 'Indicates where the cell is located in the system';
	@override String get packageScanNotify => 'Scan the packaging ID shown on the QR code';
	@override String get transitStorageOrderScanNotify => 'Scan the barcode of the order in transit storage';
	@override String get cellScanNotify => 'Scan the cell ID shown on the QR code';
	@override String get last30actionPackage => 'History of recent user actions on packaging. The last 30 of all actions are displayed!';
	@override String get last30actionCell => 'History of recent user actions on cell. The last 30 of all actions are displayed!';
	@override String get failedLogList => 'Failed to get a list of products from the action';
	@override String get updateDataQuest => 'Update the data?';
	@override String get changeDataPackage => 'Perhaps the packaging data has changed, do you want to update the data?';
	@override String get changeDataCell => 'Perhaps the cell data has changed, do you want to update the data?';
	@override String get cellWhichPlacePackage => 'The cell in which to place the package!';
	@override String get cellMoveProductTo => 'The cell to move the product to';
	@override String get whichTakeOutGoods => 'In which to take out the goods';
	@override String get whichAttachCurrentProcess => 'Which to attach to the current process';
	@override String get addToPackage => 'Add to the package';
	@override String get addToPackageDescript => 'Confirm to add the product to the package';
	@override String get correctionCell => 'Adjust the cell';
	@override String get correctionCellDescript => 'Confirm to correct the cell';
	@override String get moveToAnotherCell => 'Move to a cell';
	@override String get moveToAnotherCellDescript => 'Confirm to select the cell to move to';
	@override String get takeToPackageFromCell => 'Put it in the package';
	@override String get takeToPackageFromCellDescript => 'Confirm to put in the package';
	@override String get putCell => 'Add to the cell';
	@override String get putCellDescript => 'Confirm to add the product to the cell';
	@override String get confirmPack => 'Confirm the packaging';
	@override String get confirmPackDescript => 'Confirm that you have packed all the goods';
	@override String get tradingHallSaveToReport => 'Save to Report';
	@override String get tradingHallSaveToReportDescript => 'Confirm to save to today\'s showcase report';
	@override String get takeCell => 'Remove from the cell';
	@override String get takeCellDescript => 'Confirm to take the item out of the box';
	@override String get removeFromPackage => 'Remove from packaging';
	@override String get removeFromPackageDescript => 'Confirm to take the goods out of the package';
	@override String get noGoodsInPackage => 'There are no goods in the package';
	@override String get couldNotGetPlacementItems => 'Could not get information for the location of the goods';
	@override String get placeProducts => 'Place products';
	@override String get placeProductsDescript => 'Confirm to place the products in the cells';
	@override String get selectKeyboardNotify => 'You can select an item by clicking the corresponding number on the device';
	@override String get formatDate1 => 'dd MMM in HH:mm';
	@override String get formatDate2 => 'Time in HH:mm';
	@override String get acceptPackageConfirm => 'By accepting the package with all the contents, you take responsibility that you have checked the physical contents with the system!';
	@override String get acceptPackageBtn => 'Accept the packaging';
	@override String get openLinkedDocument => 'Open a linked document';
	@override String get acceptPackageHelp => 'You can immediately accept the package with all its contents. If the contents do not converge, perform the acceptance manually';
	@override String get failedToSelectScanMode => 'Failed to select the scan mode';
	@override String get failedGetPackage => 'Failed to get packaging information';
	@override String get packageIsNotProcessMovingCurrentWarehouse => 'The package is not in the process of being moved to the current warehouse';
	@override String get confirmCancellation => 'Confirm cancellation';
	@override String get confirmCancellationDescript => 'Do you really want to undo the last action in the current process? It will be impossible to cancel the actions!';
	@override String get barcode => 'Barcode';
	@override String get article => 'Article';
	@override String get size => 'Size';
	@override String get cell => 'Cell';
	@override String get matrix => 'Matrix';
	@override String get yes => 'Yes';
	@override String get no => 'No';
	@override String get successRollback => 'The scan was successfully canceled';
	@override String get errorRollback => 'Scan failed to cancel';
	@override String get couldGetInfoLastScan => 'Could not get information on the last scan';
	@override String get zeroingProduct => 'Zeroing the product';
	@override String get zeroingProductDescript => 'Do you want to clear all the scanning processes of this product?';
	@override String get positionSuccessReset => 'The position was successfully reset';
	@override String get positionErrorReset => 'The position could not be reset';
	@override String get pinch => 'Pinch';
	@override String get viewPhotoCurrentProduct => 'open a photo of the current product';
	@override String get cleanProcessConfirm => 'Cleaning up the process';
	@override String get cleanProcessConfirmDescript => 'Do you really want to clear the scan in the whole process? All current data will be permanently deleted!';
	@override String get couldExtractBarcodeFromMatrix => 'Couldn\'t extract barcode from matrix';
	@override String get couldFindBarcodeInDb => 'Couldn\'t find this barcode in the database';
	@override String get scanOfferedProduct => 'Scan the offered product';
	@override String get cellAutoClosed => 'The cell is automatically closed, all products are scanned';
	@override String get closeOpenCell => 'Close the open cell';
	@override String get requiredScanCodeCell => 'It is required to scan the QR code of the cell';
	@override String get cellIsNotAvailable => 'This cell is not available';
	@override String get cellWasOpen => 'The cell was open';
	@override String get cellWasClosed => 'The cell was closed';
	@override String get scanOfferedProductOrCurrentCellToClose => 'Scan the offered product or the current cell to close it!';
	@override String get collectAllRequiredItemsFromCell => 'Collect all the required items from this cell or scan the cell to close it!';
	@override String get scanSuggestedCell => 'Scan the suggested cell, follow the suggested route';
	@override String get cellOpenForCollection => 'Open for collection';
	@override String get addressCollectionDoneDescript => 'In the process of collecting, there are no positions left that you need to collect. The process is fully assembled or an error has occurred!';
	@override String get missingTheCell => 'Missing in the cell';
	@override String get requiredScanBarcodeProduct => 'It is required to scan the barcode of the product';
	@override String get positionSelectedPlaceCell => 'The position is selected, place it in the cell';
	@override String get placementDoneDescript => 'In this process, there are no products left for placement. All products have been placed or an error has occurred!';
	@override String get accommodationOptions => 'Accommodation options';
	@override String get placementNoRecommend => 'There are no recommendations';
	@override String get placementRecommendedCells => 'These cells contain this product. You can place the product in any of these cells, or in any other';
	@override String get placementNotRecommendedCells => 'For this product, there is no recommendation on placement. You can place the goods in any cell in the warehouse!';
	@override String get collectionDoneDescript => 'There are no positions left in the document that you need to scan. The document is fully scanned or an error has occurred!';
	@override String get skip => 'Skip';
	@override String get defaultDoneDescript => 'There are no positions left in the process that you need to scan. The process is fully scanned or an error has occurred!';
	@override String get confirmAbsentCollection => 'Confirm that you have not physically found the remainder in the cell. The cell will be corrected, the reserve will be reassigned!';
	@override String get absentNotConfirmedRequest => 'The result of the request could not be verified. Unavailable units have been removed from the collection, you can continue. After the collection is completed, you will see a notification.';
	@override String get processUnconfirmedProducts => 'There are unconfirmed products';
	@override String get processUnconfirmedProductsDescript => 'In the current process, there are positions that were excluded in the course of work. After restarting the process, positions may appear in the process!';
	@override String get existScannedContinue => 'You take responsibility by leaving the previous scan, in the current process';
	@override String get existScannedClearDb => 'This process will be completely cleared of all scanning processes in it';
	@override String get blockIsExistScannedProcess => 'There are scanned positions';
	@override String get blockIsExistScannedProcessDescript => 'There are scanned products in the current process. Continue working or clear the scanning process';
	@override String get itemAlreadyBeenScanned => 'This article/size has already been scanned';
	@override String get skipCollectingNotify => 'Remaining units . the goods were temporarily excluded from the current collection. Go on!';
	@override String get skipCollectingConfirm => 'The product will be temporarily removed from the collection route. The missed item will appear again after sending or reloading';
	@override String get search => 'Search';
	@override String get backToSearch => 'Back to Search';
	@override String get searchTitle => 'Search';
	@override String get searchResult => 'Search results';
	@override String get searchResultTaskDocumentDescript => 'Click on the found document to go to it or return to the search';
	@override String get searchTaskDocumentDescript => 'Enter the document number. If it is found, it will be displayed in the search results!';
	@override String get searchParameters => 'Search Parameters';
	@override String get searchParametersDescript => 'These parameters affect the search result';
	@override String get year => 'Year';
	@override String get enterFullDocumentNumberToSearch => 'Enter the full document number to search for';
	@override String get searchByCurrent => 'Search by current';
	@override String get searchByOther => 'Search by other';
	@override String get autoSubmissionOfParametersCanceled => 'Auto-submission of parameters canceled';
	@override String get selectedTypeIsNotAvailable => 'The selected type is not available';
	@override String get changeMovingType => 'When you change the type of movement, all other parameters will be cleared!';
	@override String get articleSizePrice => 'Article - size / price';
	@override String get noDocumentToCalculateResult => 'There are no documents to calculate the result';
	@override String get acceptPackageBeforeNotify => 'Make sure as much as possible that the contents of the package in the system converge with the physical!';
	@override String get from => 'From';
	@override String get status => 'Status';
	@override String get relatedDocument => 'Related document';
	@override String get orderStatus => 'Order status';
	@override String get operation => 'Operation';
	@override String get cancelled => 'Cancelled';
	@override String get active => 'Active';
	@override String get acceptance => 'Acceptance';
	@override String get moving => 'Moving';
	@override String get placement => 'Placement';
	@override String get collectionRoute => 'Collection route';
	@override String get actionsProcess => 'Actions on the process';
	@override String get confirmSelectCellAddressCollection => 'The current open cell will be closed before opening the selected one!';
	@override String get thereIsNoRoute => 'There is no route';
	@override String get currentLastCell => 'Current last cell';
	@override String get currentCell => 'Current cell';
	@override String get currentProposedCellCurrentCollection => 'Current or proposed cell, in the current collection';
	@override String get followingRoute => 'Following the route';
	@override String get followingRouteDescript => 'Click on the cell to change the route relative to the selected cell';
	@override String get dateTime => 'Date and time';
	@override String get notCorrectScanExtra => 'There are no scans that need to be canceled';
	@override String get correctScanExtraDescript => 'Cancel each scan separately by clicking on the item and confirming the action. The cancellation of the action must be accompanied by the return of the physical goods to the place!';
	@override String get extraScans => 'Extra scans';
	@override String get stateExtraScanTitle => 'Solve the problem';
	@override String get stateExtraScanCorrectionOptions1 => 'There are saved scanned products that are missing in the current process. To continue working, you need to delete unnecessary scans or clear the entire process!';
	@override String get stateExtraScanCorrectionOptions2 => 'There are many saved scanned items that are missing in the current process. To continue, you need to clear the process of all scans!';
	@override String get clearResume => 'Clear and continue';
	@override String get clearExtra => 'Clear the excess';
	@override String get unableToCheckUpdate => 'Unable to check the update';
	@override String get unableToCheckUpdateDescript => 'You have a consolidated warehouse. First select a warehouse or work area to check for updates!';
	@override String get baseNomenclature => 'The base of the nomenclature';
	@override String get baseNomenclatureEmpty => 'The nomenclature base is empty';
	@override String get baseNomenclatureEmptyDescript => 'Download required, for further work';
	@override String get selectLangDescript => 'Select your preferred language for working with the terminal. You can change it at any time!';
	@override String get unlock => 'Unlock';
	@override String get processUnlockDescript => 'Click to unlock the current process.';
	@override String get confirmProcessUnlock => 'When unblocked, the current scan will be cleared and exited!';
	@override String get aboutTheApp => 'About the app';
	@override String get disbanded => 'Disbanded';
	@override String get shipped => 'Shipped';
	@override String get combineCell => 'In cell';
	@override String get expectation => 'Expectation';
	@override String get applicationVersion => 'Application Version';
	@override String get apiVersion => 'API Version';
	@override String get theme => 'Theme';
	@override String get fontSize => 'Font Size';
	@override String get light => 'Light';
	@override String get dark => 'Dark';
	@override String get standard => 'Standard';
	@override String get large => 'Large';
	@override String get veryLarge => 'Very large';
	@override String get personalizationApplication => 'Personalization of the application';
	@override String get personalizationApplicationDescript => 'Adjust the parameters as you like!';
	@override String get userSettings => 'User Settings';
	@override String get userSettingsDescript => 'Change your account settings';
	@override String get unlockAllDocuments => 'Unlock all documents';
	@override String get unlockAllDocumentsDescript => 'Unlock all documents blocked from this terminal!';
	@override String get errorSavePersonalizingSetting => 'Your user settings could not be saved!';
	@override String get confirmUnlockAll => 'When unlocking all documents, the scanning database will be cleared!';
	@override String get repeatBackgroundTaskError => 'Repeat request execution. There will be an attempt to re-execute the request.';
	@override String get timeIsNotDefined => 'The time is not defined';
	@override String get startTyping => 'Start typing';
	@override String get listOfDocuments => 'List of documents';
	@override String get acceptancePackageIdScan => 'Scan the packing ID of the move. Or go to the list of documents!';
	@override String get availability => 'Availability';
	@override String get transitStorage => 'Transit storage';
	@override String get logistics => 'Logistics';
	@override String get send => 'Send';
	@override String get createMoveBasedThisDocument => 'Creating a move based on this document!';
	@override String get identificationOfMovement => 'Identification of movement';
	@override String get identificationOfMovementDescript => 'Scan the free packaging ID and secure it after creating the move!';
	@override String get failedToClearTheMoveProcess => 'Failed to clear the move process';
	@override String get selectKeyboardHelp => 'Press the button on the terminal corresponding to the serial number of the item!';
	@override String get selectTypeMove => 'Select the type of movement';
	@override String get warning => 'Warning';
	@override String get movingFormWarningPreparedOrSaveData => 'Some prepared or saved data is not suitable for creating a move';
	@override String get unknownStatus => 'Unknown status';
	@override String get logisticHistoryEmpty => 'The history of the movement is empty';
	@override String get logisticUndefinedStatus => 'Status unknown';
	@override String get sender => 'Sender';
	@override String get recipient => 'Recipient';
	@override String get packageProcessMoving => 'In the process of moving';
	@override String get shipFromWarehouse => 'Ship from warehouse';
	@override String get recentMovementMovementsPackageExternal => 'Recent movement movements';
	@override String get client => 'Client';
	@override String get packageLeaveWarehouse => 'The packaging left the warehouse and was closed';
	@override String get confirmPackageLeaveWarehouse => 'Confirm the shipment of the package from the current warehouse';
	@override String get externalMovingStatusUnknown => 'Unknown status';
	@override String get externalMovingStatusWait => 'Waiting for transportation';
	@override String get externalMovingStatusWay => 'Sent, on the way';
	@override String get externalMovingStatusArrived => 'Arrived at the receiving warehouse';
	@override String get externalMovingNoMovementsLocations => 'There are no movements movements';
	@override String get location => 'Location';
	@override String get leftLocation => 'Left location';
	@override String get availableActionsInCell => 'Available actions on a cell';
	@override String get availableActionsInPackage => 'Available actions on packaging';
	@override String get selectSearchOption => 'Select a search option';
	@override String get selectFilter => 'Select a filter';
	@override String get selectActionProcess => 'Select an action on the process';
	@override String get absent => 'Absent';
	@override String get changeAvatar => 'Change avatar';
	@override String get changeWarehouse => 'Change warehouse';
	@override String get cellBelongsAnotherWarehouse => 'The cell belongs to another warehouse';
	@override String get identiconInfo => 'One of the main functions of the avatar is to work as an identifier of your account';
	@override String get save => 'Save';
	@override String get selectAnother => 'Choose another one';
	@override String get avatar => 'Avatar';
	@override String get updateAvatarDescript => 'The current avatar will be set for your profile';
	@override String get ship => 'Ship';
	@override String get disband => 'Disband';
	@override String get moveToACell => 'Move to a cell';
	@override String get transitStorageOrderDisbandInfo => 'The order was canceled in the system. It is required to disband from storage to the return cell!';
	@override String get transitStorageOrderShipInfo => 'The order is active. Shipment of the order from transit storage is required';
	@override String get transitStorageConfirmShip => 'Confirm the intention to ship the order from transit storage';
	@override String get transitStorageConfirmDisband => 'Confirm the intention of disbanding the order from transit storage to packaging';
	@override String get orderIsExistsOperation => 'The operation on this order in transit storage has been completed. There are no further actions!';
	@override String get orderActionExpectedInTransitStorage => 'An action is expected to be performed on this package in transit storage!';
	@override String get combineInCellDescript => 'To which you want to move the package';
	@override String get hintOrderNumber => 'Order number';
	@override String get failedLoadOrderData => 'Failed to load order data';
	@override String get notAssigned => 'Not assigned';
	@override String get reasonRejection => 'Reason for rejection';
	@override String get logisticsConfirmCellTo => 'All confirmed items will be moved to this cell';
	@override String get rejectForAbsence => 'Reject for absence';
	@override String get nextPageError => 'The following page could not be loaded. Try again!';
	@override String get nextPageDone => 'All data has been uploaded';
	@override String get repeat => 'Repeat';
	@override String get logisticsOrderNotAssignedCell => 'Not assigned to a cell';
	@override String get products => 'Products';
	@override String get packages => 'Packages';
	@override String get taskDescription => 'Task description';
	@override String get logisticsAvailabilityTaskDescript => 'It is required to collect and confirm the transfer of things to the cell with the order, or reject the goods with the selected reason!';
	@override String get logisticsWithdrawTaskDescript => 'It is required to collect and confirm the transfer of items from the order box to the return box';
	@override String get logisticsPackTaskDescript => 'Scanning of the contents of each package is required to confirm readiness for shipment';
	@override String get logisticsSendTaskDescript => 'It is required to scan the package to confirm the shipment of the package by order';
	@override String get logisticsTabsDescript => 'Be careful when completing tasks. Your actions are not subject to cancellation!';
	@override String get tabs => 'Tabs';
	@override String get logisticsTabsAvailableTask => 'Available tasks';
	@override String get taskList => 'Task list';
	@override String get rejectWithReason => 'Reject with reason';
	@override String get skipProduct => 'Skip the product';
	@override String get findAnotherCell => 'Find another cell';
	@override String get reasonReject_1 => 'Missing button';
	@override String get reasonReject_2 => 'Lightning defect';
	@override String get reasonReject_3 => 'The presence of clues';
	@override String get reasonReject_4 => 'The presence of spots';
	@override String get reasonReject_5 => 'Seam defect';
	@override String get reasonReject_6 => 'The presence of pellets';
	@override String get reasonReject_7 => 'Strap defect';
	@override String get reasonReject_8 => 'Presence of scratches or creases';
	@override String get reasonReject_9 => 'Mounting defect';
	@override String get reasonReject_10 => 'The presence of an alarm hole';
	@override String get reasonReject_11 => 'The presence of marriage';
	@override String get reasonReject_12 => 'Not for sale in an online Store';
	@override String get reasonReject_13 => 'The product is missing';
	@override String get rejectSelectTitle => 'Select the reason for rejection';
	@override String get confirmRejection => 'Confirm rejection';
	@override String get rejectItemIsNotPossible => 'Position deviation is not possible';
	@override String get rejectItemIsNotPossibleMessage => 'The product, upon confirmation of availability, was not confirmed through the TSD';
	@override String get confirmItemIsNotPossible => 'Position confirmation is not possible';
	@override String get confirmItemIsNotPossibleMessage => 'The product, upon confirmation of availability, was not confirmed through the TSD';
	@override String get confirmPackageIsNotPossible => 'Package confirmation is not possible';
	@override String get confirmPackageIsNotPossibleMessage => 'Some or all of the goods in the package, upon confirmation of availability, were not confirmed through the TSD';
	@override String get notAvailableProductAccessList => 'There is no list of available products';
	@override String get scanThePackageSendDescript => 'Scan to confirm the sending of this package';
	@override String get scanThePackagePackDescript => 'Scan to confirm the packaging of this package';
	@override String get cellSearch => 'Cell Search';
	@override String get cellSearchDescript => 'Wait until the product location search is completed';
	@override String get logisticsConfirmLocationCell => 'This cell presumably contains the current product';
	@override String get logisticsConfirmNotLocationCell => 'Could not find the location of the goods in the cells in the warehouse';
	@override String get notFound => 'Not found';
	@override String get startSearch => 'Start the search';
	@override String get searchFrom3Char => 'Search from 3 characters';
	@override String get nothingWasFound => 'Nothing was found';
	@override String get invalidOrderPackageCodeScanned => 'Invalid order package code scanned';
	@override String get requiredFullScanned => 'It is required to scan all the contents in the process';
	@override String get logisticsOrderNotAccessConfirmWithoutCell => 'The content and confirmation are not available in this task!';
	@override String get logisticsConfirmItemNeedStepWait => 'Wait';
	@override String get logisticsConfirmItemNeedStepWaitAction => 'Waiting for action';
	@override String get logisticsConfirmItemNeedActionScanCell => 'Scan the cell';
	@override String get logisticsConfirmItemNeedActionScanItem => 'Scan the product';
	@override String get scanCellSpecifiedLocation => 'Scan the cell specified in the location';
	@override String get noScanningRequiredFollowSteps => 'No scanning is required. Follow the suggested steps';
	@override String qtyUnits({required Object qty}) => '${qty} ед.';
	@override String confirmHaveReturnedCell({required Object article, required Object size, required Object cell}) => 'You confirm that you have returned ${article} / ${size} to the cell ${cell}';
	@override String confirmHaveReturned({required Object article, required Object size}) => 'You confirm that you have physically removed ${article} / ${size} from the current process';
	@override String confirmHaveReturnedError({required Object article, required Object size}) => 'Failed to cancel scanning of ${article} / ${size} in the current process';
	@override String confirmHaveReturnedSuccess({required Object article, required Object size}) => 'Scanning ${article} / ${size} was canceled in the current process';
	@override String hiUser({required Object emoji, required Object userName}) => '${emoji} Hello, ${userName}';
	@override String terminalID({required Object tid}) => 'Terminal.ID: ${tid}';
	@override String versionTsd({required Object name, required Object api}) => 'Version TSD: ${name} (api v. ${api})';
	@override String ofData({required Object a, required Object b}) => ' ${a} of. ${b} u.';
	@override String sizeNotRepresentedOnTheScreen({required Object size}) => 'Size \'${size}\' not represented on the screen';
	@override String updateVersion({required Object emoji, required Object v}) => '${emoji} Version ${v}';
	@override String upload({required Object value, required Object total}) => 'Uploading ${value} / ${total} mb.';
	@override String currentAppLastAvailable({required Object v}) => 'The current version of the ${v} app is the latest available version for you!';
	@override String savePercent({required Object percent}) => 'Save ${percent}%';
	@override String lastUpdateDb({required Object date}) => 'Last update: ${date}';
	@override String quantity({required Object emoji, required Object qty}) => '${emoji} Quantity - ${qty}';
	@override String addingGoodsToCell({required Object cellName}) => 'Adding products to a cell ${cellName}';
	@override String removalGoodsFromCell({required Object cellName}) => 'Removal of goods from the cell ${cellName}';
	@override String adjustmentCell({required Object cellName}) => 'Cell Adjustment ${cellName}';
	@override String movingItemsFromCell({required Object cellName}) => 'Moving items from a cell ${cellName}';
	@override String moveGoodsTheCell({required Object qty, required Object cellTo}) => 'Move ${qty} unit of goods to the cell ${cellTo}';
	@override String removalGoodsFromCellInPackage({required Object cellName}) => 'Removal of goods from the cell ${cellName} in the package';
	@override String takeToCellInPackage({required Object qty, required Object cellFrom, required Object packageId}) => 'Take out ${qty} units of goods from the cell ${cellFrom} From to the package ${packageId}';
	@override String selectWarehouseTitle({required Object name}) => 'Switch to ${name}';
	@override String selectWorkAreaTitle({required Object workareaName, required Object warehouseName}) => 'Switch to the work area ${workareaName} ${warehouseName}';
	@override String packageId({required Object id}) => 'Package #${id}';
	@override String orderWithGrid({required Object orderId}) => 'Order #${orderId}';
	@override String scanThePackage({required Object packageId}) => 'Scan the package #${packageId}';
	@override String confirmRejectionMessage({required Object article, required Object size, required Object reason}) => 'Confirm that you want to reject ${article} / ${size} because of - ${reason}';
	@override String inCell({required Object cellName}) => 'Place the package in a cell ${cellName}';
	@override String dateCreate({required Object date}) => 'Date of creation ${date}';
	@override String qtyPieces({required Object qty}) => '${qty} pc.';
	@override String departureWarehouse({required Object warehouse}) => 'Where from ${warehouse}';
	@override String placePackageInCell({required Object cell}) => 'Place the package in a cell ${cell}';
	@override String addingGoodsToPackaging({required Object packageId}) => 'Adding goods to the packaging ${packageId}';
	@override String removalGoodsFromPackaging({required Object packageId}) => 'Removal of goods from packaging ${packageId}';
	@override String placementGoodsFromPackaging({required Object packageId}) => 'Placement of goods from packaging ${packageId}';
	@override String scanCellName({required Object cellName}) => 'Scan the cell ${cellName}';
	@override String scannedInvalidCell({required Object cellName}) => 'It was required to scan the cell ${cellName}';
	@override String requiredMatrix({required Object article, required Object size}) => '${article} - ${size}, need to scan the matrix';
	@override String alreadyMatrix({required Object article, required Object size}) => '${article} - ${size} have you already scanned this matrix';
	@override String barcodeFailedScan({required Object barcode}) => '${barcode}, failed to save scan!';
	@override String barcodeScanned({required Object barcode}) => '${barcode}, scanned!';
	@override String failedSaveScan({required Object barcode}) => '${barcode}, failed to save scan!';
	@override String itemPlaceInCell({required Object article, required Object size, required Object cell}) => '${article} - ${size}, place in ${cell}\'';
	@override String itemPlaceInCellFailed({required Object article, required Object size}) => '${article} - ${size}, failed to post';
	@override String get productPlacement => 'Product placement';
	@override String get productChecking => 'Product checking';
	@override String get repeatLogin => 'Account confirmation completed\nPlease log in again';
	@override String get lichiId => 'Lichi ID';
	@override String get onRegistered => 'The account has been linked successfully\nPlease request login details from technical support';
	@override String get toRegistration => 'Register';
	@override String get alreadyRegistered => 'Account is already exists';
	@override String get inStock => 'In stock';
	@override String get notInStock => 'Not in stock';
	@override String get price => 'Price';
	@override String get color => 'Color';
	@override String get codeIsNotProduct => 'The code is not from the product';
	@override String get invalidProductCodeType => 'Invalid code type, scan the product code';
	@override String get isMissing => 'Is missing';
	@override String get sale => 'Sale';
	@override String leftCells({required Object qty}) => 'Left - ${qty} cls.';
	@override String inventoryCell({required Object cellName}) => 'Inventory of cell ${cellName}';
	@override String get inventoryCellScanNotify => 'Scan the cell identifier depicted in the QR code for inventory purposes.';
	@override String get inventoryCellScanNotifyDubai => 'Scan the cell identifier depicted in the QR code for inventory purposes at Dubai warehouses.';
	@override String get inventoryCellCorrection => 'Calculate a cell';
	@override String get inventoryCellConfirm => 'Confirm the void';
	@override String get inventoryCellZeroing => 'Reset the cell';
	@override String get executor => 'Executor';
	@override String get undefined => 'Undefined';
	@override String get confirmation => 'Confirmation';
	@override String get counting => 'Counting';
	@override String get result => 'Result';
	@override String get zeroing => 'Zeroing';
	@override String get inventoryNotCarriedOut => 'The inventory has not been carried out';
	@override String get inventoryCarriedOut => 'Inventory completed';
	@override String get inventoryCarriedOutWithError => 'The inventory has been completed. There are discrepancies';
	@override String get productCheckingScanNotify => 'Scan the barcode of the product to check the product';
	@override String get incorrectPincode => 'Invalid PIN code\nthe PIN code must contain only numbers';
}

/// Flat map(s) containing all translations.
/// Only for edge cases! For simple maps, use the map function of this library.

extension on Translations {
	dynamic _flatMapFunction(String path) {
		switch (path) {
			case 'warehouse': return 'Склад';
			case 'notSelected': return 'Не выбран';
			case 'notifyScanQrWarehouse': return 'Отсканируйте QR-код склада или рабочей зоны. Вы откроете модули, доступные для склада';
			case 'userID': return 'Пользователь.ID';
			case 'notificationCompletionWork': return 'Обязательно завершите работу, все запросы выполняются от вашего имени!';
			case 'finishJob': return 'Завершить работу';
			case 'requestCannotExecuted': return 'Запрос не может быть выполнен';
			case 'settings': return 'Настройки';
			case 'noModulesAvailable': return 'Нет доступных модулей';
			case 'noModulesAvailableDescript': return 'На этом складе нет доступных модулей для работы, смените склад или обратитесь в службу технической поддержки!';
			case 'selectWarehouse': return 'Выберите склад';
			case 'selectWarehouseDescript': return 'В вашем аккаунте отображается консолидированный склад. Просканируйте доступный склад, где вы будете работать!';
			case 'exitUserTitle': return 'Завершение работы';
			case 'exitUserMessage': return 'Вы действительно хотите завершить работу с терминалом?';
			case 'invalidCodeType': return 'Недопустимый тип кода';
			case 'invalidCodeFormat': return 'Неверный формат кода';
			case 'invalidAuthCodeType': return 'Неверный тип кода, отсканируйте свой личный qr-код';
			case 'invalidOrderPackageCodeType': return 'Неверный код с идентификатором заказа с пакетом';
			case 'invalidWarehouseWorkareaCodeType': return 'Неверный тип кода, отсканируйте код склада или зоны работы';
			case 'failedDecryptQrCode': return 'Не удалось расшифровать qr-code';
			case 'doesNotCodeTask': return 'Код несоответствует задаче';
			case 'probablyCode': return 'Вероятно код поврежден. Не удалось считать данные!';
			case 'selectWarehouseMessage': return 'Подтвердите, что вы действительно хотите переключиться на выбранный в данный момент склад';
			case 'selectWorkAreaMessage': return 'Подтвердите, что вы действительно хотите переключиться на выбранную зону';
			case 'language': return 'Русский';
			case 'calculation': return 'Расчет';
			case 'clearingDb': return 'Очистка базы данных';
			case 'updatingProductDb': return 'Обновление базы данных продуктов';
			case 'thereErrors': return 'Есть ошибки';
			case 'errors': return 'Ошибки';
			case 'done': return 'Готово';
			case 'onPageNotifyTitle': return 'Есть проблемы';
			case 'onPageNotifyMessage': return 'Некоторые шаги не удалось выполнить, пожалуйста, свяжитесь с разработчиком для получения разъяснений!';
			case 'checkingTerminal': return 'Проверка терминала';
			case 'notificationVerifyTerminal': return 'Не выключайте устройство во время проверки и обновления';
			case 'continueL': return 'Продолжить';
			case 'noDataAvailable': return 'Нет доступных данных';
			case 'consolidatedResult': return 'Консолидированный результат по всем активным документам в текущем модуле. Нажмите, чтобы обновить результат и документы';
			case 'activeDocuments': return 'Активные документы';
			case 'completedDocuments': return 'Завершенные документы';
			case 'unableOpenDocument': return 'Не удается открыть документ';
			case 'updateListDocumentTitle': return 'Обновление данных';
			case 'updateListDocumentMessage': return 'Обновить список документов?';
			case 'statusUploadCompletedDocuments': return 'Загрузка завершенных\nдокументов';
			case 'statusUploadingActiveDocuments': return 'Загрузка активных\nдокументов';
			case 'listCompletedDocuments': return 'Список выполненных документов';
			case 'listActiveDocuments': return 'Список активных документов';
			case 'listPackageContents': return 'Список содержимого упаковки';
			case 'thereNoDocuments': return 'Нет доступных документов';
			case 'contentsEmpty': return 'Содержимое пустое';
			case 'documents': return 'Документы';
			case 'barcodeAndArticle': return 'Штрихкод/артикул';
			case 'title': return 'Название';
			case 'history': return 'История';
			case 'outputHistory': return 'Вывод истории, текущего процесса, последовательного сканирования. Нажмите, чтобы просмотреть подробную информацию или выполнить действие!';
			case 'storyEmpty': return 'Эта история пуста';
			case 'listEmpty': return 'Список пуст';
			case 'endList': return 'Конец списка';
			case 'sortList': return 'Отсортируйте список или удалите выбранные фильтры';
			case 'added': return 'Добавленые';
			case 'unScanned': return 'Не отсканированные';
			case 'scanned': return 'Отсканированные';
			case 'all': return 'Все';
			case 'selectActionSelectedPosition': return 'Выберите действие в выбранной позиции!';
			case 'resetToZero': return 'Обнулить';
			case 'mistake': return 'Ошибка';
			case 'resetPositionWarning': return 'Позиция сброшена, но позиция в интерфейсе не может быть обновлена. Перезагрузите документ!';
			case 'list': return 'Список';
			case 'emptyList': return 'Пустой список';
			case 'motionCreationFormValidationCreateMoving': return 'Обязательно проверьте данные формы, перед созданием перемещения!';
			case 'createMove': return 'Создать перемещение';
			case 'fromDocumentCreateMove': return 'Из этого документа берутся товары для создания их перемещения на другой склад';
			case 'uploadingDataMove': return 'Загрузка данных\nдля перемещения';
			case 'goodsBeingMoved': return 'Перемещаемые товары';
			case 'simplifiedRelocation': return 'Упрощенное перемещение';
			case 'transferAutoAccepted': return 'Это перемещение будет автоматически принято на складе поступления!';
			case 'standardMovement': return 'Стандартное перемещение';
			case 'transferNeedAccepted': return 'Это перемещение необходимо будет принять на складе-получателе!';
			case 'warehouseRecipient': return 'Склад получатель';
			case 'departureWarehouseAuto': return 'Склад отправления устанавливается автоматически. \nВыберите склад поступления!';
			case 'choose': return 'Выбрать';
			case 'specify': return 'Укажите';
			case 'attach': return 'Прикрепите';
			case 'notAttach': return 'Не прикреплена';
			case 'scanProducts': return 'Сканировать товары';
			case 'selectProducts': return 'Выбрать товары';
			case 'notDataCreateMove': return 'Не удалось получить данные, необходимые для перемещения!';
			case 'notSortItemsErrorMove': return 'Не удалось отсортировать товары. Создание перемещения невозможно!';
			case 'clearingCurrentProcess': return 'Очистка текущего процесса';
			case 'confirmClearCurrentFormMove': return 'Подтвердите, что вы хотите очистить текущую форму перемещения!';
			case 'formTransferCleared': return 'Форма перемещения была очищена';
			case 'failedClearMove': return 'Не удалось очистить перемещение';
			case 'selectionGoodsMove': return 'Выбор товаров для перемещения';
			case 'returnCreationMove': return 'Вернуться к созданию перемещения';
			case 'backContinueCreatingMove': return 'Нажмите, чтобы вернуться и продолжить создание перемещения';
			case 'receiptWarehouse': return 'Склад поступления';
			case 'listProductCreateTransfer': return 'Список товаров для создания перемещения на другой склад!';
			case 'noReceivingWarehouseSelected': return 'Не выбран склад получатель';
			case 'noGoodsCreateMove': return 'Отсутствуют товары для создания перемещения';
			case 'errorFormingListProducts': return 'Ошибка в формировании списка товаров';
			case 'creatingMove': return 'Создание перемещения';
			case 'updateDb': return 'Обновить базу данных';
			case 'checkingDb': return 'Проверка базы данных';
			case 'gettingDb': return 'Получение данных';
			case 'noDataUploadedDb': return 'Данные не загружены';
			case 'getErrorAllProducts': return 'Не удалось получить данные по всем продуктам';
			case 'dataUpdateDb': return 'Данные обновлены';
			case 'updatedDb': return 'Данные обновлены, база данных содержит все доступные продукты';
			case 'noDataRecordedDb': return 'Данные не записаны';
			case 'writtenErrorDb': return 'Данные не удалось записать в локальную базу данных.';
			case 'database': return 'База данных';
			case 'removal': return 'Удаление';
			case 'clearDbConfirm': return 'Вы действительно хотите очистить всю локальную базу данных?';
			case 'localDbCleaned': return 'Локальная база данных была очищена и восстановлена';
			case 'failedClearDb': return 'Не удалось очистить базу данных';
			case 'restoreDb': return 'Восстановить базу';
			case 'checkingUpdate': return 'Проверка обновления';
			case 'languageLabel': return 'Язык';
			case 'failedLoadTradingFloorData': return 'Не удалось загрузить данные торгового зала';
			case 'failedLoadLogisticsTabData': return 'Не удалось загрузить данные разделов логистики';
			case 'uncertainGoods': return 'Неопределенные товары';
			case 'confirmOrPostTradingHall': return 'Подтвердите или разместите в торговой зале товары, которые представлены в этом списке';
			case 'calcTradingHall': return 'Расчет процента заполнения торгового зала на основе данных сканирования по остаткам на текущий день!';
			case 'scanHall': return 'Сканировать зал';
			case 'dataNotUpdated': return 'Данные не обновлены';
			case 'errorUpdatingDataTradingHall': return 'Произошла ошибка при обновлении данных, данные не актуальны. Попробуйте обновить вручную!';
			case 'scanAllEachProductsTradingHall': return 'Отсканируйте все товары на витрине, по одной единице каждого размерного ряда, чтобы проверить торговый зал.';
			case 'uploadingActiveDocuments': return 'Загрузка активных\nдокументов';
			case 'uploadingDataTabsLogistics': return 'Загрузка данных\n разделов';
			case 'uploadingLogisticsListAvailability': return 'Загрузка списка заказов\n с товарами на подтверждение';
			case 'uploadingLogisticsListWithdraw': return 'Загрузка списка заказов\n с товарами на снятие с резерва';
			case 'uploadingLogisticsListPack': return 'Загрузка списка заказов\n на упаковку';
			case 'uploadingLogisticsListSend': return 'Загрузка списка заказов\n с упаковками на отправку';
			case 'uploadingOrderData': return 'Загрузка данных\n заказа';
			case 'tradingHall': return 'Торговый зал';
			case 'invalidUserLogin': return 'Неверный логин пользователя';
			case 'userLogin': return 'Логин пользователя';
			case 'invalidPassword': return 'Неверный пароль';
			case 'password': return 'Пароль';
			case 'scanPersonalCodeAuth': return 'Отсканируйте свой персональный код\n для доступа к терминалу!';
			case 'invalidData': return 'Неверные данные';
			case 'authErrorTerminal': return 'Ошибка авторизации в терминале';
			case 'dataLoadedToCreateMove': return 'Данные загружаются для создания перемещения';
			case 'couldNotGetDocuments': return 'Не удалось получить эти документы!';
			case 'uploadingControlData': return 'Загрузка контрольных\nданных';
			case 'byCurrentWarehouse': return 'по текущему складу';
			case 'noControl': return 'Нет никакого контроля';
			case 'moveItemsAccepted': return 'Переместите товары, которые были приняты, но не перемещены на другой склад!';
			case 'control': return 'Контроль';
			case 'checkingForUpdates': return 'Проверка наличия обновлений';
			case 'problemUpdating': return 'Если у вас возникли проблемы с обновлением, напишите в службу технической поддержки';
			case 'updateDownloadFromServer': return 'Обновление загружается с сервера, после чего вам будет предложено его установить';
			case 'installUpdateOnlyAndroid': return 'Установка обновления в настоящее время возможна только для Android';
			case 'anErrorOccurredDownloadingInstall': return 'При загрузке и установке произошла ошибка';
			case 'updateCenterApp': return 'Центр обновления\nприложения';
			case 'reboot': return 'Перезагрузить';
			case 'clearProcess': return 'Очистить процесс';
			case 'setAreaTitle': return 'Вы не можете изменить зону';
			case 'setAreaMessage': return 'После начала сканирования, когда документ не пуст, вы не можете изменить область сканирования. Вы можете изменить его после отправки или очистки документа!';
			case 'scanSectionSuccessInstalled': return 'Раздел сканирования был успешно установлен';
			case 'failedSetScanArea': return 'Не удалось установить область сканирования';
			case 'productDbIsEmpty': return 'База данных товаров\nпуста';
			case 'stateEmptyProcess': return 'Работать с этим процессом\nневозможна';
			case 'stateBlocked': return 'Работа с процессом\nне допускается';
			case 'stateExistScanned': return 'Имеются данные\nсканирования';
			case 'stateExtraScanned': return 'Лишние сканирования\nв процессе';
			case 'stateStart': return 'Выполните условие\nперед началом работы';
			case 'followSuggestedConditions': return 'Следуйте предложенным условиям, чтобы начать';
			case 'zone': return 'Зона';
			case 'package': return 'Упаковка';
			case 'setZone': return 'Установите зону';
			case 'setPackage': return 'Прикрепите упаковку';
			case 'clickChangeArea': return 'Нажмите, чтобы изменить рабочую область!';
			case 'clickChangePackage': return 'Нажмите, чтобы прикрепить другую упаковку!';
			case 'scanError': return 'Ошибка сканирования';
			case 'awaitLastScan': return 'Предыдущее сканирование еще не было обработано до начала текущего.';
			case 'invalidUnreadableCode': return 'Недопустимый/нечитаемый код. Попробуйте еще раз или введите вручную!';
			case 'notBarcodeInDb': return 'Не удалось найти этот штрих-код в базе данных';
			case 'simplifiedManualInput': return 'Упрощенный ручной ввод';
			case 'productIsNotList': return 'Товара нет в списке';
			case 'positionIsNotScanList': return 'Этой позиции нет в списке сканирования, вы можете добавить ее. Подтвердите!';
			case 'positionMissingCurrentProcess': return 'Эта позиция отсутствует в текущем процессе';
			case 'positionAlreadyBeenScanned': return 'Эта позиция уже была отсканирована';
			case 'conditionsNotScan': return 'Условия не выполнены перед началом сканирования';
			case 'emptyProcess': return 'Пустой процесс';
			case 'youHaveNotScanned': return 'Вы ничего не отсканировали, пустой процесс не может быть отправлен!';
			case 'cancelingScan': return 'Отмена сканирования';
			case 'confirmCancelAction': return 'Подтвердите, что вы хотите отменить это действие';
			case 'actionCanceled': return 'Действие отменено';
			case 'couldNotCancelAction': return 'Не удалось отменить действие';
			case 'cancelingLastScan': return 'Отмена последнего сканирования';
			case 'confirmCancelLastScan': return 'Подтвердите, что вы хотите отменить последнее сканирование';
			case 'lastActionCanceled': return 'Последнее действие отменено';
			case 'couldUndoLastAction': return 'Не удалось отменить последнее действие';
			case 'zeroingPosition': return 'Обнуление позиции';
			case 'confirmResetPosition': return 'Подтвердите, что вы хотите сбросить эту позицию';
			case 'positionResetToZero': return 'Обнуление позиции';
			case 'failedResetPosition': return 'Не удалось обнулить позицию';
			case 'accessInNotProvided': return 'Доступ не предоставляется';
			case 'blockingDataIsUnknown': return 'Блокирующие данные неизвестны';
			case 'terminals': return 'Терминалы';
			case 'blockedDescript_one': return 'Проверить блокировку этого процесса не удалось. Повторите попытку позже или обратитесь в службу поддержки!';
			case 'blockedDescript_two': return 'Заблокировать этот процесс для вас не представлялось возможным. Повторите попытку позже или обратитесь в службу поддержки!';
			case 'blockedDescript_three': return 'Этот процесс заблокирован другим пользователем. Закройте процесс или найдите терминал и разблокируйте!';
			case 'updateDbScan': return 'Обновите базу данных';
			case 'updateDbScanDescript_1': return 'Обновите базу данных продуктов на терминале, перейдите к ';
			case 'updateDbScanDescript_2': return 'настройки - база данных - обновить. ';
			case 'updateDbScanDescript_3': return 'После этого процесс сканирования станет доступен!';
			case 'emptyProcessDescript_1': return 'Для этого сканирования требуются ';
			case 'emptyProcessDescript_2': return 'данные';
			case 'emptyProcessDescript_3': return ' который не удалось загрузить. Попробуйте еще раз или обратитесь в службу технической поддержки!';
			case 'confirmAndStart': return 'Подтвердите и запустите';
			case 'beforeStartActionsCorrect': return 'Прежде чем начать, убедитесь, что ваши действия правильны. Вы несете полную ответственность за свои действия.';
			case 'selectAction': return 'Выберите действие';
			case 'startConfirm': return 'Начать подтверждение';
			case 'listCurrentProcess': return 'Список текущего процесса';
			case 'outputContentsCurrentScanningProcess': return 'Вывод содержимого текущего процесса сканирования. Нажмите на позицию, чтобы выбрать действие!';
			case 'scanHistory': return 'История сканирования';
			case 'cancelAction': return 'Отменить действие';
			case 'cancelingLastActionHistory': return 'Отмена последнего действия в истории. Нажмите для отката или кнопку \'esc\' на терминале!';
			case 'mainAction': return 'Основное действие. Нажмите кнопку (ent)';
			case 'loadingDataProcess': return 'Загрузка данных\nпроцесса';
			case 'failedConvertItemsCreateMove': return 'Не удалось преобразовать элементы для создания перемещения!';
			case 'acceptMove': return 'Принять перемещение';
			case 'acceptOrder': return 'Принять заказ';
			case 'clickAcceptScannedItems': return 'Подтвердите, чтобы принять отсканированные элементы';
			case 'confirmAction': return 'Подтвердите действие!';
			case 'confirmAcceptCurrentScannedItems': return 'Вы действительно хотите принять текущие отсканированные элементы?';
			case 'sendStatement': return 'Отправить в ведомость';
			case 'assembleToOrder': return 'Собрать в заказ';
			case 'clickAssembleToShipmentOnMove': return 'Подтвердите, чтобы отправить данные в заказ на перемещение';
			case 'clickAssembleToShipmentOnOrder': return 'Подтвердите, чтобы отправить данные в заказ клиента';
			case 'clickSendInventoryData': return 'Подтвердите, чтобы отправить в ведомость инвентаризации';
			case 'confirmSendCurrentScannedItemsInventory': return 'Вы действительно хотите отправить текущие отсканированные товары в ведомость инвентаризации?';
			case 'saveReport': return 'Сохранить в отчет';
			case 'clickSendScanDataReport': return 'Подтвердите, чтобы отправить данные сканирования в отчет';
			case 'confirmYourIntention': return 'Подтвердите свое намерение';
			case 'confirmSendCurrentScannedItemsTradingHall': return 'Вы действительно хотите отправить текущие отсканированные товары в отчет торгового зала';
			case 'manual': return 'вручную';
			case 'scanning': return 'отсканировано';
			case 'unknown': return 'неизвестный';
			case 'reauthorizationRequired': return 'Требуется повторная авторизация';
			case 'terminalNotUsed': return 'Терминал не использовался более 30 минут. \nпотребуется повторная авторизация!';
			case 'groupAcceptanceTitle': return 'Приемка товара';
			case 'groupAcceptanceDescript': return 'Выберите подходящий тип приемки';
			case 'groupWarehouseMovementsTitle': return 'Перемещения на складе';
			case 'groupWarehouseMovementsDescript': return 'Создать или принять перемещение между складами';
			case 'groupShipmentTitle': return 'Сбор заказов';
			case 'groupShipmentTitleDescript': return 'Работа с заказами доступных типов';
			case 'moduleInventoryName': return 'Инвентаризация';
			case 'moduleInventoryCellName': return 'Инвентаризация ячеек';
			case 'moduleAcceptanceOnAdmissionOCName': return 'По заказу поставщика';
			case 'moduleShipmentOnMoveName': return 'На перемещение';
			case 'moduleShipmentOnOrderName': return 'Поставщиков';
			case 'moduleAcceptanceOnAdmissionOCFullName': return 'Приемка поступления по заказу поставщика';
			case 'moduleAcceptanceOnAdmissionWOCName': return 'По накладной';
			case 'moduleAcceptanceOnAdmissionWOCFullName': return 'Приемка поступления по накладной';
			case 'moduleCreateMove': return 'Создать перемещение';
			case 'moduleTradingHall': return 'Торговый зал';
			case 'moduleAcceptanceOnMoveName': return 'Принять перемещение';
			case 'moduleControlMovingName': return 'Контроль перемещения';
			case 'moduleControlPlacementName': return 'Контроль размещения';
			case 'moduleAcceptanceOnMoveFullName': return 'Приемка перемещения на склад';
			case 'moduleControl': return 'Контроль';
			case 'serverResponseParameterMissing': return 'Параметры ответа сервера отсутствуют';
			case 'invalidResponseFromServer': return 'Неверный ответ от сервера!';
			case 'requestHasNotBeenSent': return 'Запрос не был отправлен. Ошибка запроса!';
			case 'notification': return 'Уведомление';
			case 'updateCellNotify': return 'Данные ячейки будут обновлены, после выполнения последних действий!';
			case 'requestError': return 'Ошибка запроса';
			case 'sessionIsNotActive': return 'Сеанс не активен';
			case 'sessionRejected': return 'Сеанс был отклонен сервером потребуется повторная авторизация!';
			case 'iSee': return 'Понятно';
			case 'confirm': return 'Подтвердить';
			case 'cancel': return 'Закрыть';
			case 'updateAvailable': return 'Доступно обновление приложения';
			case 'absentDescriptUpdate': return 'Описание обновления отсутствует';
			case 'updateNewDescript': return 'Что нового в этой версии?';
			case 'goToUpdate': return 'Перейти к обновлению';
			case 'later': return 'Позже';
			case 'barcodeAbbreviated': return 'Шк.';
			case 'articleAbbreviated': return 'Арт.';
			case 'inputType': return 'Тип ввода';
			case 'closeClickEmptySpace': return 'Чтобы закрыть, нажмите на пустое место';
			case 'simplifiedMode_1': return 'Упрощенный режим';
			case 'simplifiedMode_2': return ', достаточно ввести последние 5 цифр штрих-кода';
			case 'manualInput': return 'Ручной ввод';
			case 'close': return 'Закрыть';
			case 'releaseButtonTopToClose': return 'Отпустите ▲ чтобы закрыть';
			case 'enterPinCodePhysicalButtons': return 'Введите pin-код с помощью физических кнопок терминала';
			case 'clear': return 'Очистить';
			case 'specifyArea': return 'Укажите область сканирования, в которой вы собираетесь выполнять сканирование';
			case 'zoneIsNotSpecify': return 'Зона не указана';
			case 'scanningArea': return 'Область сканирования';
			case 'failedProductData': return 'Не удалось получить информацию о товаре.';
			case 'scanProductShowTheScreen': return 'Отсканируйте товар, отображаемый на экране';
			case 'scannedWrongCode': return 'Вы отсканировали неправильный код';
			case 'scanCurrentProductInfo': return 'Отсканируйте показанные размеры для подтверждения. Переключайтесь между товарами с помощью стрелок, стрелка вниз - увеличьте фотографию!';
			case 'releaseTheButtonClose': return 'Отпустите кнопку, чтобы свернуть';
			case 'couldNotFindItemInCurrentProcess': return 'Не удалось найти данный товар в текущем процессе';
			case 'maxItemScanned': return 'Максимальное кол-во товара отсканировано';
			case 'startScanning': return 'Начните сканирование';
			case 'continueScanning': return 'Продолжить сканирование';
			case 'infoItemLastProduct': return 'Здесь вы увидите информацию о последнем отсканированном продукте!';
			case 'infoPlacementScanned': return 'Отсканируйте товар, и вам будет показаны варианты расположения для размещения!';
			case 'moduleCell': return 'Ячейка';
			case 'modulePackage': return 'Упаковка';
			case 'orderNumber': return 'Номер заказа и упаковки';
			case 'packagingID': return 'Упаковочный ИД';
			case 'modulePlacement': return 'Размещение';
			case 'moduleSettings': return 'Настройки';
			case 'forConfirmation': return 'На подтверждение';
			case 'onPackaging': return 'На упаковку';
			case 'withdrawalFromTheReserve': return 'Снятие с резерва';
			case 'toSend': return 'На отправку';
			case 'moduleCreateImplementation': return 'Создать реализацию';
			case 'createImplementation': return 'Создать реализацию';
			case 'attachedProducts': return 'Прикрепленные товары';
			case 'requisites': return 'Реквизиты';
			case 'motionCreationFormValidationCreateImplementation': return 'Перед созданием реализации, убедитесь, что все выбрано правильно. Вы несете личную ответственность за неправильную реализацию!';
			case 'errorDataAuth': return 'Ошибка формирования данных полученных при авторизации';
			case 'inProgressUserSettingDevice': return 'Пользовательская настройка\nустройства';
			case 'inProgressUserSettingDeviceDescript': return 'Пожалуйста не отключайте устройство, во избежании краха приложения!';
			case 'checkClearDbError': return 'Не удалось преобразовать базу данных. Попробуйте повторить в настройках или обратитесь в техподдержку!';
			case 'checkUpdateBaseError': return 'При обновлении базы номенклатуры произошла ошибка. Попробуйте повторить в настройках или обратитесь в техподдержку!';
			case 'unableRequestAnUpdateFromServer': return 'Не удается запросить обновление с сервера';
			case 'requestTimeOut': return 'Превышено время ожидания. Отсутствует интернет соединение или проблемы на стороне сервере!';
			case 'more': return 'Подробнее';
			case 'errorDetails': return 'Подробности ошибки';
			case 'isNoDetailedError': return 'Отсутствует подробное описание ошибки';
			case 'waitingTimeExceed': return 'Превышено время ожидания. Загрузка отменена!';
			case 'updateAndInstall': return 'Обновить и установить';
			case 'updateAndSave': return 'Обновить и сохранить';
			case 'uploadWait': return 'Загружаем';
			case 'checkingForAppUpdates': return 'Проверка обновления приложения';
			case 'checkingForAppUpdatesDescript': return 'Ищем последние доступные обновления, подходящее вам по параметрам';
			case 'checkingForBaseProductUpdates': return 'Проверка базы данных';
			case 'checkingForBaseProductUpdatesDescript': return 'Загружаем информацию по текущей базе товаров на устройстве';
			case 'noUpdateAvailable': return 'Нет доступных обновлении';
			case 'requirementsSelectType': return 'Требования выбранного типа';
			case 'requirementsSelectTypeDescript': return 'Для выбранного типа перемещения, требуются доп. данные';
			case 'codeIsNotePackage': return 'Код не от упаковки';
			case 'codeIsNoteCell': return 'Код не от ячейки';
			case 'codeIsNoteWarehouse': return 'Код не от склада';
			case 'codeIsNoteWorkArea': return 'Код не от зоны работ';
			case 'scanPackage': return 'Отсканируйте упаковку';
			case 'scanCell': return 'Отсканируйте ячейку';
			case 'selectPackageMovingTypeFromCell': return 'Выберите ячейку, из которой хотите переместить товар';
			case 'selectPackageMovingTypeFromPackage': return 'Выберите упаковку из которой хотите переместить товары';
			case 'selectPackageMovingTypePackage': return 'Выберите упаковку которую собираетесь переместить';
			case 'cellLocatedAnotherWarehouse': return 'Ячейка находится на другом складе';
			case 'autoSetPackageMovingError': return 'Автоподставление упаковки отменено';
			case 'autoSetCellMovingError': return 'Автоподставление ячейки отменено';
			case 'packageIsNotConditionMoving': return 'Упаковка не подходит для создания перемещения';
			case 'packageContentEmptyMoving': return 'Содержимое упаковки пустое или его не удалось получить!';
			case 'packageItemsEmpty': return 'Содержимое упаковки пустое или его не удалось получить';
			case 'invalidCellData': return 'Неверные данные ячейки в коде. Возможно код устарел!';
			case 'invalidPackageData': return 'Неверные данные упаковки в коде. Возможно код устарел!';
			case 'invalidWorkAreaData': return 'Неверные данные зоны работ в коде. Возможно код устарел!';
			case 'invalidWarehouseData': return 'Неверные данные склада в коде. Возможно код устарел!';
			case 'selectTypeMovementTitle': return 'Выбор типа перемещения';
			case 'selectTypeMovementDescript': return 'Выберите тип перемещения из доступных. При изменении, остальные поля формы очищаются!';
			case 'type': return 'Тип';
			case 'typeMovementNotSelected': return 'Не выбран тип перемещения';
			case 'noCellSelected': return 'Не выбрана ячейка из которой планируется перемещение';
			case 'noFromPackageSelected': return 'Не выбрана упаковка из которой планируется перемещение';
			case 'noMovePackageSelected': return 'Не выбрана упаковка, которую планируете переместить';
			case 'movingSelectCell': return 'Выберите ячейку или смените тип перемещения';
			case 'movingSelectPackage': return 'Выберите упаковку или смените тип перемещения';
			case 'cellDescriptInModule': return 'Нажмите физическую кнопку (F1) на терминале, чтобы сразу открыть доступные действия над ячейкой, если они есть.';
			case 'content': return 'Содержимое';
			case 'problems': return 'Проблемы';
			case 'reserve': return 'Резерв';
			case 'invalidReserve': return 'Проблемы с резервом';
			case 'incorrectContentCell': return 'Некорректное содержимое';
			case 'incorrectProductsCell': return 'Некорректные товары';
			case 'lastAction': return 'Последнее действие';
			case 'packageMovingWaitTitle': return 'Ожидание приемки';
			case 'packageArchive': return 'Упаковка в архиве';
			case 'openAnotherPackage': return 'Открыть другую упаковку';
			case 'confirmChangePackage': return 'Подтвердите что вы хотите открыть другую упаковку';
			case 'openAnotherOrder': return 'Открыть другой заказ';
			case 'confirmChangeOrder': return 'Подтвердите что вы хотите открыть другой заказ';
			case 'openAnotherCell': return 'Открыть другую ячейку';
			case 'confirmChangeCell': return 'Подтвердите что вы хотите открыть другую ячейку';
			case 'reloadPackageError': return 'Не удалось получить актуальные данные упаковки. Попробуйте отсканировать повторно!';
			case 'reloadCellError': return 'Не удалось получить актуальные данные ячейки. Попробуйте отсканировать повторно!';
			case 'reloadLogisticsOrderError': return 'Не удалось получить актуальные данные задачи по заказу. Попробуйте перезагрузить!';
			case 'confirmDisbandPackage': return 'Вы действительно хотите расформировать упаковку?';
			case 'confirmZeroingCell': return 'Вы действительно хотите обнулить содержимое ячейки?';
			case 'dataIrrelevant': return 'Данные неактуальные';
			case 'whatDoesMean': return 'Что это значит?';
			case 'packageIrrelevantDescript': return 'При обновлении данных, не удалось получить новые данные об упаковке. Попробуйте отсканировать упаковку заного!';
			case 'cellIrrelevantDescript': return 'При обновлении данных, не удалось получить новые данные о ячейке. Попробуйте отсканировать ячейку заного!';
			case 'logisticsOrderIrrelevantDescript': return 'При обновлении данных, не удалось получить новые данные о задаче по заказу. Попробуйте повторить!';
			case 'incorrectItemsCellDescript': return 'Содержимое ячейки содержит товары с отрицательным остатком!';
			case 'incorrectProductsCellDescript': return 'Некоторые товары в ячейке, без шк кодов. Требуется обратиться к администраторам, для исправления! Показать проблемные товары?';
			case 'packageLocation': return 'Местоположение упаковки';
			case 'packageLocationDescript': return 'Указывает где находится упаковка в системе';
			case 'cellLocation': return 'Местоположение ячейки';
			case 'cellLocationDescript': return 'Указывает где находится ячейка в системе';
			case 'packageScanNotify': return 'Отсканируйте упаковочный идентификатор изображенный на QR - коде';
			case 'transitStorageOrderScanNotify': return 'Отсканируйте штрих-код заказа в транзитном хранении';
			case 'cellScanNotify': return 'Отсканируйте идентификатор ячейки изображенный на QR - коде';
			case 'last30actionPackage': return 'История последних действий пользователей над упаковкой. Выводятся последние 30 всех действий!';
			case 'last30actionCell': return 'История последних действий пользователей над ячейкой. Выводятся последние 30 всех действий!';
			case 'failedLogList': return 'Неудалось получить список товаров из действия';
			case 'updateDataQuest': return 'Обновить данные?';
			case 'changeDataPackage': return 'Возможно данные упаковки изменились, хотите обновить данные?';
			case 'changeDataCell': return 'Возможно данные ячейки изменились, хотите обновить данные?';
			case 'cellWhichPlacePackage': return 'Ячейку, в которую расположить упаковку!';
			case 'cellMoveProductTo': return 'Ячейку, в которую переместить товар';
			case 'whichTakeOutGoods': return 'В которую вынести товар';
			case 'whichAttachCurrentProcess': return 'Которую прикрепить к текущему процессу';
			case 'addToPackage': return 'Внести в упаковку';
			case 'addToPackageDescript': return 'Подтвердите, чтобы внести товар в упаковку';
			case 'correctionCell': return 'Откорректировать ячейку';
			case 'correctionCellDescript': return 'Подтвердите, чтобы откорректировать ячейку';
			case 'moveToAnotherCell': return 'Переместить в ячейку';
			case 'moveToAnotherCellDescript': return 'Подтвердите, чтобы выбрать ячейку, куда перемещать';
			case 'takeToPackageFromCell': return 'Вынести в упаковку';
			case 'takeToPackageFromCellDescript': return 'Подтвердите, чтобы вынести в упаковку';
			case 'putCell': return 'Внести в ячейку';
			case 'putCellDescript': return 'Подтвердите, чтобы внести товар в ячейку';
			case 'confirmPack': return 'Подтвердить упаковку';
			case 'confirmPackDescript': return 'Подтвердите, что собрали все товары в упаковку';
			case 'tradingHallSaveToReport': return 'Сохранить в отчет';
			case 'tradingHallSaveToReportDescript': return 'Подтвердите, чтобы сохранить в сегодняшний отчет по витрине';
			case 'takeCell': return 'Вынести из ячейки';
			case 'takeCellDescript': return 'Подтвердите, чтобы вынести товар из ячейки';
			case 'removeFromPackage': return 'Вынести из упаковки';
			case 'removeFromPackageDescript': return 'Подтвердите, чтобы вынести товары из упаковки';
			case 'noGoodsInPackage': return 'В упаковке отсутствуют товары';
			case 'couldNotGetPlacementItems': return 'Не удалось получить информацию для расположения товаров';
			case 'placeProducts': return 'Разместить товары';
			case 'placeProductsDescript': return 'Подтвердите, чтобы разместить товары по ячейкам';
			case 'selectKeyboardNotify': return 'Выбрать пункт можно, нажав соответствующую цирфру на устройстве';
			case 'formatDate1': return 'dd MMM в HH:mm';
			case 'formatDate2': return 'Время в HH:mm';
			case 'acceptPackageConfirm': return 'Принимая упаковку со всем содержимым, вы берете ответственность что проверили физическое содержимое с системным!';
			case 'acceptPackageBtn': return 'Принять упаковку';
			case 'openLinkedDocument': return 'Открыть связанный документ';
			case 'acceptPackageHelp': return 'Вы можете сразу принять упаковку со всем ее содержимым. Если содержимое не сходится, осуществите приемку вручную';
			case 'failedToSelectScanMode': return 'Не удалось подобрать режим сканирования';
			case 'failedGetPackage': return 'Не удалось получить информацию об упаковке';
			case 'packageIsNotProcessMovingCurrentWarehouse': return 'Упаковка не находится в процессе перемещения на текущий склад';
			case 'confirmCancellation': return 'Подтвердите отмену';
			case 'confirmCancellationDescript': return 'Вы действительно хотите отменить последнее действие в текущем процессе? Отменить действия, будет невозможно!';
			case 'barcode': return 'Штрихкод';
			case 'article': return 'Артикул';
			case 'size': return 'Размер';
			case 'cell': return 'Ячейка';
			case 'matrix': return 'Матрица';
			case 'yes': return 'Да';
			case 'no': return 'Нет';
			case 'successRollback': return 'Сканирование было успешно отменено';
			case 'errorRollback': return 'Сканирование не удалось отменить';
			case 'couldGetInfoLastScan': return 'Не удалось получить информацию по последнему сканированию';
			case 'zeroingProduct': return 'Обнуление товара';
			case 'zeroingProductDescript': return 'Вы хотите очистить все процессы сканирования этого товара?';
			case 'positionSuccessReset': return 'Позиция была успешно обнулена';
			case 'positionErrorReset': return 'Позицию не удалось обнулить';
			case 'pinch': return 'Зажмите';
			case 'viewPhotoCurrentProduct': return 'открыть фото текущего товара';
			case 'cleanProcessConfirm': return 'Очистка процесса';
			case 'cleanProcessConfirmDescript': return 'Вы действительно хотите очистить сканирование во всем процессе? Все текущие данные будут удалены безвозвратно!';
			case 'couldExtractBarcodeFromMatrix': return 'Не удалось извлечь штрихкод из матрицы';
			case 'couldFindBarcodeInDb': return 'Не удалось найти данный штрихкод в базе';
			case 'scanOfferedProduct': return 'Отсканируйте предложенный товар';
			case 'cellAutoClosed': return 'Ячейка автоматически закрыта, все товары отсканированы';
			case 'closeOpenCell': return 'Закройте открытую ячейку';
			case 'requiredScanCodeCell': return 'Требуется отсканировать qr-код ячейки';
			case 'cellIsNotAvailable': return 'Данная ячейка не доступна';
			case 'cellWasOpen': return 'Ячейка была открыта';
			case 'cellWasClosed': return 'Ячейка была закрыта';
			case 'scanOfferedProductOrCurrentCellToClose': return 'Отсканируйте предложенный товар или текущую ячейку, чтобы закрыть ее!';
			case 'collectAllRequiredItemsFromCell': return 'Соберите все требуемые товары из этой ячейки или отсканируйте ячейку, чтобы ее закрыть!';
			case 'scanSuggestedCell': return 'Отсканируйте предложенную ячейку, следуйте по предложенному маршруту';
			case 'cellOpenForCollection': return 'Открыта для сбора';
			case 'addressCollectionDoneDescript': return 'В процессе сбора не осталось позиции, которые вам нужно собрать. Процесс полностью собран или произошла ошибка!';
			case 'missingTheCell': return 'Отсутствует в ячейке';
			case 'requiredScanBarcodeProduct': return 'Требуется отсканировать шк-код товара';
			case 'positionSelectedPlaceCell': return 'Позиция выбрана, разместите в ячейку';
			case 'placementDoneDescript': return 'В данном процессе не осталось товаров для размещения. Все товары были размещены или произошла ошибка!';
			case 'accommodationOptions': return 'Варианты размещения';
			case 'placementNoRecommend': return 'Отсутствуют рекомендации';
			case 'placementRecommendedCells': return 'В этих ячейках располагается данный товар. Вы можете расположить товар в любую из этих ячеек, или в любую другую';
			case 'placementNotRecommendedCells': return 'По данному товару, нету рекомендации по размещению. Вы можете расположить товар в любую ячейку на складе!';
			case 'collectionDoneDescript': return 'В документе не осталось позиции, которые вам нужно отсканировать. Документ полностью отсканирован или произошла ошибка!';
			case 'skip': return 'Пропустить';
			case 'defaultDoneDescript': return 'В процессе не осталось позиции, которые вам нужно отсканировать. Процесс полностью отсканирован или произошла ошибка!';
			case 'confirmAbsentCollection': return 'Подтвердите, что вы не нашли физически остаток в ячейке. Ячейка будет откорретирована, резерв переназначен!';
			case 'absentNotConfirmedRequest': return 'Не удалось проверить результат запроса. Недоступные ед. были убраны со сбора, можете продолжать. После завершения сбора, вы увидите уведомление.';
			case 'processUnconfirmedProducts': return 'Есть неподтвержденные товары';
			case 'processUnconfirmedProductsDescript': return 'В текущем процессе существуют позиции, которые были исключены в процессе работы. После перезагрузки процесса, позиции могут появится в процессе!';
			case 'existScannedContinue': return 'Вы берете на себя ответственность, оставляя предыдущее сканирование, в текущем процессе';
			case 'existScannedClearDb': return 'Данный процесс будет полностью очищен от всех процессов сканирования в нем';
			case 'blockIsExistScannedProcess': return 'Есть отсканированные позиции';
			case 'blockIsExistScannedProcessDescript': return 'В текущем процессе есть отсканированные товары. Продолжите работу или очистите процесс сканирования';
			case 'itemAlreadyBeenScanned': return 'Данный артикул/размер уже был отсканирован';
			case 'skipCollectingNotify': return 'Оставшиеся ед. товара были временно исключены с текущего сбора. Продолжайте!';
			case 'skipCollectingConfirm': return 'Товар будет временно снят с маршрута сбора. Пропущенный товар появится вновь, после отправки или перезагрузки';
			case 'search': return 'Искать';
			case 'backToSearch': return 'Вернуться к поиску';
			case 'searchTitle': return 'Поиск';
			case 'searchResult': return 'Результаты поиска';
			case 'searchResultTaskDocumentDescript': return 'Нажмите на найденный документ, чтобы перейти в него или вернитесь к поиску';
			case 'searchTaskDocumentDescript': return 'Введите номер документа. Если он будет найден, он отобразится в результатах поиска!';
			case 'searchParameters': return 'Параметры поиска';
			case 'searchParametersDescript': return 'Данные параметры, влияют на результат поиска';
			case 'year': return 'Год';
			case 'enterFullDocumentNumberToSearch': return 'Введите полный номер документа, для поиска';
			case 'searchByCurrent': return 'Поиск по текущим';
			case 'searchByOther': return 'Поиск по другим';
			case 'autoSubmissionOfParametersCanceled': return 'Автоподставление параметров отменено';
			case 'selectedTypeIsNotAvailable': return 'Выбранный тип недоступен';
			case 'changeMovingType': return 'При изменении типа перемещения, все остальные параметры будут очищены!';
			case 'articleSizePrice': return 'Артикул - размер / цена';
			case 'noDocumentToCalculateResult': return 'Отсутствуют документы, для просчета результата';
			case 'acceptPackageBeforeNotify': return 'Максимально убедитесь, что содержимое упаковки в системе сходится с физическим!';
			case 'from': return 'Откуда';
			case 'status': return 'Статус';
			case 'relatedDocument': return 'Связанный документ';
			case 'orderStatus': return 'Статус заказа';
			case 'operation': return 'Операция';
			case 'cancelled': return 'Отменен';
			case 'active': return 'Активен';
			case 'acceptance': return 'Приемка';
			case 'moving': return 'Перемещение';
			case 'placement': return 'Размещение';
			case 'collectionRoute': return 'Маршрут сбора';
			case 'actionsProcess': return 'Действия над процессом';
			case 'confirmSelectCellAddressCollection': return 'Текущая открытая ячейка будет закрыта, перед открытием выбранной!';
			case 'thereIsNoRoute': return 'Маршрут отсутствует';
			case 'currentLastCell': return 'Текущая последняя ячейка';
			case 'currentCell': return 'Текущая ячейка';
			case 'currentProposedCellCurrentCollection': return 'Текущая или предложенная ячейка, в текущем сборе';
			case 'followingRoute': return 'Следующие по маршруту';
			case 'followingRouteDescript': return 'Нажмите на ячейку, чтобы изменить маршрут относительно выбранной ячейки';
			case 'dateTime': return 'Дата и время';
			case 'notCorrectScanExtra': return 'Отсутствуют сканирования которые требуется отменить';
			case 'correctScanExtraDescript': return 'Отмените каждое сканирование отдельно, нажав на элемент и подтвердив действие. Отмена действия должна сопровождаться, возвратом физического товара на место!';
			case 'extraScans': return 'Лишние сканирования';
			case 'stateExtraScanTitle': return 'Разрешите проблему';
			case 'stateExtraScanCorrectionOptions1': return 'Есть сохраненные отсканированные товары, которые отсутствуют в текущем процессе. Для продолжения работы, требуется удалить лишние сканирования или очистить процесс целиком!';
			case 'stateExtraScanCorrectionOptions2': return 'Содержаться много сохраненных отсканированных товаров, которые отсутствуют в текущем процессе. Для продолжения, требуется очистить процесс от всех сканировании!';
			case 'clearResume': return 'Очистить и продолжить';
			case 'clearExtra': return 'Очистить лишние';
			case 'unableToCheckUpdate': return 'Невозможно проверить обновление';
			case 'unableToCheckUpdateDescript': return 'У вас консолидированный склад. Сначала выберите склад или зону работ, для проверки обновлений!';
			case 'baseNomenclature': return 'База номенклатуры';
			case 'baseNomenclatureEmpty': return 'База номенклатуры пустая';
			case 'baseNomenclatureEmptyDescript': return 'Требуется загрузка, для дальнейшей работы';
			case 'selectLangDescript': return 'Выберите предпочитаемый язык для работы с терминалом. Изменить можно в любое время!';
			case 'unlock': return 'Разблокировать';
			case 'processUnlockDescript': return 'Нажмите, чтобы снять блокировку с текущего процесса.';
			case 'confirmProcessUnlock': return 'При разблокировке, текущее сканирование будет очищено и произведен выход!';
			case 'aboutTheApp': return 'О приложении';
			case 'disbanded': return 'Расформирован';
			case 'shipped': return 'Отгружен';
			case 'combineCell': return 'В ячейку';
			case 'expectation': return 'Ожидание';
			case 'applicationVersion': return 'Версия приложения';
			case 'apiVersion': return 'Версия api';
			case 'theme': return 'Тема';
			case 'fontSize': return 'Размер шрифта';
			case 'light': return 'Светлая';
			case 'dark': return 'Тёмная';
			case 'standard': return 'Стандартный';
			case 'large': return 'Крупный';
			case 'veryLarge': return 'Очень крупный';
			case 'personalizationApplication': return 'Персонализация приложения';
			case 'personalizationApplicationDescript': return 'Настройте параметры, как вам удобно!';
			case 'userSettings': return 'Пользовательские настройки';
			case 'userSettingsDescript': return 'Измените параметры вашего аккаунта';
			case 'unlockAllDocuments': return 'Разблокировать все документы';
			case 'unlockAllDocumentsDescript': return 'Разблокировка всех документов заблокированных с этого терминала!';
			case 'errorSavePersonalizingSetting': return 'Не удалось сохранить ваши пользовательские настройки!';
			case 'confirmUnlockAll': return 'При разблокировки всех документов, будет очищена база сканирования!';
			case 'repeatBackgroundTaskError': return 'Повтор выполнения запроса. Будет попытка повторного выполнения запроса.';
			case 'timeIsNotDefined': return 'Время не определено';
			case 'startTyping': return 'Начните ввод';
			case 'listOfDocuments': return 'Список документов';
			case 'acceptancePackageIdScan': return 'Отсканируйте упаковочный идентификатор перемещения. Или перейдите в список документов!';
			case 'availability': return 'Наличие';
			case 'transitStorage': return 'Транзитное хранение';
			case 'logistics': return 'Логистика';
			case 'send': return 'Отправить';
			case 'createMoveBasedThisDocument': return 'Создание перемещения на основании данного документа!';
			case 'identificationOfMovement': return 'Идентификация перемещения';
			case 'identificationOfMovementDescript': return 'Отсканируйте свободный упаковочный идентификатор и закрепите его после создания перемещения!';
			case 'failedToClearTheMoveProcess': return 'Не удалось очистить процесс перемещения';
			case 'selectKeyboardHelp': return 'Нажмите кнопку на терминале, соответствующей порядковому номеру пункта!';
			case 'selectTypeMove': return 'Выберите тип перемещения';
			case 'warning': return 'Предупреждение';
			case 'movingFormWarningPreparedOrSaveData': return 'Некоторые подготовленные или сохраненные данные не подходят для создания перемещения';
			case 'unknownStatus': return 'Неизвестный статус';
			case 'logisticHistoryEmpty': return 'История движения пустая';
			case 'logisticUndefinedStatus': return 'Статус неизвестен';
			case 'sender': return 'Отправитель';
			case 'recipient': return 'Получатель';
			case 'packageProcessMoving': return 'В процессе перемещения';
			case 'shipFromWarehouse': return 'Отгрузить со склада';
			case 'recentMovementMovementsPackageExternal': return 'Последние движения перемещения';
			case 'client': return 'Клиент';
			case 'packageLeaveWarehouse': return 'Упаковка покинула склад и была закрыта';
			case 'confirmPackageLeaveWarehouse': return 'Подтвердите отправку упаковки с текущего склада';
			case 'externalMovingStatusUnknown': return 'Неизвестный статус';
			case 'externalMovingStatusWait': return 'Ожидание транспортировки';
			case 'externalMovingStatusWay': return 'Отправлено, в пути';
			case 'externalMovingStatusArrived': return 'Прибыло на склад получения';
			case 'externalMovingNoMovementsLocations': return 'Движения перемещения отсутствуют';
			case 'location': return 'Местоположение';
			case 'leftLocation': return 'Покинуло местоположение';
			case 'availableActionsInCell': return 'Доступные действия над ячейкой';
			case 'availableActionsInPackage': return 'Доступные действия над упаковкой';
			case 'selectSearchOption': return 'Выберите вариант поиска';
			case 'selectFilter': return 'Выберите фильтр';
			case 'selectActionProcess': return 'Выберите действие над процессом';
			case 'absent': return 'Отсутствует';
			case 'changeAvatar': return 'Изменить аватар';
			case 'changeWarehouse': return 'Изменить склад';
			case 'cellBelongsAnotherWarehouse': return 'Ячейка принадлежит другому складу';
			case 'identiconInfo': return 'Одной из основных функций аватара является работа в качестве идентикона вашего аккаунта';
			case 'save': return 'Сохранить';
			case 'selectAnother': return 'Выбрать другой';
			case 'avatar': return 'Аватар';
			case 'updateAvatarDescript': return 'Текущий аватар будет установлен для вашего профиля';
			case 'ship': return 'Отгрузить';
			case 'disband': return 'Расформировать';
			case 'moveToACell': return 'Переместить в ячейку';
			case 'transitStorageOrderDisbandInfo': return 'Заказ был отменен в системе. Требуется провести расформирование с хранения в ячейку возврата!';
			case 'transitStorageOrderShipInfo': return 'Заказ активен. Требуется отгрузка заказа с транзитного хранения';
			case 'transitStorageConfirmShip': return 'Подтвердите намерение отгрузки заказа с транзитного хранения';
			case 'transitStorageConfirmDisband': return 'Подтвердите намерение расформирование заказа с транзитного хранения в упаковку';
			case 'orderIsExistsOperation': return 'Операция над данным заказом в транзитном хранении, была выполнена. Дальнейшие действия отсутствуют!';
			case 'orderActionExpectedInTransitStorage': return 'Ожидается выполнение действие над данной упаковкой в транзитном хранений!';
			case 'combineInCellDescript': return 'В которую требуется переместить упаковку';
			case 'hintOrderNumber': return 'Номер заказа';
			case 'failedLoadOrderData': return 'Не удалось загрузить данные заказа';
			case 'notAssigned': return 'Не присвоена';
			case 'reasonRejection': return 'Причина отклонения';
			case 'logisticsConfirmCellTo': return 'Все подтвержденные товары будут перемещены в эту ячейку';
			case 'rejectForAbsence': return 'Отклонить за отсутствие';
			case 'nextPageError': return 'Не удалось загрузить следующую страницу. Попробуйте повторить!';
			case 'nextPageDone': return 'Все данные были загружены';
			case 'repeat': return 'Повторить';
			case 'logisticsOrderNotAssignedCell': return 'Не закреплен за ячейкой';
			case 'products': return 'Товары';
			case 'packages': return 'Пакеты';
			case 'taskDescription': return 'Описание задачи';
			case 'logisticsAvailabilityTaskDescript': return 'Требуется собрать и подтвердить перемещение вещей в ячейку с заказом, или отклонить товар с выбранной причиной!';
			case 'logisticsWithdrawTaskDescript': return 'Требуется собрать и подтвердить перемещение вещей из ячейки с заказом в ячейку возврата';
			case 'logisticsPackTaskDescript': return 'Требуется сканирование содержимого каждой упаковки для подтверждения готовности на отправку';
			case 'logisticsSendTaskDescript': return 'Требуется отсканировать упаковку для подтверждения отправки пакета по заказу';
			case 'logisticsTabsDescript': return 'Будьте внимательны, выполняя задачи. Ваши действия не подлежат отмене!';
			case 'tabs': return 'Вкладки';
			case 'logisticsTabsAvailableTask': return 'Доступные задачи';
			case 'taskList': return 'Список задач';
			case 'rejectWithReason': return 'Отклонить с причиной';
			case 'skipProduct': return 'Пропустить товар';
			case 'findAnotherCell': return 'Найти другую ячейку';
			case 'reasonReject_1': return 'Отсутствует пуговица';
			case 'reasonReject_2': return 'Дефект молнии';
			case 'reasonReject_3': return 'Наличие зацепок';
			case 'reasonReject_4': return 'Наличие пятен';
			case 'reasonReject_5': return 'Дефект шва';
			case 'reasonReject_6': return 'Наличие катышек';
			case 'reasonReject_7': return 'Дефект бретельки';
			case 'reasonReject_8': return 'Наличие царапин или заломов';
			case 'reasonReject_9': return 'Дефект крепления';
			case 'reasonReject_10': return 'Наличие отверстия от аларма';
			case 'reasonReject_11': return 'Наличие брака';
			case 'reasonReject_12': return 'Не для продажи в Интернет Магазине';
			case 'reasonReject_13': return 'Товар отсутствует';
			case 'rejectSelectTitle': return 'Выберите причину отклонения';
			case 'confirmRejection': return 'Подтвердите отклонение';
			case 'rejectItemIsNotPossible': return 'Отклонение позиции невозможно';
			case 'rejectItemIsNotPossibleMessage': return 'Товар при подтверждений наличия, был подтвержден не через ТСД';
			case 'confirmItemIsNotPossible': return 'Подтверждение позиции невозможно';
			case 'confirmItemIsNotPossibleMessage': return 'Товар при подтверждений наличия, был подтвержден не через ТСД';
			case 'confirmPackageIsNotPossible': return 'Подтверждение пакета невозможно';
			case 'confirmPackageIsNotPossibleMessage': return 'Некоторый или весь товар в пакете, при подтверждении наличия был подтвержден не через ТСД';
			case 'notAvailableProductAccessList': return 'Отсутствует список доступных товаров';
			case 'scanThePackageSendDescript': return 'Отсканируйте, чтобы подтвердить отправку этого пакета';
			case 'scanThePackagePackDescript': return 'Отсканируйте, чтобы подтвердить упаковку этого пакета';
			case 'cellSearch': return 'Поиск по ячейкам';
			case 'cellSearchDescript': return 'Дождитесь завершения поиска местоположения товара';
			case 'logisticsConfirmLocationCell': return 'В этой ячейке предположительно находится текущий товар';
			case 'logisticsConfirmNotLocationCell': return 'Не удалось найти местоположение товара в ячейках, на складе';
			case 'notFound': return 'Не найдено';
			case 'startSearch': return 'Начинайте поиск';
			case 'searchFrom3Char': return 'Поиск от 3-ех символов';
			case 'nothingWasFound': return 'Ничего не нашлось';
			case 'invalidOrderPackageCodeScanned': return 'Отсканирован неверный код пакета заказа';
			case 'requiredFullScanned': return 'Требуется отсканировать все содержимое в процессе';
			case 'logisticsOrderNotAccessConfirmWithoutCell': return 'Содержимое и подтверждение не доступно в этой задаче!';
			case 'logisticsConfirmItemNeedStepWait': return 'Подождите';
			case 'logisticsConfirmItemNeedStepWaitAction': return 'Ожидание действия';
			case 'logisticsConfirmItemNeedActionScanCell': return 'Отсканируйте ячейку';
			case 'logisticsConfirmItemNeedActionScanItem': return 'Отсканируйте товар';
			case 'scanCellSpecifiedLocation': return 'Отсканируйте ячейку указанную в местоположении';
			case 'noScanningRequiredFollowSteps': return 'Сканирование не требуется. Выполните предложенные действия';
			case 'qtyUnits': return ({required Object qty}) => '${qty} ед.';
			case 'confirmHaveReturnedCell': return ({required Object article, required Object size, required Object cell}) => 'Вы подтверждаете что вернули ${article} / ${size} в ячейку ${cell}';
			case 'confirmHaveReturned': return ({required Object article, required Object size}) => 'Вы подтверждаете что физически убрали ${article} / ${size} из текущего процесса';
			case 'confirmHaveReturnedError': return ({required Object article, required Object size}) => 'Не удалось отменить сканирование ${article} / ${size} в текущем процессе';
			case 'confirmHaveReturnedSuccess': return ({required Object article, required Object size}) => 'Сканирование ${article} / ${size} было отменено в текущем процессе';
			case 'hiUser': return ({required Object emoji, required Object userName}) => '${emoji} Привет, ${userName}';
			case 'terminalID': return ({required Object tid}) => 'Терминал.ID: ${tid}';
			case 'versionTsd': return ({required Object name, required Object api}) => 'Версия TSD: ${name} (api v. ${api})';
			case 'ofData': return ({required Object a, required Object b}) => ' ${a} из ${b} ед.';
			case 'sizeNotRepresentedOnTheScreen': return ({required Object size}) => 'Размер \'${size}\' не отображается на экране';
			case 'updateVersion': return ({required Object emoji, required Object v}) => '${emoji} Версия ${v}';
			case 'upload': return ({required Object value, required Object total}) => 'Загружаем ${value} / ${total} мб.';
			case 'currentAppLastAvailable': return ({required Object v}) => 'Текущая версия приложения ${v} является последней доступной версией для вас!';
			case 'savePercent': return ({required Object percent}) => 'Сохраняем ${percent}%';
			case 'lastUpdateDb': return ({required Object date}) => 'Последнее обновление: ${date}';
			case 'quantity': return ({required Object emoji, required Object qty}) => '${emoji} Количество - ${qty}';
			case 'addingGoodsToCell': return ({required Object cellName}) => 'Внесение товаров в ячейку ${cellName}';
			case 'removalGoodsFromCell': return ({required Object cellName}) => 'Вынесение товаров из ячейки ${cellName}';
			case 'adjustmentCell': return ({required Object cellName}) => 'Корректировка ячейки ${cellName}';
			case 'movingItemsFromCell': return ({required Object cellName}) => 'Перемещение товаров из ячейки ${cellName}';
			case 'moveGoodsTheCell': return ({required Object qty, required Object cellTo}) => 'Переместить ${qty} ед. товара в ячейку ${cellTo}';
			case 'removalGoodsFromCellInPackage': return ({required Object cellName}) => 'Вынесение товаров из ячейки ${cellName} в упаковку';
			case 'takeToCellInPackage': return ({required Object qty, required Object cellFrom, required Object packageId}) => 'Вынести ${qty} ед. товара из ячейки ${cellFrom} в упаковку ${packageId}';
			case 'selectWarehouseTitle': return ({required Object name}) => 'Переключиться на ${name}';
			case 'selectWorkAreaTitle': return ({required Object workareaName, required Object warehouseName}) => 'Переключиться в зону работы ${workareaName} ${warehouseName}';
			case 'packageId': return ({required Object id}) => 'Упаковка #${id}';
			case 'orderWithGrid': return ({required Object orderId}) => 'Заказ #${orderId}';
			case 'scanThePackage': return ({required Object packageId}) => 'Отсканируйте пакет #${packageId}';
			case 'confirmRejectionMessage': return ({required Object article, required Object size, required Object reason}) => 'Подтвердите что хотите отклонить ${article} / ${size} по причине - ${reason}';
			case 'inCell': return ({required Object cellName}) => 'В ячейке ${cellName}';
			case 'dateCreate': return ({required Object date}) => 'Дата создания ${date}';
			case 'qtyPieces': return ({required Object qty}) => '${qty} шт.';
			case 'departureWarehouse': return ({required Object warehouse}) => 'Откуда ${warehouse}';
			case 'placePackageInCell': return ({required Object cell}) => 'Разместить упаковку в ячейку ${cell}';
			case 'addingGoodsToPackaging': return ({required Object packageId}) => 'Внесение товаров в упаковку ${packageId}';
			case 'removalGoodsFromPackaging': return ({required Object packageId}) => 'Вынесение товаров из упаковки ${packageId}';
			case 'placementGoodsFromPackaging': return ({required Object packageId}) => 'Размещение товаров из упаковки ${packageId}';
			case 'scanCellName': return ({required Object cellName}) => 'Отсканируйте ячейку ${cellName}';
			case 'scannedInvalidCell': return ({required Object cellName}) => 'Требовалось отсканировать ячейку ${cellName}';
			case 'requiredMatrix': return ({required Object article, required Object size}) => '${article} - ${size}, нужно отсканировать матрицу';
			case 'alreadyMatrix': return ({required Object article, required Object size}) => '${article} - ${size} вы уже отсканировали эту матрицу';
			case 'barcodeFailedScan': return ({required Object barcode}) => '${barcode}, не удалось сохранить сканирование!';
			case 'barcodeScanned': return ({required Object barcode}) => '${barcode}, отсканирован!';
			case 'failedSaveScan': return ({required Object barcode}) => '${barcode}, не удалось сохранить сканирование!';
			case 'itemPlaceInCell': return ({required Object article, required Object size, required Object cell}) => '${article} - ${size}, помещен в ${cell}\'';
			case 'itemPlaceInCellFailed': return ({required Object article, required Object size}) => '${article} - ${size}, не удалось разместить';
			case 'leftCells': return ({required Object qty}) => 'Осталось - ${qty} яч.';
			case 'productPlacement': return 'Размещение товара';
			case 'productChecking': return 'Проверка товара';
			case 'repeatLogin': return 'Подтверждение аккаунта завершено\nПожалуйста повторите вход';
			case 'inStock': return 'В наличии';
			case 'notInStock': return 'Нет в наличии';
			case 'price': return 'Цена';
			case 'color': return 'Цвет';
			case 'codeIsNotProduct': return 'Код не от товара';
			case 'invalidProductCodeType': return 'Неверный тип кода, отсканируйте код товара';
			case 'isMissing': return 'Отсутствует';
			case 'sale': return 'Sale';
			case 'lichiId': return 'Lichi ID';
			case 'onRegistered': return 'Аккаунт успешно привязан\nПожалуйста запросите данные для входа у техподдержки';
			case 'toRegistration': return 'Зарегистрироваться';
			case 'alreadyRegistered': return 'Данный аккаунт уже существует';
			case 'inventoryCell': return ({required Object cellName}) => 'Инвентаризация ячейки ${cellName}';
			case 'inventoryCellScanNotify': return 'Отсканируйте идентификатор ячейки изображенный на QR - коде, для целей инвентаризации';
			case 'inventoryCellScanNotifyDubai': return 'Отсканируйте идентификатор ячейки изображенный на QR - коде, для целей инвентаризации на складах Дубай';
			case 'inventoryCellCorrection': return 'Посчитать ячейку';
			case 'inventoryCellConfirm': return 'Подтвердить пустоту';
			case 'inventoryCellZeroing': return 'Обнулить ячейку';
			case 'executor': return 'Исполнитель';
			case 'undefined': return 'Неопределено';
			case 'confirmation': return 'Подтверждение';
			case 'counting': return 'Подсчет';
			case 'result': return 'Результат';
			case 'zeroing': return 'Обнуление';
			case 'inventoryNotCarriedOut': return 'Инвентаризация не проведена';
			case 'inventoryCarriedOut': return 'Инвентаризация проведена';
			case 'inventoryCarriedOutWithError': return 'Инвентаризация проведена. Имеются расхождения';
			case 'productCheckingScanNotify': return 'Отсканируйте штрихкод товара, для проверки товара';
			case 'incorrectPincode': return 'Неверный пинкод\nпинкод должен содержать только цифры';
			default: return null;
		}
	}
}

extension on _TranslationsEn {
	dynamic _flatMapFunction(String path) {
		switch (path) {
			case 'warehouse': return 'Warehouse';
			case 'notSelected': return 'Not selected';
			case 'notifyScanQrWarehouse': return 'Scan the QR code of the warehouse or work area. You will open the modules available for the warehouse';
			case 'userID': return 'User.ID';
			case 'notificationCompletionWork': return 'Be sure to complete the work, all requests are executed on your behalf!';
			case 'finishJob': return 'Finish the job';
			case 'requestCannotExecuted': return 'The request cannot be executed';
			case 'settings': return 'Settings';
			case 'noModulesAvailable': return 'No modules available';
			case 'noModulesAvailableDescript': return 'There are no modules available for work in this warehouse, change the warehouse or contact technical support!';
			case 'selectWarehouse': return 'Select a warehouse';
			case 'selectWarehouseDescript': return 'A consolidated warehouse is displayed on your account. Scan the available warehouse where you will work!';
			case 'exitUserTitle': return 'Completion of work';
			case 'exitUserMessage': return 'Do you really want to shut down the terminal?';
			case 'invalidCodeType': return 'Invalid code type';
			case 'invalidCodeFormat': return 'Invalid code format';
			case 'invalidAuthCodeType': return 'Invalid code type, scan your personal qr code';
			case 'invalidOrderPackageCodeType': return 'Invalid code with the package order ID';
			case 'invalidWarehouseWorkareaCodeType': return 'Invalid code type, scan the code of the warehouse or work area';
			case 'failedDecryptQrCode': return 'Failed to decrypt qr code';
			case 'doesNotCodeTask': return 'The code does not match the task';
			case 'probablyCode': return 'The code is probably corrupted. Data could not be read!';
			case 'selectWarehouseMessage': return 'Confirm that you really want to switch to the currently selected warehouse';
			case 'selectWorkAreaMessage': return 'Confirm that you really want to switch to the selected zone';
			case 'language': return 'English';
			case 'calculation': return 'Calculation';
			case 'clearingDb': return 'Clearing the database';
			case 'updatingProductDb': return 'Updating the product database';
			case 'thereErrors': return 'There are errors';
			case 'errors': return 'Errors';
			case 'done': return 'Done';
			case 'onPageNotifyTitle': return 'There are problems';
			case 'onPageNotifyMessage': return 'Some steps could not be completed, please contact the developer for clarification!';
			case 'checkingTerminal': return 'Checking the terminal';
			case 'notificationVerifyTerminal': return 'Do not turn off the device while checking and updating';
			case 'continueL': return 'Continue';
			case 'noDataAvailable': return 'No data available';
			case 'consolidatedResult': return 'Consolidated result for all active documents in the current module. Click to update the result and documents';
			case 'activeDocuments': return 'Active documents';
			case 'completedDocuments': return 'Completed documents';
			case 'unableOpenDocument': return 'Unable to open the document';
			case 'updateListDocumentTitle': return 'Updating data';
			case 'updateListDocumentMessage': return 'Update the list of documents?';
			case 'statusUploadCompletedDocuments': return 'Uploading completed\ndocuments';
			case 'statusUploadingActiveDocuments': return 'Uploading active\ndocuments';
			case 'listCompletedDocuments': return 'List of completed documents';
			case 'listActiveDocuments': return 'List of active documents';
			case 'listPackageContents': return 'List of package contents';
			case 'thereNoDocuments': return 'No documents available';
			case 'contentsEmpty': return 'The contents are empty';
			case 'documents': return 'Documents';
			case 'barcodeAndArticle': return 'Barcode/article';
			case 'title': return 'Title';
			case 'history': return 'History';
			case 'outputHistory': return 'Output of history, current process, sequential scan. Click to see details or perform an action!';
			case 'storyEmpty': return 'The story is empty';
			case 'listEmpty': return 'The list is empty';
			case 'endList': return 'End of the list';
			case 'sortList': return 'Sort the list or remove the selected filters';
			case 'added': return 'Added';
			case 'unScanned': return 'Un - scanned';
			case 'scanned': return 'Scanned';
			case 'all': return 'All';
			case 'selectActionSelectedPosition': return 'Select an action on the selected position!';
			case 'resetToZero': return 'Reset to Zero';
			case 'mistake': return 'Mistake';
			case 'resetPositionWarning': return 'The position is reset, but the position in the interface could not be updated. Reload the document!';
			case 'list': return 'List';
			case 'emptyList': return 'Empty list';
			case 'motionCreationFormValidationCreateMoving': return 'Be sure to check the form data before creating a move!';
			case 'createMove': return 'Create a move';
			case 'fromDocumentCreateMove': return 'From this document, the goods are taken to create their movements to another warehouse';
			case 'uploadingDataMove': return 'Uploading data\nto move';
			case 'goodsBeingMoved': return 'Goods being moved';
			case 'simplifiedRelocation': return 'Simplified relocation';
			case 'transferAutoAccepted': return 'This transfer will be automatically accepted at the receiving warehouse!';
			case 'standardMovement': return 'Standard movement';
			case 'transferNeedAccepted': return 'This transfer will need to be accepted at the receiving warehouse!';
			case 'warehouseRecipient': return 'Warehouse recipient';
			case 'departureWarehouseAuto': return 'the treasure of the shipment is set automatically.\nSelect the receipt warehouse!';
			case 'choose': return 'Choose';
			case 'specify': return 'Specify';
			case 'attach': return 'Attach';
			case 'notAttach': return 'Not attached';
			case 'scanProducts': return 'Scan products';
			case 'selectProducts': return 'Select products';
			case 'notDataCreateMove': return 'Could not get the data required for the move!';
			case 'notSortItemsErrorMove': return 'Couldn\'t sort through the items. Creating a move is impossible!';
			case 'clearingCurrentProcess': return 'Clearing the current process';
			case 'confirmClearCurrentFormMove': return 'Confirm that you want to clear the current move form!';
			case 'formTransferCleared': return 'The transfer form has been cleared';
			case 'failedClearMove': return 'Failed to clear the move';
			case 'selectionGoodsMove': return 'Selection of goods to move';
			case 'returnCreationMove': return 'Return to Creation Move';
			case 'backContinueCreatingMove': return 'Click to go back and continue creating the move';
			case 'receiptWarehouse': return 'Receipt Warehouse';
			case 'listProductCreateTransfer': return 'A list of products to create a transfer to another warehouse!';
			case 'noReceivingWarehouseSelected': return 'The recipient warehouse is not selected';
			case 'noGoodsCreateMove': return 'There are no goods to create a move!';
			case 'errorFormingListProducts': return 'Error in forming the list of products';
			case 'creatingMove': return 'Creating a move';
			case 'updateDb': return 'Update the database';
			case 'checkingDb': return 'Checking the Database';
			case 'gettingDb': return 'Getting data';
			case 'noDataUploadedDb': return 'No data uploaded';
			case 'getErrorAllProducts': return 'Could not get the data of all products';
			case 'dataUpdateDb': return 'Data updated';
			case 'updatedDb': return 'The data is updated, the database contains all available products';
			case 'noDataRecordedDb': return 'No data recorded';
			case 'writtenErrorDb': return 'Data could not be written to the local database.';
			case 'database': return 'Database';
			case 'removal': return 'Removal';
			case 'clearDbConfirm': return 'Do you really want to clean up the entire local database?';
			case 'localDbCleaned': return 'The local database has been cleaned and restored';
			case 'failedClearDb': return 'Failed to clear the database';
			case 'restoreDb': return 'Restore the database';
			case 'checkingUpdate': return 'Checking for updates';
			case 'languageLabel': return 'Language';
			case 'failedLoadTradingFloorData': return 'Failed to load trading floor data';
			case 'failedLoadLogisticsTabData': return 'Failed to load logistics section data';
			case 'uncertainGoods': return 'Uncertain goods';
			case 'confirmOrPostTradingHall': return 'Confirm or post the products in the trading floor that are presented in this list';
			case 'calcTradingHall': return 'Calculation of the percentage of the trading floor filling based on scanned data based on the current day\'s balances!';
			case 'scanHall': return 'Scan the hall';
			case 'dataNotUpdated': return 'Data not updated';
			case 'errorUpdatingDataTradingHall': return 'An error occurred while updating the data, the data is not up to date. Try updating manually!';
			case 'scanAllEachProductsTradingHall': return 'Scan all the products in the showcase, one unit of each size range, to check the sales floor';
			case 'uploadingActiveDocuments': return 'Uploading active\ndocuments';
			case 'uploadingDataTabsLogistics': return 'Loading partition\n data';
			case 'uploadingLogisticsListAvailability': return 'Loading the list of orders\n with goods for confirmation';
			case 'uploadingLogisticsListWithdraw': return 'Loading a list of orders\n with goods for withdrawal from the reserve';
			case 'uploadingLogisticsListPack': return 'Loading the list of orders\n for packaging';
			case 'uploadingLogisticsListSend': return 'Loading the list of orders\n with packages for shipment';
			case 'uploadingOrderData': return 'Loading order\n data';
			case 'tradingHall': return 'Trading hall';
			case 'invalidUserLogin': return 'Invalid user login';
			case 'userLogin': return 'User login';
			case 'invalidPassword': return 'Invalid password';
			case 'password': return 'Password';
			case 'scanPersonalCodeAuth': return 'Scan your personal code\n to access the terminal!';
			case 'invalidData': return 'Invalid data';
			case 'authErrorTerminal': return 'Authorization error in the terminal';
			case 'dataLoadedToCreateMove': return 'Data is being loaded to create a move';
			case 'couldNotGetDocuments': return 'Could not get these documents!';
			case 'uploadingControlData': return 'Uploading control\ndata';
			case 'byCurrentWarehouse': return 'by current warehouse';
			case 'noControl': return 'There is no control';
			case 'moveItemsAccepted': return 'Move the items that were accepted but not moved to another warehouse!';
			case 'control': return 'Control';
			case 'checkingForUpdates': return 'Checking for updates';
			case 'problemUpdating': return 'If you have problems updating, write to technical support';
			case 'updateDownloadFromServer': return 'The update is being downloaded from the server, after which you will be offered to install it';
			case 'installUpdateOnlyAndroid': return 'Installing the update is currently only possible for Android';
			case 'anErrorOccurredDownloadingInstall': return 'An error occurred while downloading and installing';
			case 'updateCenterApp': return 'Update Center\napplications';
			case 'reboot': return 'Reboot';
			case 'clearProcess': return 'Clear the process';
			case 'setAreaTitle': return 'You can\'t change the zone';
			case 'setAreaMessage': return 'After the start of scanning, when the document is not empty, you cannot change the scanning area. You can change it after sending or clearing the document!';
			case 'scanSectionSuccessInstalled': return 'The scan section has been successfully installed';
			case 'failedSetScanArea': return 'Failed to set the scan area';
			case 'productDbIsEmpty': return 'The product database\nis empty';
			case 'stateEmptyProcess': return 'Working with the process\nis impossible';
			case 'stateBlocked': return 'Working with the process\nis not allowed';
			case 'stateExistScanned': return 'Scan data\nis available';
			case 'stateExtraScanned': return 'Unnecessary scans\nin the process';
			case 'stateStart': return 'Fulfill the condition\nbefore starting work';
			case 'followSuggestedConditions': return 'Follow the suggested conditions to get started';
			case 'zone': return 'Zone';
			case 'package': return 'Package';
			case 'setZone': return 'Set the zone';
			case 'setPackage': return 'Attach the packaging';
			case 'clickChangeArea': return 'Click to change the work area!';
			case 'clickChangePackage': return 'Click to attach another package!';
			case 'scanError': return 'Scan error';
			case 'awaitLastScan': return 'The previous scan has not been processed yet, before the start of the current one.';
			case 'invalidUnreadableCode': return 'Invalid/unreadable code. Try again or enter manually!';
			case 'notBarcodeInDb': return 'Couldn\'t find this barcode in the database';
			case 'simplifiedManualInput': return 'Simplified manual input';
			case 'productIsNotList': return 'The product is not in the list';
			case 'positionIsNotScanList': return 'This position is not in the scan list, you can add it. Confirm!';
			case 'positionMissingCurrentProcess': return 'This position is missing in the current process';
			case 'positionAlreadyBeenScanned': return 'This position has already been scanned';
			case 'conditionsNotScan': return 'The conditions are not met before starting the scan';
			case 'emptyProcess': return 'Empty process';
			case 'youHaveNotScanned': return 'You have not scanned anything, an empty process cannot be sent!';
			case 'cancelingScan': return 'Canceling a scan';
			case 'confirmCancelAction': return 'Confirm that you want to cancel this action';
			case 'actionCanceled': return 'Action canceled';
			case 'couldNotCancelAction': return 'Could not cancel the action';
			case 'cancelingLastScan': return 'Canceling the last scan';
			case 'confirmCancelLastScan': return 'Confirm that you want to cancel the last scan';
			case 'lastActionCanceled': return 'Last action canceled';
			case 'couldUndoLastAction': return 'Could not undo the last action';
			case 'zeroingPosition': return 'Zeroing the position';
			case 'confirmResetPosition': return 'Confirm that you want to reset this position';
			case 'positionResetToZero': return 'The position is reset to zero';
			case 'failedResetPosition': return 'Failed to reset the position';
			case 'accessInNotProvided': return 'Access is not provided';
			case 'blockingDataIsUnknown': return 'Blocking data is unknown';
			case 'terminals': return 'Terminals';
			case 'blockedDescript_one': return 'It was not possible to check the blocking of this process. Try again later or contact support!';
			case 'blockedDescript_two': return 'It was not possible to block this process for you. Try again later or contact support!';
			case 'blockedDescript_three': return 'This process is blocked by another user. Close the process or find a terminal and unlock it!';
			case 'updateDbScan': return 'Update the database';
			case 'updateDbScanDescript_1': return 'Update the product database at the terminal, go to ';
			case 'updateDbScanDescript_2': return 'settings - database - update. ';
			case 'updateDbScanDescript_3': return 'After that, the scanning process will become available!';
			case 'emptyProcessDescript_1': return 'This scan requires ';
			case 'emptyProcessDescript_2': return 'data';
			case 'emptyProcessDescript_3': return ' which failed to load. Try again or contact technical support!';
			case 'confirmAndStart': return 'Confirm and start';
			case 'beforeStartActionsCorrect': return 'Before you start, make sure that your actions are correct. You are fully responsible for your actions.';
			case 'selectAction': return 'Select an action';
			case 'startConfirm': return 'Start confirm';
			case 'listCurrentProcess': return 'List of the current process';
			case 'outputContentsCurrentScanningProcess': return 'Output of the contents of the current scanning process. Click on a position to select an action!';
			case 'scanHistory': return 'Scan History';
			case 'cancelAction': return 'Cancel the action';
			case 'cancelingLastActionHistory': return 'Canceling the last action on the history. Click to roll back or the \'esc\' button on the terminal!';
			case 'mainAction': return 'Main action. Press the (ent) button';
			case 'loadingDataProcess': return 'Loading the data\nof the process';
			case 'failedConvertItemsCreateMove': return 'Failed to convert items to create a move!';
			case 'acceptMove': return 'Accept the move';
			case 'acceptOrder': return 'Accept the order';
			case 'clickAcceptScannedItems': return 'Confirm to accept the scanned items';
			case 'confirmAction': return 'Confirm the action!';
			case 'confirmAcceptCurrentScannedItems': return 'Do you really want to accept the current scanned items?';
			case 'sendStatement': return 'Send to the statement';
			case 'assembleToOrder': return 'Assemble to order';
			case 'clickAssembleToShipmentOnMove': return 'Confirm to send the data to the transfer order';
			case 'clickAssembleToShipmentOnOrder': return 'Confirm to send the data to the customer\'s order';
			case 'clickSendInventoryData': return 'Confirm to send to the inventory statement';
			case 'confirmSendCurrentScannedItemsInventory': return 'Do you really want to send the current scanned items to the inventory list?';
			case 'saveReport': return 'Save to Report';
			case 'clickSendScanDataReport': return 'Confirm to send the scan data to the report';
			case 'confirmYourIntention': return 'Confirm your intention';
			case 'confirmSendCurrentScannedItemsTradingHall': return 'Do you really want to send the current scanned items to the sales floor report';
			case 'manual': return 'manually';
			case 'scanning': return 'scanned';
			case 'unknown': return 'unknown';
			case 'reauthorizationRequired': return 'Reauthorization required';
			case 'terminalNotUsed': return 'The terminal has not been used for more than 30 minutes. \nauthorization will be required!';
			case 'groupAcceptanceTitle': return 'Acceptance of goods';
			case 'groupAcceptanceDescript': return 'Choose the appropriate type of acceptance';
			case 'groupWarehouseMovementsTitle': return 'Warehouse movements';
			case 'groupWarehouseMovementsDescript': return 'Create or accept a move between warehouses';
			case 'groupShipmentTitle': return 'Collecting orders';
			case 'groupShipmentTitleDescript': return 'Working with orders of available types';
			case 'moduleInventoryName': return 'Inventory';
			case 'moduleInventoryCellName': return 'Inventory of cells';
			case 'moduleAcceptanceOnAdmissionOCName': return 'By order of the supplier';
			case 'moduleShipmentOnMoveName': return 'to move';
			case 'moduleShipmentOnOrderName': return 'supplier';
			case 'moduleAcceptanceOnAdmissionOCFullName': return 'Acceptance on admission By order of the supplier';
			case 'moduleAcceptanceOnAdmissionWOCName': return 'By invoice';
			case 'moduleAcceptanceOnAdmissionWOCFullName': return 'Acceptance on admission By invoice';
			case 'moduleCreateMove': return 'Create a move';
			case 'moduleTradingHall': return 'Trading hall';
			case 'moduleAcceptanceOnMoveName': return 'Accept the move';
			case 'moduleControlMovingName': return 'Movement control';
			case 'moduleControlPlacementName': return 'Placement control';
			case 'moduleAcceptanceOnMoveFullName': return 'acceptance on admission By move';
			case 'moduleControl': return 'Control';
			case 'serverResponseParameterMissing': return 'Server response parameters are missing';
			case 'invalidResponseFromServer': return 'Invalid response from the server!';
			case 'requestHasNotBeenSent': return 'The request has not been sent. Request error!';
			case 'notification': return 'Notification';
			case 'updateCellNotify': return 'The cell data will be updated after performing the last actions!';
			case 'requestError': return 'Request error';
			case 'sessionIsNotActive': return 'The session is not active';
			case 'sessionRejected': return 'The session was rejected by the server reauthorization will be required!';
			case 'iSee': return 'I see';
			case 'confirm': return 'Confirm';
			case 'cancel': return 'Cancel';
			case 'updateAvailable': return 'An app update is available';
			case 'absentDescriptUpdate': return 'There is no description of the update';
			case 'updateNewDescript': return 'What\'s new in this version?';
			case 'goToUpdate': return 'Go to Update';
			case 'later': return 'Later';
			case 'barcodeAbbreviated': return 'Bc.';
			case 'articleAbbreviated': return 'Art.';
			case 'inputType': return 'Input type';
			case 'closeClickEmptySpace': return 'To close, click on any empty space';
			case 'simplifiedMode_1': return 'Simplified mode';
			case 'simplifiedMode_2': return ', it is enough to enter the last 5 digits of the barcode';
			case 'manualInput': return 'Manual input';
			case 'close': return 'Close';
			case 'releaseButtonTopToClose': return 'Release ▲ to close';
			case 'enterPinCodePhysicalButtons': return 'Enter the pin code using the physical buttons of the terminal';
			case 'clear': return 'Clear';
			case 'specifyArea': return 'Specify the scan area where you are going to scan';
			case 'zoneIsNotSpecify': return 'The zone is not specified';
			case 'scanningArea': return 'Scanning area';
			case 'failedProductData': return 'Failed to get product information.';
			case 'scanProductShowTheScreen': return 'Scan the product shown on the screen';
			case 'scannedWrongCode': return 'You scanned the wrong code';
			case 'scanCurrentProductInfo': return 'Scan the shown dimensions for confirmation. Switch between products using the arrows, down arrow - zoom in on the photo!';
			case 'releaseTheButtonClose': return 'Release the button to collapse';
			case 'couldNotFindItemInCurrentProcess': return 'Could not find this product in the current process';
			case 'maxItemScanned': return 'The maximum number of items scanned';
			case 'startScanning': return 'Start scanning';
			case 'continueScanning': return 'Continue scanning';
			case 'infoItemLastProduct': return 'Here you will see information about the last scanned product!';
			case 'infoPlacementScanned': return 'Scan the product and you will be shown the location options for placement!';
			case 'moduleCell': return 'Cell';
			case 'modulePackage': return 'Package';
			case 'orderNumber': return 'Order and packaging number';
			case 'packagingID': return 'Packaging ID';
			case 'modulePlacement': return 'Placement';
			case 'moduleSettings': return 'Settings';
			case 'forConfirmation': return 'For confirmation';
			case 'onPackaging': return 'On the packaging';
			case 'withdrawalFromTheReserve': return 'Withdrawal from the reserve';
			case 'toSend': return 'To send';
			case 'moduleCreateImplementation': return 'Create an implementation';
			case 'createImplementation': return 'Create an implementation';
			case 'attachedProducts': return 'Attached products';
			case 'requisites': return 'Requisites';
			case 'motionCreationFormValidationCreateImplementation': return 'Before creating an implementation, make sure that everything is selected correctly. You are personally responsible for the incorrect implementation!';
			case 'errorDataAuth': return 'Error in generating data received during authorization';
			case 'inProgressUserSettingDevice': return 'Customizing\n the device';
			case 'inProgressUserSettingDeviceDescript': return 'Please do not disconnect the device, in order to avoid the crash of the application!';
			case 'checkClearDbError': return 'The database could not be converted. Try again in the settings or contact technical support!';
			case 'checkUpdateBaseError': return 'An error occurred while updating the nomenclature database. Try again in the settings or contact technical support!';
			case 'unableRequestAnUpdateFromServer': return 'Unable to request an update from the server';
			case 'requestTimeOut': return 'The waiting time has been exceeded. There is no internet connection or problems on the server side!';
			case 'more': return 'More';
			case 'errorDetails': return 'Error Details';
			case 'isNoDetailedError': return 'There is no detailed description of the error';
			case 'waitingTimeExceed': return 'The waiting time has been exceeded. Download canceled!';
			case 'updateAndInstall': return 'Update and install';
			case 'updateAndSave': return 'Update and save';
			case 'uploadWait': return 'Uploading';
			case 'checkingForAppUpdates': return 'Checking for app updates';
			case 'checkingForAppUpdatesDescript': return 'We are looking for the latest available updates that suit you according to the parameters';
			case 'checkingForBaseProductUpdates': return 'Checking the database';
			case 'checkingForBaseProductUpdatesDescript': return 'Uploading information on the current product database on the device';
			case 'noUpdateAvailable': return 'No updates available';
			case 'requirementsSelectType': return 'Requirements of the selected type';
			case 'requirementsSelectTypeDescript': return 'For the selected type of movement, additional data is required.';
			case 'codeIsNotePackage': return 'The code is not from the packaging';
			case 'codeIsNoteCell': return 'The code is not from the cell';
			case 'codeIsNoteWarehouse': return 'The code is not from the warehouse';
			case 'codeIsNoteWorkArea': return 'The code is not from the work area';
			case 'scanPackage': return 'Scan the package';
			case 'scanCell': return 'Scan the cell';
			case 'selectPackageMovingTypeFromCell': return 'Select the cell from which you want to move the item';
			case 'selectPackageMovingTypeFromPackage': return 'Select the packaging from which you want to move the goods';
			case 'selectPackageMovingTypePackage': return 'Select the package you are going to move';
			case 'cellLocatedAnotherWarehouse': return 'The cell is located in another warehouse';
			case 'autoSetPackageMovingError': return 'Automatic presentation of packaging canceled';
			case 'autoSetCellMovingError': return 'Auto-presentation of the cell has been canceled';
			case 'packageIsNotConditionMoving': return 'Packaging is not suitable for creating a move';
			case 'packageContentEmptyMoving': return 'The contents of the package are empty or could not be obtained!';
			case 'packageItemsEmpty': return 'The contents of the package are empty or could not be retrieved';
			case 'invalidCellData': return 'Invalid cell data in the code. Maybe the code is outdated!';
			case 'invalidPackageData': return 'Incorrect packaging data in the code. Maybe the code is outdated!';
			case 'invalidWorkAreaData': return 'Invalid work zone data in the code. Maybe the code is outdated!';
			case 'invalidWarehouseData': return 'Incorrect warehouse data in the code. Maybe the code is outdated!';
			case 'selectTypeMovementTitle': return 'Choosing the type of movement';
			case 'selectTypeMovementDescript': return 'Select the type of movement from the available ones. When changing, the rest of the form fields are cleared!';
			case 'type': return 'Type';
			case 'typeMovementNotSelected': return 'The type of movement is not selected';
			case 'noCellSelected': return 'The cell from which you plan to move is not selected';
			case 'noFromPackageSelected': return 'The package from which you plan to move is not selected';
			case 'noMovePackageSelected': return 'The package you plan to move has not been selected';
			case 'movingSelectCell': return 'Select a cell or change the type of movement';
			case 'movingSelectPackage': return 'Choose a package or change the type of movement';
			case 'cellDescriptInModule': return 'Press the physical button (F1) on the terminal to immediately open the available actions on the cell, if any.';
			case 'content': return 'Content';
			case 'problems': return 'Problems';
			case 'reserve': return 'Reserve';
			case 'invalidReserve': return 'Invalid reserve';
			case 'incorrectContentCell': return 'Incorrect content';
			case 'incorrectProductsCell': return 'Incorrect products';
			case 'lastAction': return 'Last action';
			case 'packageMovingWaitTitle': return 'Waiting for acceptance';
			case 'packageArchive': return 'Packaging in the archive';
			case 'openAnotherPackage': return 'Open another package';
			case 'confirmChangePackage': return 'Confirm that you want to open another package';
			case 'openAnotherOrder': return 'Open another order';
			case 'confirmChangeOrder': return 'Confirm that you want to open another order';
			case 'openAnotherCell': return 'Open another cell';
			case 'confirmChangeCell': return 'Confirm that you want to open another cell';
			case 'reloadPackageError': return 'Could not get up-to-date packaging data. Try to scan again!';
			case 'reloadCellError': return 'Could not get up-to-date cell data. Try to scan again!';
			case 'reloadLogisticsOrderError': return 'Could not get up-to-date task data on the order. Try restarting!';
			case 'confirmDisbandPackage': return 'Do you really want to disband the packaging?';
			case 'confirmZeroingCell': return 'Do you really want to reset the contents of the cell?';
			case 'dataIrrelevant': return 'The data is out of date';
			case 'whatDoesMean': return 'What does it mean?';
			case 'packageIrrelevantDescript': return 'When updating the data, it was not possible to get new packaging data. Try to scan the package again!';
			case 'cellIrrelevantDescript': return 'When updating the data, it was not possible to get new cell data. Try to scan the cell again!';
			case 'logisticsOrderIrrelevantDescript': return 'When updating the data, it was not possible to get new data about the task on the order. Try again!';
			case 'incorrectItemsCellDescript': return 'The contents of the cell contain goods with a negative balance!';
			case 'incorrectProductsCellDescript': return 'Some products are in a cell, without SHK codes. You need to contact the administrators to fix it! Show problematic products?';
			case 'packageLocation': return 'Packaging location';
			case 'packageLocationDescript': return 'Indicates where the package is located in the system';
			case 'cellLocation': return 'Location of the cell';
			case 'cellLocationDescript': return 'Indicates where the cell is located in the system';
			case 'packageScanNotify': return 'Scan the packaging ID shown on the QR code';
			case 'transitStorageOrderScanNotify': return 'Scan the barcode of the order in transit storage';
			case 'cellScanNotify': return 'Scan the cell ID shown on the QR code';
			case 'last30actionPackage': return 'History of recent user actions on packaging. The last 30 of all actions are displayed!';
			case 'last30actionCell': return 'History of recent user actions on cell. The last 30 of all actions are displayed!';
			case 'failedLogList': return 'Failed to get a list of products from the action';
			case 'updateDataQuest': return 'Update the data?';
			case 'changeDataPackage': return 'Perhaps the packaging data has changed, do you want to update the data?';
			case 'changeDataCell': return 'Perhaps the cell data has changed, do you want to update the data?';
			case 'cellWhichPlacePackage': return 'The cell in which to place the package!';
			case 'cellMoveProductTo': return 'The cell to move the product to';
			case 'whichTakeOutGoods': return 'In which to take out the goods';
			case 'whichAttachCurrentProcess': return 'Which to attach to the current process';
			case 'addToPackage': return 'Add to the package';
			case 'addToPackageDescript': return 'Confirm to add the product to the package';
			case 'correctionCell': return 'Adjust the cell';
			case 'correctionCellDescript': return 'Confirm to correct the cell';
			case 'moveToAnotherCell': return 'Move to a cell';
			case 'moveToAnotherCellDescript': return 'Confirm to select the cell to move to';
			case 'takeToPackageFromCell': return 'Put it in the package';
			case 'takeToPackageFromCellDescript': return 'Confirm to put in the package';
			case 'putCell': return 'Add to the cell';
			case 'putCellDescript': return 'Confirm to add the product to the cell';
			case 'confirmPack': return 'Confirm the packaging';
			case 'confirmPackDescript': return 'Confirm that you have packed all the goods';
			case 'tradingHallSaveToReport': return 'Save to Report';
			case 'tradingHallSaveToReportDescript': return 'Confirm to save to today\'s showcase report';
			case 'takeCell': return 'Remove from the cell';
			case 'takeCellDescript': return 'Confirm to take the item out of the box';
			case 'removeFromPackage': return 'Remove from packaging';
			case 'removeFromPackageDescript': return 'Confirm to take the goods out of the package';
			case 'noGoodsInPackage': return 'There are no goods in the package';
			case 'couldNotGetPlacementItems': return 'Could not get information for the location of the goods';
			case 'placeProducts': return 'Place products';
			case 'placeProductsDescript': return 'Confirm to place the products in the cells';
			case 'selectKeyboardNotify': return 'You can select an item by clicking the corresponding number on the device';
			case 'formatDate1': return 'dd MMM in HH:mm';
			case 'formatDate2': return 'Time in HH:mm';
			case 'acceptPackageConfirm': return 'By accepting the package with all the contents, you take responsibility that you have checked the physical contents with the system!';
			case 'acceptPackageBtn': return 'Accept the packaging';
			case 'openLinkedDocument': return 'Open a linked document';
			case 'acceptPackageHelp': return 'You can immediately accept the package with all its contents. If the contents do not converge, perform the acceptance manually';
			case 'failedToSelectScanMode': return 'Failed to select the scan mode';
			case 'failedGetPackage': return 'Failed to get packaging information';
			case 'packageIsNotProcessMovingCurrentWarehouse': return 'The package is not in the process of being moved to the current warehouse';
			case 'confirmCancellation': return 'Confirm cancellation';
			case 'confirmCancellationDescript': return 'Do you really want to undo the last action in the current process? It will be impossible to cancel the actions!';
			case 'barcode': return 'Barcode';
			case 'article': return 'Article';
			case 'size': return 'Size';
			case 'cell': return 'Cell';
			case 'matrix': return 'Matrix';
			case 'yes': return 'Yes';
			case 'no': return 'No';
			case 'successRollback': return 'The scan was successfully canceled';
			case 'errorRollback': return 'Scan failed to cancel';
			case 'couldGetInfoLastScan': return 'Could not get information on the last scan';
			case 'zeroingProduct': return 'Zeroing the product';
			case 'zeroingProductDescript': return 'Do you want to clear all the scanning processes of this product?';
			case 'positionSuccessReset': return 'The position was successfully reset';
			case 'positionErrorReset': return 'The position could not be reset';
			case 'pinch': return 'Pinch';
			case 'viewPhotoCurrentProduct': return 'open a photo of the current product';
			case 'cleanProcessConfirm': return 'Cleaning up the process';
			case 'cleanProcessConfirmDescript': return 'Do you really want to clear the scan in the whole process? All current data will be permanently deleted!';
			case 'couldExtractBarcodeFromMatrix': return 'Couldn\'t extract barcode from matrix';
			case 'couldFindBarcodeInDb': return 'Couldn\'t find this barcode in the database';
			case 'scanOfferedProduct': return 'Scan the offered product';
			case 'cellAutoClosed': return 'The cell is automatically closed, all products are scanned';
			case 'closeOpenCell': return 'Close the open cell';
			case 'requiredScanCodeCell': return 'It is required to scan the QR code of the cell';
			case 'cellIsNotAvailable': return 'This cell is not available';
			case 'cellWasOpen': return 'The cell was open';
			case 'cellWasClosed': return 'The cell was closed';
			case 'scanOfferedProductOrCurrentCellToClose': return 'Scan the offered product or the current cell to close it!';
			case 'collectAllRequiredItemsFromCell': return 'Collect all the required items from this cell or scan the cell to close it!';
			case 'scanSuggestedCell': return 'Scan the suggested cell, follow the suggested route';
			case 'cellOpenForCollection': return 'Open for collection';
			case 'addressCollectionDoneDescript': return 'In the process of collecting, there are no positions left that you need to collect. The process is fully assembled or an error has occurred!';
			case 'missingTheCell': return 'Missing in the cell';
			case 'requiredScanBarcodeProduct': return 'It is required to scan the barcode of the product';
			case 'positionSelectedPlaceCell': return 'The position is selected, place it in the cell';
			case 'placementDoneDescript': return 'In this process, there are no products left for placement. All products have been placed or an error has occurred!';
			case 'accommodationOptions': return 'Accommodation options';
			case 'placementNoRecommend': return 'There are no recommendations';
			case 'placementRecommendedCells': return 'These cells contain this product. You can place the product in any of these cells, or in any other';
			case 'placementNotRecommendedCells': return 'For this product, there is no recommendation on placement. You can place the goods in any cell in the warehouse!';
			case 'collectionDoneDescript': return 'There are no positions left in the document that you need to scan. The document is fully scanned or an error has occurred!';
			case 'skip': return 'Skip';
			case 'defaultDoneDescript': return 'There are no positions left in the process that you need to scan. The process is fully scanned or an error has occurred!';
			case 'confirmAbsentCollection': return 'Confirm that you have not physically found the remainder in the cell. The cell will be corrected, the reserve will be reassigned!';
			case 'absentNotConfirmedRequest': return 'The result of the request could not be verified. Unavailable units have been removed from the collection, you can continue. After the collection is completed, you will see a notification.';
			case 'processUnconfirmedProducts': return 'There are unconfirmed products';
			case 'processUnconfirmedProductsDescript': return 'In the current process, there are positions that were excluded in the course of work. After restarting the process, positions may appear in the process!';
			case 'existScannedContinue': return 'You take responsibility by leaving the previous scan, in the current process';
			case 'existScannedClearDb': return 'This process will be completely cleared of all scanning processes in it';
			case 'blockIsExistScannedProcess': return 'There are scanned positions';
			case 'blockIsExistScannedProcessDescript': return 'There are scanned products in the current process. Continue working or clear the scanning process';
			case 'itemAlreadyBeenScanned': return 'This article/size has already been scanned';
			case 'skipCollectingNotify': return 'Remaining units . the goods were temporarily excluded from the current collection. Go on!';
			case 'skipCollectingConfirm': return 'The product will be temporarily removed from the collection route. The missed item will appear again after sending or reloading';
			case 'search': return 'Search';
			case 'backToSearch': return 'Back to Search';
			case 'searchTitle': return 'Search';
			case 'searchResult': return 'Search results';
			case 'searchResultTaskDocumentDescript': return 'Click on the found document to go to it or return to the search';
			case 'searchTaskDocumentDescript': return 'Enter the document number. If it is found, it will be displayed in the search results!';
			case 'searchParameters': return 'Search Parameters';
			case 'searchParametersDescript': return 'These parameters affect the search result';
			case 'year': return 'Year';
			case 'enterFullDocumentNumberToSearch': return 'Enter the full document number to search for';
			case 'searchByCurrent': return 'Search by current';
			case 'searchByOther': return 'Search by other';
			case 'autoSubmissionOfParametersCanceled': return 'Auto-submission of parameters canceled';
			case 'selectedTypeIsNotAvailable': return 'The selected type is not available';
			case 'changeMovingType': return 'When you change the type of movement, all other parameters will be cleared!';
			case 'articleSizePrice': return 'Article - size / price';
			case 'noDocumentToCalculateResult': return 'There are no documents to calculate the result';
			case 'acceptPackageBeforeNotify': return 'Make sure as much as possible that the contents of the package in the system converge with the physical!';
			case 'from': return 'From';
			case 'status': return 'Status';
			case 'relatedDocument': return 'Related document';
			case 'orderStatus': return 'Order status';
			case 'operation': return 'Operation';
			case 'cancelled': return 'Cancelled';
			case 'active': return 'Active';
			case 'acceptance': return 'Acceptance';
			case 'moving': return 'Moving';
			case 'placement': return 'Placement';
			case 'collectionRoute': return 'Collection route';
			case 'actionsProcess': return 'Actions on the process';
			case 'confirmSelectCellAddressCollection': return 'The current open cell will be closed before opening the selected one!';
			case 'thereIsNoRoute': return 'There is no route';
			case 'currentLastCell': return 'Current last cell';
			case 'currentCell': return 'Current cell';
			case 'currentProposedCellCurrentCollection': return 'Current or proposed cell, in the current collection';
			case 'followingRoute': return 'Following the route';
			case 'followingRouteDescript': return 'Click on the cell to change the route relative to the selected cell';
			case 'dateTime': return 'Date and time';
			case 'notCorrectScanExtra': return 'There are no scans that need to be canceled';
			case 'correctScanExtraDescript': return 'Cancel each scan separately by clicking on the item and confirming the action. The cancellation of the action must be accompanied by the return of the physical goods to the place!';
			case 'extraScans': return 'Extra scans';
			case 'stateExtraScanTitle': return 'Solve the problem';
			case 'stateExtraScanCorrectionOptions1': return 'There are saved scanned products that are missing in the current process. To continue working, you need to delete unnecessary scans or clear the entire process!';
			case 'stateExtraScanCorrectionOptions2': return 'There are many saved scanned items that are missing in the current process. To continue, you need to clear the process of all scans!';
			case 'clearResume': return 'Clear and continue';
			case 'clearExtra': return 'Clear the excess';
			case 'unableToCheckUpdate': return 'Unable to check the update';
			case 'unableToCheckUpdateDescript': return 'You have a consolidated warehouse. First select a warehouse or work area to check for updates!';
			case 'baseNomenclature': return 'The base of the nomenclature';
			case 'baseNomenclatureEmpty': return 'The nomenclature base is empty';
			case 'baseNomenclatureEmptyDescript': return 'Download required, for further work';
			case 'selectLangDescript': return 'Select your preferred language for working with the terminal. You can change it at any time!';
			case 'unlock': return 'Unlock';
			case 'processUnlockDescript': return 'Click to unlock the current process.';
			case 'confirmProcessUnlock': return 'When unblocked, the current scan will be cleared and exited!';
			case 'aboutTheApp': return 'About the app';
			case 'disbanded': return 'Disbanded';
			case 'shipped': return 'Shipped';
			case 'combineCell': return 'In cell';
			case 'expectation': return 'Expectation';
			case 'applicationVersion': return 'Application Version';
			case 'apiVersion': return 'API Version';
			case 'theme': return 'Theme';
			case 'fontSize': return 'Font Size';
			case 'light': return 'Light';
			case 'dark': return 'Dark';
			case 'standard': return 'Standard';
			case 'large': return 'Large';
			case 'veryLarge': return 'Very large';
			case 'personalizationApplication': return 'Personalization of the application';
			case 'personalizationApplicationDescript': return 'Adjust the parameters as you like!';
			case 'userSettings': return 'User Settings';
			case 'userSettingsDescript': return 'Change your account settings';
			case 'unlockAllDocuments': return 'Unlock all documents';
			case 'unlockAllDocumentsDescript': return 'Unlock all documents blocked from this terminal!';
			case 'errorSavePersonalizingSetting': return 'Your user settings could not be saved!';
			case 'confirmUnlockAll': return 'When unlocking all documents, the scanning database will be cleared!';
			case 'repeatBackgroundTaskError': return 'Repeat request execution. There will be an attempt to re-execute the request.';
			case 'timeIsNotDefined': return 'The time is not defined';
			case 'startTyping': return 'Start typing';
			case 'listOfDocuments': return 'List of documents';
			case 'acceptancePackageIdScan': return 'Scan the packing ID of the move. Or go to the list of documents!';
			case 'availability': return 'Availability';
			case 'transitStorage': return 'Transit storage';
			case 'logistics': return 'Logistics';
			case 'send': return 'Send';
			case 'createMoveBasedThisDocument': return 'Creating a move based on this document!';
			case 'identificationOfMovement': return 'Identification of movement';
			case 'identificationOfMovementDescript': return 'Scan the free packaging ID and secure it after creating the move!';
			case 'failedToClearTheMoveProcess': return 'Failed to clear the move process';
			case 'selectKeyboardHelp': return 'Press the button on the terminal corresponding to the serial number of the item!';
			case 'selectTypeMove': return 'Select the type of movement';
			case 'warning': return 'Warning';
			case 'movingFormWarningPreparedOrSaveData': return 'Some prepared or saved data is not suitable for creating a move';
			case 'unknownStatus': return 'Unknown status';
			case 'logisticHistoryEmpty': return 'The history of the movement is empty';
			case 'logisticUndefinedStatus': return 'Status unknown';
			case 'sender': return 'Sender';
			case 'recipient': return 'Recipient';
			case 'packageProcessMoving': return 'In the process of moving';
			case 'shipFromWarehouse': return 'Ship from warehouse';
			case 'recentMovementMovementsPackageExternal': return 'Recent movement movements';
			case 'client': return 'Client';
			case 'packageLeaveWarehouse': return 'The packaging left the warehouse and was closed';
			case 'confirmPackageLeaveWarehouse': return 'Confirm the shipment of the package from the current warehouse';
			case 'externalMovingStatusUnknown': return 'Unknown status';
			case 'externalMovingStatusWait': return 'Waiting for transportation';
			case 'externalMovingStatusWay': return 'Sent, on the way';
			case 'externalMovingStatusArrived': return 'Arrived at the receiving warehouse';
			case 'externalMovingNoMovementsLocations': return 'There are no movements movements';
			case 'location': return 'Location';
			case 'leftLocation': return 'Left location';
			case 'availableActionsInCell': return 'Available actions on a cell';
			case 'availableActionsInPackage': return 'Available actions on packaging';
			case 'selectSearchOption': return 'Select a search option';
			case 'selectFilter': return 'Select a filter';
			case 'selectActionProcess': return 'Select an action on the process';
			case 'absent': return 'Absent';
			case 'changeAvatar': return 'Change avatar';
			case 'changeWarehouse': return 'Change warehouse';
			case 'cellBelongsAnotherWarehouse': return 'The cell belongs to another warehouse';
			case 'identiconInfo': return 'One of the main functions of the avatar is to work as an identifier of your account';
			case 'save': return 'Save';
			case 'selectAnother': return 'Choose another one';
			case 'avatar': return 'Avatar';
			case 'updateAvatarDescript': return 'The current avatar will be set for your profile';
			case 'ship': return 'Ship';
			case 'disband': return 'Disband';
			case 'moveToACell': return 'Move to a cell';
			case 'transitStorageOrderDisbandInfo': return 'The order was canceled in the system. It is required to disband from storage to the return cell!';
			case 'transitStorageOrderShipInfo': return 'The order is active. Shipment of the order from transit storage is required';
			case 'transitStorageConfirmShip': return 'Confirm the intention to ship the order from transit storage';
			case 'transitStorageConfirmDisband': return 'Confirm the intention of disbanding the order from transit storage to packaging';
			case 'orderIsExistsOperation': return 'The operation on this order in transit storage has been completed. There are no further actions!';
			case 'orderActionExpectedInTransitStorage': return 'An action is expected to be performed on this package in transit storage!';
			case 'combineInCellDescript': return 'To which you want to move the package';
			case 'hintOrderNumber': return 'Order number';
			case 'failedLoadOrderData': return 'Failed to load order data';
			case 'notAssigned': return 'Not assigned';
			case 'reasonRejection': return 'Reason for rejection';
			case 'logisticsConfirmCellTo': return 'All confirmed items will be moved to this cell';
			case 'rejectForAbsence': return 'Reject for absence';
			case 'nextPageError': return 'The following page could not be loaded. Try again!';
			case 'nextPageDone': return 'All data has been uploaded';
			case 'repeat': return 'Repeat';
			case 'logisticsOrderNotAssignedCell': return 'Not assigned to a cell';
			case 'products': return 'Products';
			case 'packages': return 'Packages';
			case 'taskDescription': return 'Task description';
			case 'logisticsAvailabilityTaskDescript': return 'It is required to collect and confirm the transfer of things to the cell with the order, or reject the goods with the selected reason!';
			case 'logisticsWithdrawTaskDescript': return 'It is required to collect and confirm the transfer of items from the order box to the return box';
			case 'logisticsPackTaskDescript': return 'Scanning of the contents of each package is required to confirm readiness for shipment';
			case 'logisticsSendTaskDescript': return 'It is required to scan the package to confirm the shipment of the package by order';
			case 'logisticsTabsDescript': return 'Be careful when completing tasks. Your actions are not subject to cancellation!';
			case 'tabs': return 'Tabs';
			case 'logisticsTabsAvailableTask': return 'Available tasks';
			case 'taskList': return 'Task list';
			case 'rejectWithReason': return 'Reject with reason';
			case 'skipProduct': return 'Skip the product';
			case 'findAnotherCell': return 'Find another cell';
			case 'reasonReject_1': return 'Missing button';
			case 'reasonReject_2': return 'Lightning defect';
			case 'reasonReject_3': return 'The presence of clues';
			case 'reasonReject_4': return 'The presence of spots';
			case 'reasonReject_5': return 'Seam defect';
			case 'reasonReject_6': return 'The presence of pellets';
			case 'reasonReject_7': return 'Strap defect';
			case 'reasonReject_8': return 'Presence of scratches or creases';
			case 'reasonReject_9': return 'Mounting defect';
			case 'reasonReject_10': return 'The presence of an alarm hole';
			case 'reasonReject_11': return 'The presence of marriage';
			case 'reasonReject_12': return 'Not for sale in an online Store';
			case 'reasonReject_13': return 'The product is missing';
			case 'rejectSelectTitle': return 'Select the reason for rejection';
			case 'confirmRejection': return 'Confirm rejection';
			case 'rejectItemIsNotPossible': return 'Position deviation is not possible';
			case 'rejectItemIsNotPossibleMessage': return 'The product, upon confirmation of availability, was not confirmed through the TSD';
			case 'confirmItemIsNotPossible': return 'Position confirmation is not possible';
			case 'confirmItemIsNotPossibleMessage': return 'The product, upon confirmation of availability, was not confirmed through the TSD';
			case 'confirmPackageIsNotPossible': return 'Package confirmation is not possible';
			case 'confirmPackageIsNotPossibleMessage': return 'Some or all of the goods in the package, upon confirmation of availability, were not confirmed through the TSD';
			case 'notAvailableProductAccessList': return 'There is no list of available products';
			case 'scanThePackageSendDescript': return 'Scan to confirm the sending of this package';
			case 'scanThePackagePackDescript': return 'Scan to confirm the packaging of this package';
			case 'cellSearch': return 'Cell Search';
			case 'cellSearchDescript': return 'Wait until the product location search is completed';
			case 'logisticsConfirmLocationCell': return 'This cell presumably contains the current product';
			case 'logisticsConfirmNotLocationCell': return 'Could not find the location of the goods in the cells in the warehouse';
			case 'notFound': return 'Not found';
			case 'startSearch': return 'Start the search';
			case 'searchFrom3Char': return 'Search from 3 characters';
			case 'nothingWasFound': return 'Nothing was found';
			case 'invalidOrderPackageCodeScanned': return 'Invalid order package code scanned';
			case 'requiredFullScanned': return 'It is required to scan all the contents in the process';
			case 'logisticsOrderNotAccessConfirmWithoutCell': return 'The content and confirmation are not available in this task!';
			case 'logisticsConfirmItemNeedStepWait': return 'Wait';
			case 'logisticsConfirmItemNeedStepWaitAction': return 'Waiting for action';
			case 'logisticsConfirmItemNeedActionScanCell': return 'Scan the cell';
			case 'logisticsConfirmItemNeedActionScanItem': return 'Scan the product';
			case 'scanCellSpecifiedLocation': return 'Scan the cell specified in the location';
			case 'noScanningRequiredFollowSteps': return 'No scanning is required. Follow the suggested steps';
			case 'qtyUnits': return ({required Object qty}) => '${qty} ед.';
			case 'confirmHaveReturnedCell': return ({required Object article, required Object size, required Object cell}) => 'You confirm that you have returned ${article} / ${size} to the cell ${cell}';
			case 'confirmHaveReturned': return ({required Object article, required Object size}) => 'You confirm that you have physically removed ${article} / ${size} from the current process';
			case 'confirmHaveReturnedError': return ({required Object article, required Object size}) => 'Failed to cancel scanning of ${article} / ${size} in the current process';
			case 'confirmHaveReturnedSuccess': return ({required Object article, required Object size}) => 'Scanning ${article} / ${size} was canceled in the current process';
			case 'hiUser': return ({required Object emoji, required Object userName}) => '${emoji} Hello, ${userName}';
			case 'terminalID': return ({required Object tid}) => 'Terminal.ID: ${tid}';
			case 'versionTsd': return ({required Object name, required Object api}) => 'Version TSD: ${name} (api v. ${api})';
			case 'ofData': return ({required Object a, required Object b}) => ' ${a} of. ${b} u.';
			case 'sizeNotRepresentedOnTheScreen': return ({required Object size}) => 'Size \'${size}\' not represented on the screen';
			case 'updateVersion': return ({required Object emoji, required Object v}) => '${emoji} Version ${v}';
			case 'upload': return ({required Object value, required Object total}) => 'Uploading ${value} / ${total} mb.';
			case 'currentAppLastAvailable': return ({required Object v}) => 'The current version of the ${v} app is the latest available version for you!';
			case 'savePercent': return ({required Object percent}) => 'Save ${percent}%';
			case 'lastUpdateDb': return ({required Object date}) => 'Last update: ${date}';
			case 'quantity': return ({required Object emoji, required Object qty}) => '${emoji} Quantity - ${qty}';
			case 'addingGoodsToCell': return ({required Object cellName}) => 'Adding products to a cell ${cellName}';
			case 'removalGoodsFromCell': return ({required Object cellName}) => 'Removal of goods from the cell ${cellName}';
			case 'adjustmentCell': return ({required Object cellName}) => 'Cell Adjustment ${cellName}';
			case 'movingItemsFromCell': return ({required Object cellName}) => 'Moving items from a cell ${cellName}';
			case 'moveGoodsTheCell': return ({required Object qty, required Object cellTo}) => 'Move ${qty} unit of goods to the cell ${cellTo}';
			case 'removalGoodsFromCellInPackage': return ({required Object cellName}) => 'Removal of goods from the cell ${cellName} in the package';
			case 'takeToCellInPackage': return ({required Object qty, required Object cellFrom, required Object packageId}) => 'Take out ${qty} units of goods from the cell ${cellFrom} From to the package ${packageId}';
			case 'selectWarehouseTitle': return ({required Object name}) => 'Switch to ${name}';
			case 'selectWorkAreaTitle': return ({required Object workareaName, required Object warehouseName}) => 'Switch to the work area ${workareaName} ${warehouseName}';
			case 'packageId': return ({required Object id}) => 'Package #${id}';
			case 'orderWithGrid': return ({required Object orderId}) => 'Order #${orderId}';
			case 'scanThePackage': return ({required Object packageId}) => 'Scan the package #${packageId}';
			case 'confirmRejectionMessage': return ({required Object article, required Object size, required Object reason}) => 'Confirm that you want to reject ${article} / ${size} because of - ${reason}';
			case 'inCell': return ({required Object cellName}) => 'Place the package in a cell ${cellName}';
			case 'dateCreate': return ({required Object date}) => 'Date of creation ${date}';
			case 'qtyPieces': return ({required Object qty}) => '${qty} pc.';
			case 'departureWarehouse': return ({required Object warehouse}) => 'Where from ${warehouse}';
			case 'placePackageInCell': return ({required Object cell}) => 'Place the package in a cell ${cell}';
			case 'addingGoodsToPackaging': return ({required Object packageId}) => 'Adding goods to the packaging ${packageId}';
			case 'removalGoodsFromPackaging': return ({required Object packageId}) => 'Removal of goods from packaging ${packageId}';
			case 'placementGoodsFromPackaging': return ({required Object packageId}) => 'Placement of goods from packaging ${packageId}';
			case 'scanCellName': return ({required Object cellName}) => 'Scan the cell ${cellName}';
			case 'scannedInvalidCell': return ({required Object cellName}) => 'It was required to scan the cell ${cellName}';
			case 'requiredMatrix': return ({required Object article, required Object size}) => '${article} - ${size}, need to scan the matrix';
			case 'alreadyMatrix': return ({required Object article, required Object size}) => '${article} - ${size} have you already scanned this matrix';
			case 'barcodeFailedScan': return ({required Object barcode}) => '${barcode}, failed to save scan!';
			case 'barcodeScanned': return ({required Object barcode}) => '${barcode}, scanned!';
			case 'failedSaveScan': return ({required Object barcode}) => '${barcode}, failed to save scan!';
			case 'itemPlaceInCell': return ({required Object article, required Object size, required Object cell}) => '${article} - ${size}, place in ${cell}\'';
			case 'itemPlaceInCellFailed': return ({required Object article, required Object size}) => '${article} - ${size}, failed to post';
			case 'productPlacement': return 'Product placement';
			case 'productChecking': return 'Product checking';
			case 'repeatLogin': return 'Account confirmation completed\nPlease log in again';
			case 'lichiId': return 'Lichi ID';
			case 'onRegistered': return 'The account has been linked successfully\nPlease request login details from technical support';
			case 'toRegistration': return 'Register';
			case 'alreadyRegistered': return 'Account is already exists';
			case 'inStock': return 'In stock';
			case 'notInStock': return 'Not in stock';
			case 'price': return 'Price';
			case 'color': return 'Color';
			case 'codeIsNotProduct': return 'The code is not from the product';
			case 'invalidProductCodeType': return 'Invalid code type, scan the product code';
			case 'isMissing': return 'Is missing';
			case 'sale': return 'Sale';
			case 'leftCells': return ({required Object qty}) => 'Left - ${qty} cls.';
			case 'inventoryCell': return ({required Object cellName}) => 'Inventory of cell ${cellName}';
			case 'inventoryCellScanNotify': return 'Scan the cell identifier depicted in the QR code for inventory purposes.';
			case 'inventoryCellScanNotifyDubai': return 'Scan the cell identifier depicted in the QR code for inventory purposes at Dubai warehouses.';
			case 'inventoryCellCorrection': return 'Calculate a cell';
			case 'inventoryCellConfirm': return 'Confirm the void';
			case 'inventoryCellZeroing': return 'Reset the cell';
			case 'executor': return 'Executor';
			case 'undefined': return 'Undefined';
			case 'confirmation': return 'Confirmation';
			case 'counting': return 'Counting';
			case 'result': return 'Result';
			case 'zeroing': return 'Zeroing';
			case 'inventoryNotCarriedOut': return 'The inventory has not been carried out';
			case 'inventoryCarriedOut': return 'Inventory completed';
			case 'inventoryCarriedOutWithError': return 'The inventory has been completed. There are discrepancies';
			case 'productCheckingScanNotify': return 'Scan the barcode of the product to check the product';
			case 'incorrectPincode': return 'Invalid PIN code\nthe PIN code must contain only numbers';
			default: return null;
		}
	}
}
